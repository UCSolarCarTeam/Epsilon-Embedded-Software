/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCMSIS_OS_H
#define _MOCKCMSIS_OS_H

#include "unity.h"
#include "CmsisMockHelper.h"
#include "cmsis_os.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcmsis_os_Init(void);
void Mockcmsis_os_Destroy(void);
void Mockcmsis_os_Verify(void);




#define osKernelInitialize_ExpectAndReturn(cmock_retval) osKernelInitialize_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelInitialize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus cmock_to_return);
#define osKernelStart_ExpectAndReturn(cmock_retval) osKernelStart_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus cmock_to_return);
#define osKernelRunning_ExpectAndReturn(cmock_retval) osKernelRunning_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelRunning_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define osKernelSysTick_ExpectAndReturn(cmock_retval) osKernelSysTick_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelSysTick_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadCreate_ExpectAndReturn(thread_def, argument, cmock_retval) osThreadCreate_CMockExpectAndReturn(__LINE__, thread_def, argument, cmock_retval)
void osThreadCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osThreadDef_t* thread_def, void* argument, osThreadId cmock_to_return);
#define osThreadGetId_ExpectAndReturn(cmock_retval) osThreadGetId_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadGetId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId cmock_to_return);
#define osThreadTerminate_ExpectAndReturn(thread_id, cmock_retval) osThreadTerminate_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadTerminate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, osStatus cmock_to_return);
#define osThreadYield_ExpectAndReturn(cmock_retval) osThreadYield_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadYield_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus cmock_to_return);
#define osThreadSetPriority_ExpectAndReturn(thread_id, priority, cmock_retval) osThreadSetPriority_CMockExpectAndReturn(__LINE__, thread_id, priority, cmock_retval)
void osThreadSetPriority_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, osPriority priority, osStatus cmock_to_return);
#define osThreadGetPriority_ExpectAndReturn(thread_id, cmock_retval) osThreadGetPriority_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetPriority_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, osPriority cmock_to_return);
#define osDelay_ExpectAndReturn(millisec, cmock_retval) osDelay_CMockExpectAndReturn(__LINE__, millisec, cmock_retval)
void osDelay_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t millisec, osStatus cmock_to_return);
#define osWait_ExpectAndReturn(millisec, cmock_retval) osWait_CMockExpectAndReturn(__LINE__, millisec, cmock_retval)
void osWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t millisec, osEvent cmock_to_return);
#define osTimerCreate_ExpectAndReturn(timer_def, type, argument, cmock_retval) osTimerCreate_CMockExpectAndReturn(__LINE__, timer_def, type, argument, cmock_retval)
void osTimerCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osTimerDef_t* timer_def, os_timer_type type, void* argument, osTimerId cmock_to_return);
#define osTimerStart_ExpectAndReturn(timer_id, millisec, cmock_retval) osTimerStart_CMockExpectAndReturn(__LINE__, timer_id, millisec, cmock_retval)
void osTimerStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId timer_id, uint32_t millisec, osStatus cmock_to_return);
#define osTimerStop_ExpectAndReturn(timer_id, cmock_retval) osTimerStop_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerStop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId timer_id, osStatus cmock_to_return);
#define osTimerDelete_ExpectAndReturn(timer_id, cmock_retval) osTimerDelete_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId timer_id, osStatus cmock_to_return);
#define osSignalSet_ExpectAndReturn(thread_id, signals, cmock_retval) osSignalSet_CMockExpectAndReturn(__LINE__, thread_id, signals, cmock_retval)
void osSignalSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, int32_t signals, int32_t cmock_to_return);
#define osSignalClear_ExpectAndReturn(thread_id, signals, cmock_retval) osSignalClear_CMockExpectAndReturn(__LINE__, thread_id, signals, cmock_retval)
void osSignalClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, int32_t signals, int32_t cmock_to_return);
#define osSignalWait_ExpectAndReturn(signals, millisec, cmock_retval) osSignalWait_CMockExpectAndReturn(__LINE__, signals, millisec, cmock_retval)
void osSignalWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t signals, uint32_t millisec, osEvent cmock_to_return);
#define osMutexCreate_ExpectAndReturn(mutex_def, cmock_retval) osMutexCreate_CMockExpectAndReturn(__LINE__, mutex_def, cmock_retval)
void osMutexCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osMutexDef_t* mutex_def, osMutexId cmock_to_return);
#define osMutexWait_ExpectAndReturn(mutex_id, millisec, cmock_retval) osMutexWait_CMockExpectAndReturn(__LINE__, mutex_id, millisec, cmock_retval)
void osMutexWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId mutex_id, uint32_t millisec, osStatus cmock_to_return);
#define osMutexRelease_ExpectAndReturn(mutex_id, cmock_retval) osMutexRelease_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexRelease_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId mutex_id, osStatus cmock_to_return);
#define osMutexDelete_ExpectAndReturn(mutex_id, cmock_retval) osMutexDelete_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId mutex_id, osStatus cmock_to_return);
#define osSemaphoreCreate_ExpectAndReturn(semaphore_def, count, cmock_retval) osSemaphoreCreate_CMockExpectAndReturn(__LINE__, semaphore_def, count, cmock_retval)
void osSemaphoreCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osSemaphoreDef_t* semaphore_def, int32_t count, osSemaphoreId cmock_to_return);
#define osSemaphoreWait_ExpectAndReturn(semaphore_id, millisec, cmock_retval) osSemaphoreWait_CMockExpectAndReturn(__LINE__, semaphore_id, millisec, cmock_retval)
void osSemaphoreWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId semaphore_id, uint32_t millisec, int32_t cmock_to_return);
#define osSemaphoreRelease_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreRelease_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreRelease_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId semaphore_id, osStatus cmock_to_return);
#define osSemaphoreDelete_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreDelete_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId semaphore_id, osStatus cmock_to_return);
#define osPoolCreate_ExpectAndReturn(pool_def, cmock_retval) osPoolCreate_CMockExpectAndReturn(__LINE__, pool_def, cmock_retval)
void osPoolCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osPoolDef_t* pool_def, osPoolId cmock_to_return);
#define osPoolAlloc_ExpectAndReturn(pool_id, cmock_retval) osPoolAlloc_CMockExpectAndReturn(__LINE__, pool_id, cmock_retval)
void osPoolAlloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osPoolId pool_id, void* cmock_to_return);
#define osPoolCAlloc_ExpectAndReturn(pool_id, cmock_retval) osPoolCAlloc_CMockExpectAndReturn(__LINE__, pool_id, cmock_retval)
void osPoolCAlloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osPoolId pool_id, void* cmock_to_return);
#define osPoolFree_ExpectAndReturn(pool_id, block, cmock_retval) osPoolFree_CMockExpectAndReturn(__LINE__, pool_id, block, cmock_retval)
void osPoolFree_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osPoolId pool_id, void* block, osStatus cmock_to_return);
#define osMessageCreate_ExpectAndReturn(queue_def, thread_id, cmock_retval) osMessageCreate_CMockExpectAndReturn(__LINE__, queue_def, thread_id, cmock_retval)
void osMessageCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osMessageQDef_t* queue_def, osThreadId thread_id, osMessageQId cmock_to_return);
#define osMessagePut_ExpectAndReturn(queue_id, info, millisec, cmock_retval) osMessagePut_CMockExpectAndReturn(__LINE__, queue_id, info, millisec, cmock_retval)
void osMessagePut_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQId queue_id, uint32_t info, uint32_t millisec, osStatus cmock_to_return);
#define osMessageGet_ExpectAndReturn(queue_id, millisec, cmock_retval) osMessageGet_CMockExpectAndReturn(__LINE__, queue_id, millisec, cmock_retval)
void osMessageGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQId queue_id, uint32_t millisec, osEvent cmock_to_return);
#define osMailCreate_ExpectAndReturn(queue_def, thread_id, cmock_retval) osMailCreate_CMockExpectAndReturn(__LINE__, queue_def, thread_id, cmock_retval)
void osMailCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osMailQDef_t* queue_def, osThreadId thread_id, osMailQId cmock_to_return);
#define osMailAlloc_ExpectAndReturn(queue_id, millisec, cmock_retval) osMailAlloc_CMockExpectAndReturn(__LINE__, queue_id, millisec, cmock_retval)
void osMailAlloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMailQId queue_id, uint32_t millisec, void* cmock_to_return);
#define osMailCAlloc_ExpectAndReturn(queue_id, millisec, cmock_retval) osMailCAlloc_CMockExpectAndReturn(__LINE__, queue_id, millisec, cmock_retval)
void osMailCAlloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMailQId queue_id, uint32_t millisec, void* cmock_to_return);
#define osMailPut_ExpectAndReturn(queue_id, mail, cmock_retval) osMailPut_CMockExpectAndReturn(__LINE__, queue_id, mail, cmock_retval)
void osMailPut_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMailQId queue_id, void* mail, osStatus cmock_to_return);
#define osMailGet_ExpectAndReturn(queue_id, millisec, cmock_retval) osMailGet_CMockExpectAndReturn(__LINE__, queue_id, millisec, cmock_retval)
void osMailGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMailQId queue_id, uint32_t millisec, osEvent cmock_to_return);
#define osMailFree_ExpectAndReturn(queue_id, mail, cmock_retval) osMailFree_CMockExpectAndReturn(__LINE__, queue_id, mail, cmock_retval)
void osMailFree_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMailQId queue_id, void* mail, osStatus cmock_to_return);
#define osSystickHandler_Expect() osSystickHandler_CMockExpect(__LINE__)
void osSystickHandler_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define osThreadGetState_ExpectAndReturn(thread_id, cmock_retval) osThreadGetState_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, osThreadState cmock_to_return);
#define osThreadIsSuspended_ExpectAndReturn(thread_id, cmock_retval) osThreadIsSuspended_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadIsSuspended_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, osStatus cmock_to_return);
#define osThreadSuspend_ExpectAndReturn(thread_id, cmock_retval) osThreadSuspend_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadSuspend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, osStatus cmock_to_return);
#define osThreadResume_ExpectAndReturn(thread_id, cmock_retval) osThreadResume_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadResume_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId thread_id, osStatus cmock_to_return);
#define osThreadSuspendAll_ExpectAndReturn(cmock_retval) osThreadSuspendAll_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadSuspendAll_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus cmock_to_return);
#define osThreadResumeAll_ExpectAndReturn(cmock_retval) osThreadResumeAll_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadResumeAll_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus cmock_to_return);
#define osDelayUntil_ExpectAndReturn(PreviousWakeTime, millisec, cmock_retval) osDelayUntil_CMockExpectAndReturn(__LINE__, PreviousWakeTime, millisec, cmock_retval)
void osDelayUntil_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* PreviousWakeTime, uint32_t millisec, osStatus cmock_to_return);
#define osThreadList_ExpectAndReturn(buffer, cmock_retval) osThreadList_CMockExpectAndReturn(__LINE__, buffer, cmock_retval)
void osThreadList_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* buffer, osStatus cmock_to_return);
#define osMessagePeek_ExpectAndReturn(queue_id, millisec, cmock_retval) osMessagePeek_CMockExpectAndReturn(__LINE__, queue_id, millisec, cmock_retval)
void osMessagePeek_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQId queue_id, uint32_t millisec, osEvent cmock_to_return);
#define osRecursiveMutexCreate_ExpectAndReturn(mutex_def, cmock_retval) osRecursiveMutexCreate_CMockExpectAndReturn(__LINE__, mutex_def, cmock_retval)
void osRecursiveMutexCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osMutexDef_t* mutex_def, osMutexId cmock_to_return);
#define osRecursiveMutexRelease_ExpectAndReturn(mutex_id, cmock_retval) osRecursiveMutexRelease_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osRecursiveMutexRelease_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId mutex_id, osStatus cmock_to_return);
#define osRecursiveMutexWait_ExpectAndReturn(mutex_id, millisec, cmock_retval) osRecursiveMutexWait_CMockExpectAndReturn(__LINE__, mutex_id, millisec, cmock_retval)
void osRecursiveMutexWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId mutex_id, uint32_t millisec, osStatus cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
