/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKSTM32F4XX_HAL_CAN_H
#define _MOCKSTM32F4XX_HAL_CAN_H

#include "unity.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_can.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockstm32f4xx_hal_can_Init(void);
void Mockstm32f4xx_hal_can_Destroy(void);
void Mockstm32f4xx_hal_can_Verify(void);


typedef void(*cmock_stm32f4xx_hal_can_func_ptr1)(CAN_HandleTypeDef* _hcan);


#define HAL_CAN_Init_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_Init_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_DeInit_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_DeInit_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_MspInit_Expect(hcan) HAL_CAN_MspInit_CMockExpect(__LINE__, hcan)
void HAL_CAN_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_MspDeInit_Expect(hcan) HAL_CAN_MspDeInit_CMockExpect(__LINE__, hcan)
void HAL_CAN_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_RegisterCallback_ExpectAndReturn(hcan, CallbackID, pCallback, cmock_retval) HAL_CAN_RegisterCallback_CMockExpectAndReturn(__LINE__, hcan, CallbackID, pCallback, cmock_retval)
void HAL_CAN_RegisterCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_CAN_CallbackIDTypeDef CallbackID, cmock_stm32f4xx_hal_can_func_ptr1 pCallback, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_UnRegisterCallback_ExpectAndReturn(hcan, CallbackID, cmock_retval) HAL_CAN_UnRegisterCallback_CMockExpectAndReturn(__LINE__, hcan, CallbackID, cmock_retval)
void HAL_CAN_UnRegisterCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_CAN_CallbackIDTypeDef CallbackID, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_ConfigFilter_ExpectAndReturn(hcan, sFilterConfig, cmock_retval) HAL_CAN_ConfigFilter_CMockExpectAndReturn(__LINE__, hcan, sFilterConfig, cmock_retval)
void HAL_CAN_ConfigFilter_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, CAN_FilterTypeDef* sFilterConfig, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_Start_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_Start_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_Start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_Stop_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_Stop_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_Stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_RequestSleep_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_RequestSleep_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_RequestSleep_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_WakeUp_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_WakeUp_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_WakeUp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_IsSleepActive_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_IsSleepActive_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_IsSleepActive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t cmock_to_return);
#define HAL_CAN_AddTxMessage_ExpectAndReturn(hcan, pHeader, aData, pTxMailbox, cmock_retval) HAL_CAN_AddTxMessage_CMockExpectAndReturn(__LINE__, hcan, pHeader, aData, pTxMailbox, cmock_retval)
void HAL_CAN_AddTxMessage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* pHeader, uint8_t* aData, uint32_t* pTxMailbox, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_AbortTxRequest_ExpectAndReturn(hcan, TxMailboxes, cmock_retval) HAL_CAN_AbortTxRequest_CMockExpectAndReturn(__LINE__, hcan, TxMailboxes, cmock_retval)
void HAL_CAN_AbortTxRequest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t TxMailboxes, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_GetTxMailboxesFreeLevel_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_GetTxMailboxesFreeLevel_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_GetTxMailboxesFreeLevel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t cmock_to_return);
#define HAL_CAN_IsTxMessagePending_ExpectAndReturn(hcan, TxMailboxes, cmock_retval) HAL_CAN_IsTxMessagePending_CMockExpectAndReturn(__LINE__, hcan, TxMailboxes, cmock_retval)
void HAL_CAN_IsTxMessagePending_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t TxMailboxes, uint32_t cmock_to_return);
#define HAL_CAN_GetTxTimestamp_ExpectAndReturn(hcan, TxMailbox, cmock_retval) HAL_CAN_GetTxTimestamp_CMockExpectAndReturn(__LINE__, hcan, TxMailbox, cmock_retval)
void HAL_CAN_GetTxTimestamp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t TxMailbox, uint32_t cmock_to_return);
#define HAL_CAN_GetRxMessage_ExpectAndReturn(hcan, RxFifo, pHeader, aData, cmock_retval) HAL_CAN_GetRxMessage_CMockExpectAndReturn(__LINE__, hcan, RxFifo, pHeader, aData, cmock_retval)
void HAL_CAN_GetRxMessage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef* pHeader, uint8_t* aData, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_GetRxFifoFillLevel_ExpectAndReturn(hcan, RxFifo, cmock_retval) HAL_CAN_GetRxFifoFillLevel_CMockExpectAndReturn(__LINE__, hcan, RxFifo, cmock_retval)
void HAL_CAN_GetRxFifoFillLevel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t RxFifo, uint32_t cmock_to_return);
#define HAL_CAN_ActivateNotification_ExpectAndReturn(hcan, ActiveITs, cmock_retval) HAL_CAN_ActivateNotification_CMockExpectAndReturn(__LINE__, hcan, ActiveITs, cmock_retval)
void HAL_CAN_ActivateNotification_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t ActiveITs, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_DeactivateNotification_ExpectAndReturn(hcan, InactiveITs, cmock_retval) HAL_CAN_DeactivateNotification_CMockExpectAndReturn(__LINE__, hcan, InactiveITs, cmock_retval)
void HAL_CAN_DeactivateNotification_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t InactiveITs, HAL_StatusTypeDef cmock_to_return);
#define HAL_CAN_IRQHandler_Expect(hcan) HAL_CAN_IRQHandler_CMockExpect(__LINE__, hcan)
void HAL_CAN_IRQHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_TxMailbox0CompleteCallback_Expect(hcan) HAL_CAN_TxMailbox0CompleteCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_TxMailbox0CompleteCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_TxMailbox1CompleteCallback_Expect(hcan) HAL_CAN_TxMailbox1CompleteCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_TxMailbox1CompleteCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_TxMailbox2CompleteCallback_Expect(hcan) HAL_CAN_TxMailbox2CompleteCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_TxMailbox2CompleteCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_TxMailbox0AbortCallback_Expect(hcan) HAL_CAN_TxMailbox0AbortCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_TxMailbox0AbortCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_TxMailbox1AbortCallback_Expect(hcan) HAL_CAN_TxMailbox1AbortCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_TxMailbox1AbortCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_TxMailbox2AbortCallback_Expect(hcan) HAL_CAN_TxMailbox2AbortCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_TxMailbox2AbortCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_RxFifo0MsgPendingCallback_Expect(hcan) HAL_CAN_RxFifo0MsgPendingCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_RxFifo0MsgPendingCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_RxFifo0FullCallback_Expect(hcan) HAL_CAN_RxFifo0FullCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_RxFifo0FullCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_RxFifo1MsgPendingCallback_Expect(hcan) HAL_CAN_RxFifo1MsgPendingCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_RxFifo1MsgPendingCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_RxFifo1FullCallback_Expect(hcan) HAL_CAN_RxFifo1FullCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_RxFifo1FullCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_SleepCallback_Expect(hcan) HAL_CAN_SleepCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_SleepCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_WakeUpFromRxMsgCallback_Expect(hcan) HAL_CAN_WakeUpFromRxMsgCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_WakeUpFromRxMsgCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_ErrorCallback_Expect(hcan) HAL_CAN_ErrorCallback_CMockExpect(__LINE__, hcan)
void HAL_CAN_ErrorCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan);
#define HAL_CAN_GetState_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_GetState_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_CAN_StateTypeDef cmock_to_return);
#define HAL_CAN_GetError_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_GetError_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_GetError_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, uint32_t cmock_to_return);
#define HAL_CAN_ResetError_ExpectAndReturn(hcan, cmock_retval) HAL_CAN_ResetError_CMockExpectAndReturn(__LINE__, hcan, cmock_retval)
void HAL_CAN_ResetError_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CAN_HandleTypeDef* hcan, HAL_StatusTypeDef cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
