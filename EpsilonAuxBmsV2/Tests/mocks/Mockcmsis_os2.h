/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCMSIS_OS2_H
#define _MOCKCMSIS_OS2_H

#include "unity.h"
#include "cmsis_os2.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcmsis_os2_Init(void);
void Mockcmsis_os2_Destroy(void);
void Mockcmsis_os2_Verify(void);




#define osKernelInitialize_ExpectAndReturn(cmock_retval) osKernelInitialize_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelInitialize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osKernelGetInfo_ExpectAndReturn(version, id_buf, id_size, cmock_retval) osKernelGetInfo_CMockExpectAndReturn(__LINE__, version, id_buf, id_size, cmock_retval)
void osKernelGetInfo_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osVersion_t* version, char* id_buf, uint32_t id_size, osStatus_t cmock_to_return);
#define osKernelGetState_ExpectAndReturn(cmock_retval) osKernelGetState_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osKernelState_t cmock_to_return);
#define osKernelStart_ExpectAndReturn(cmock_retval) osKernelStart_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osKernelLock_ExpectAndReturn(cmock_retval) osKernelLock_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelLock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define osKernelUnlock_ExpectAndReturn(cmock_retval) osKernelUnlock_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelUnlock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define osKernelRestoreLock_ExpectAndReturn(lock, cmock_retval) osKernelRestoreLock_CMockExpectAndReturn(__LINE__, lock, cmock_retval)
void osKernelRestoreLock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t lock, int32_t cmock_to_return);
#define osKernelSuspend_ExpectAndReturn(cmock_retval) osKernelSuspend_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelSuspend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelResume_Expect(sleep_ticks) osKernelResume_CMockExpect(__LINE__, sleep_ticks)
void osKernelResume_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t sleep_ticks);
#define osKernelGetTickCount_ExpectAndReturn(cmock_retval) osKernelGetTickCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetTickCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelGetTickFreq_ExpectAndReturn(cmock_retval) osKernelGetTickFreq_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetTickFreq_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelGetSysTimerCount_ExpectAndReturn(cmock_retval) osKernelGetSysTimerCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetSysTimerCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osKernelGetSysTimerFreq_ExpectAndReturn(cmock_retval) osKernelGetSysTimerFreq_CMockExpectAndReturn(__LINE__, cmock_retval)
void osKernelGetSysTimerFreq_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadNew_ExpectAndReturn(func, argument, attr, cmock_retval) osThreadNew_CMockExpectAndReturn(__LINE__, func, argument, attr, cmock_retval)
void osThreadNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadFunc_t func, void* argument, const osThreadAttr_t* attr, osThreadId_t cmock_to_return);
#define osThreadGetName_ExpectAndReturn(thread_id, cmock_retval) osThreadGetName_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, const char* cmock_to_return);
#define osThreadGetId_ExpectAndReturn(cmock_retval) osThreadGetId_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadGetId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t cmock_to_return);
#define osThreadGetState_ExpectAndReturn(thread_id, cmock_retval) osThreadGetState_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osThreadState_t cmock_to_return);
#define osThreadGetStackSize_ExpectAndReturn(thread_id, cmock_retval) osThreadGetStackSize_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetStackSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, uint32_t cmock_to_return);
#define osThreadGetStackSpace_ExpectAndReturn(thread_id, cmock_retval) osThreadGetStackSpace_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetStackSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, uint32_t cmock_to_return);
#define osThreadSetPriority_ExpectAndReturn(thread_id, priority, cmock_retval) osThreadSetPriority_CMockExpectAndReturn(__LINE__, thread_id, priority, cmock_retval)
void osThreadSetPriority_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osPriority_t priority, osStatus_t cmock_to_return);
#define osThreadGetPriority_ExpectAndReturn(thread_id, cmock_retval) osThreadGetPriority_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadGetPriority_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osPriority_t cmock_to_return);
#define osThreadYield_ExpectAndReturn(cmock_retval) osThreadYield_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadYield_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osStatus_t cmock_to_return);
#define osThreadSuspend_ExpectAndReturn(thread_id, cmock_retval) osThreadSuspend_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadSuspend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
#define osThreadResume_ExpectAndReturn(thread_id, cmock_retval) osThreadResume_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadResume_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
#define osThreadDetach_ExpectAndReturn(thread_id, cmock_retval) osThreadDetach_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadDetach_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
#define osThreadJoin_ExpectAndReturn(thread_id, cmock_retval) osThreadJoin_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadJoin_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
#define osThreadExit_Expect() osThreadExit_CMockExpect(__LINE__)
void osThreadExit_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define osThreadTerminate_ExpectAndReturn(thread_id, cmock_retval) osThreadTerminate_CMockExpectAndReturn(__LINE__, thread_id, cmock_retval)
void osThreadTerminate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, osStatus_t cmock_to_return);
#define osThreadGetCount_ExpectAndReturn(cmock_retval) osThreadGetCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadEnumerate_ExpectAndReturn(thread_array, array_items, cmock_retval) osThreadEnumerate_CMockExpectAndReturn(__LINE__, thread_array, array_items, cmock_retval)
void osThreadEnumerate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t* thread_array, uint32_t array_items, uint32_t cmock_to_return);
#define osThreadFlagsSet_ExpectAndReturn(thread_id, flags, cmock_retval) osThreadFlagsSet_CMockExpectAndReturn(__LINE__, thread_id, flags, cmock_retval)
void osThreadFlagsSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osThreadId_t thread_id, uint32_t flags, uint32_t cmock_to_return);
#define osThreadFlagsClear_ExpectAndReturn(flags, cmock_retval) osThreadFlagsClear_CMockExpectAndReturn(__LINE__, flags, cmock_retval)
void osThreadFlagsClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t flags, uint32_t cmock_to_return);
#define osThreadFlagsGet_ExpectAndReturn(cmock_retval) osThreadFlagsGet_CMockExpectAndReturn(__LINE__, cmock_retval)
void osThreadFlagsGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define osThreadFlagsWait_ExpectAndReturn(flags, options, timeout, cmock_retval) osThreadFlagsWait_CMockExpectAndReturn(__LINE__, flags, options, timeout, cmock_retval)
void osThreadFlagsWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t flags, uint32_t options, uint32_t timeout, uint32_t cmock_to_return);
#define osDelay_ExpectAndReturn(ticks, cmock_retval) osDelay_CMockExpectAndReturn(__LINE__, ticks, cmock_retval)
void osDelay_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ticks, osStatus_t cmock_to_return);
#define osDelayUntil_ExpectAndReturn(ticks, cmock_retval) osDelayUntil_CMockExpectAndReturn(__LINE__, ticks, cmock_retval)
void osDelayUntil_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ticks, osStatus_t cmock_to_return);
#define osTimerNew_ExpectAndReturn(func, type, argument, attr, cmock_retval) osTimerNew_CMockExpectAndReturn(__LINE__, func, type, argument, attr, cmock_retval)
void osTimerNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerFunc_t func, osTimerType_t type, void* argument, const osTimerAttr_t* attr, osTimerId_t cmock_to_return);
#define osTimerGetName_ExpectAndReturn(timer_id, cmock_retval) osTimerGetName_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, const char* cmock_to_return);
#define osTimerStart_ExpectAndReturn(timer_id, ticks, cmock_retval) osTimerStart_CMockExpectAndReturn(__LINE__, timer_id, ticks, cmock_retval)
void osTimerStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, uint32_t ticks, osStatus_t cmock_to_return);
#define osTimerStop_ExpectAndReturn(timer_id, cmock_retval) osTimerStop_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerStop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, osStatus_t cmock_to_return);
#define osTimerIsRunning_ExpectAndReturn(timer_id, cmock_retval) osTimerIsRunning_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerIsRunning_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, uint32_t cmock_to_return);
#define osTimerDelete_ExpectAndReturn(timer_id, cmock_retval) osTimerDelete_CMockExpectAndReturn(__LINE__, timer_id, cmock_retval)
void osTimerDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osTimerId_t timer_id, osStatus_t cmock_to_return);
#define osEventFlagsNew_ExpectAndReturn(attr, cmock_retval) osEventFlagsNew_CMockExpectAndReturn(__LINE__, attr, cmock_retval)
void osEventFlagsNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osEventFlagsAttr_t* attr, osEventFlagsId_t cmock_to_return);
#define osEventFlagsGetName_ExpectAndReturn(ef_id, cmock_retval) osEventFlagsGetName_CMockExpectAndReturn(__LINE__, ef_id, cmock_retval)
void osEventFlagsGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, const char* cmock_to_return);
#define osEventFlagsSet_ExpectAndReturn(ef_id, flags, cmock_retval) osEventFlagsSet_CMockExpectAndReturn(__LINE__, ef_id, flags, cmock_retval)
void osEventFlagsSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t flags, uint32_t cmock_to_return);
#define osEventFlagsClear_ExpectAndReturn(ef_id, flags, cmock_retval) osEventFlagsClear_CMockExpectAndReturn(__LINE__, ef_id, flags, cmock_retval)
void osEventFlagsClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t flags, uint32_t cmock_to_return);
#define osEventFlagsGet_ExpectAndReturn(ef_id, cmock_retval) osEventFlagsGet_CMockExpectAndReturn(__LINE__, ef_id, cmock_retval)
void osEventFlagsGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t cmock_to_return);
#define osEventFlagsWait_ExpectAndReturn(ef_id, flags, options, timeout, cmock_retval) osEventFlagsWait_CMockExpectAndReturn(__LINE__, ef_id, flags, options, timeout, cmock_retval)
void osEventFlagsWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout, uint32_t cmock_to_return);
#define osEventFlagsDelete_ExpectAndReturn(ef_id, cmock_retval) osEventFlagsDelete_CMockExpectAndReturn(__LINE__, ef_id, cmock_retval)
void osEventFlagsDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osEventFlagsId_t ef_id, osStatus_t cmock_to_return);
#define osMutexNew_ExpectAndReturn(attr, cmock_retval) osMutexNew_CMockExpectAndReturn(__LINE__, attr, cmock_retval)
void osMutexNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const osMutexAttr_t* attr, osMutexId_t cmock_to_return);
#define osMutexGetName_ExpectAndReturn(mutex_id, cmock_retval) osMutexGetName_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, const char* cmock_to_return);
#define osMutexAcquire_ExpectAndReturn(mutex_id, timeout, cmock_retval) osMutexAcquire_CMockExpectAndReturn(__LINE__, mutex_id, timeout, cmock_retval)
void osMutexAcquire_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, uint32_t timeout, osStatus_t cmock_to_return);
#define osMutexRelease_ExpectAndReturn(mutex_id, cmock_retval) osMutexRelease_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexRelease_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, osStatus_t cmock_to_return);
#define osMutexGetOwner_ExpectAndReturn(mutex_id, cmock_retval) osMutexGetOwner_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexGetOwner_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, osThreadId_t cmock_to_return);
#define osMutexDelete_ExpectAndReturn(mutex_id, cmock_retval) osMutexDelete_CMockExpectAndReturn(__LINE__, mutex_id, cmock_retval)
void osMutexDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMutexId_t mutex_id, osStatus_t cmock_to_return);
#define osSemaphoreNew_ExpectAndReturn(max_count, initial_count, attr, cmock_retval) osSemaphoreNew_CMockExpectAndReturn(__LINE__, max_count, initial_count, attr, cmock_retval)
void osSemaphoreNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t* attr, osSemaphoreId_t cmock_to_return);
#define osSemaphoreGetName_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreGetName_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, const char* cmock_to_return);
#define osSemaphoreAcquire_ExpectAndReturn(semaphore_id, timeout, cmock_retval) osSemaphoreAcquire_CMockExpectAndReturn(__LINE__, semaphore_id, timeout, cmock_retval)
void osSemaphoreAcquire_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, uint32_t timeout, osStatus_t cmock_to_return);
#define osSemaphoreRelease_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreRelease_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreRelease_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, osStatus_t cmock_to_return);
#define osSemaphoreGetCount_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreGetCount_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, uint32_t cmock_to_return);
#define osSemaphoreDelete_ExpectAndReturn(semaphore_id, cmock_retval) osSemaphoreDelete_CMockExpectAndReturn(__LINE__, semaphore_id, cmock_retval)
void osSemaphoreDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osSemaphoreId_t semaphore_id, osStatus_t cmock_to_return);
#define osMemoryPoolNew_ExpectAndReturn(block_count, block_size, attr, cmock_retval) osMemoryPoolNew_CMockExpectAndReturn(__LINE__, block_count, block_size, attr, cmock_retval)
void osMemoryPoolNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t* attr, osMemoryPoolId_t cmock_to_return);
#define osMemoryPoolGetName_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetName_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, const char* cmock_to_return);
#define osMemoryPoolAlloc_ExpectAndReturn(mp_id, timeout, cmock_retval) osMemoryPoolAlloc_CMockExpectAndReturn(__LINE__, mp_id, timeout, cmock_retval)
void osMemoryPoolAlloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t timeout, void* cmock_to_return);
#define osMemoryPoolFree_ExpectAndReturn(mp_id, block, cmock_retval) osMemoryPoolFree_CMockExpectAndReturn(__LINE__, mp_id, block, cmock_retval)
void osMemoryPoolFree_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, void* block, osStatus_t cmock_to_return);
#define osMemoryPoolGetCapacity_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetCapacity_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetCapacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
#define osMemoryPoolGetBlockSize_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetBlockSize_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetBlockSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
#define osMemoryPoolGetCount_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetCount_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
#define osMemoryPoolGetSpace_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolGetSpace_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolGetSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, uint32_t cmock_to_return);
#define osMemoryPoolDelete_ExpectAndReturn(mp_id, cmock_retval) osMemoryPoolDelete_CMockExpectAndReturn(__LINE__, mp_id, cmock_retval)
void osMemoryPoolDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMemoryPoolId_t mp_id, osStatus_t cmock_to_return);
#define osMessageQueueNew_ExpectAndReturn(msg_count, msg_size, attr, cmock_retval) osMessageQueueNew_CMockExpectAndReturn(__LINE__, msg_count, msg_size, attr, cmock_retval)
void osMessageQueueNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t* attr, osMessageQueueId_t cmock_to_return);
#define osMessageQueueGetName_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetName_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, const char* cmock_to_return);
#define osMessageQueuePut_ExpectAndReturn(mq_id, msg_ptr, msg_prio, timeout, cmock_retval) osMessageQueuePut_CMockExpectAndReturn(__LINE__, mq_id, msg_ptr, msg_prio, timeout, cmock_retval)
void osMessageQueuePut_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, const void* msg_ptr, uint8_t msg_prio, uint32_t timeout, osStatus_t cmock_to_return);
#define osMessageQueueGet_ExpectAndReturn(mq_id, msg_ptr, msg_prio, timeout, cmock_retval) osMessageQueueGet_CMockExpectAndReturn(__LINE__, mq_id, msg_ptr, msg_prio, timeout, cmock_retval)
void osMessageQueueGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, void* msg_ptr, uint8_t* msg_prio, uint32_t timeout, osStatus_t cmock_to_return);
#define osMessageQueueGetCapacity_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetCapacity_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetCapacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
#define osMessageQueueGetMsgSize_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetMsgSize_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetMsgSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
#define osMessageQueueGetCount_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetCount_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
#define osMessageQueueGetSpace_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueGetSpace_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueGetSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, uint32_t cmock_to_return);
#define osMessageQueueReset_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueReset_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueReset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, osStatus_t cmock_to_return);
#define osMessageQueueDelete_ExpectAndReturn(mq_id, cmock_retval) osMessageQueueDelete_CMockExpectAndReturn(__LINE__, mq_id, cmock_retval)
void osMessageQueueDelete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osMessageQueueId_t mq_id, osStatus_t cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
