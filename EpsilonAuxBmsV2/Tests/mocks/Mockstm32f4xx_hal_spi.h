/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKSTM32F4XX_HAL_SPI_H
#define _MOCKSTM32F4XX_HAL_SPI_H

#include "unity.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_spi.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockstm32f4xx_hal_spi_Init(void);
void Mockstm32f4xx_hal_spi_Destroy(void);
void Mockstm32f4xx_hal_spi_Verify(void);




#define HAL_SPI_Init_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_Init_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_DeInit_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_DeInit_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_DeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_MspInit_Expect(hspi) HAL_SPI_MspInit_CMockExpect(__LINE__, hspi)
void HAL_SPI_MspInit_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_MspDeInit_Expect(hspi) HAL_SPI_MspDeInit_CMockExpect(__LINE__, hspi)
void HAL_SPI_MspDeInit_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_RegisterCallback_ExpectAndReturn(hspi, CallbackID, pCallback, cmock_retval) HAL_SPI_RegisterCallback_CMockExpectAndReturn(__LINE__, hspi, CallbackID, pCallback, cmock_retval)
void HAL_SPI_RegisterCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_UnRegisterCallback_ExpectAndReturn(hspi, CallbackID, cmock_retval) HAL_SPI_UnRegisterCallback_CMockExpectAndReturn(__LINE__, hspi, CallbackID, cmock_retval)
void HAL_SPI_UnRegisterCallback_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_SPI_CallbackIDTypeDef CallbackID, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Transmit_ExpectAndReturn(hspi, pData, Size, Timeout, cmock_retval) HAL_SPI_Transmit_CMockExpectAndReturn(__LINE__, hspi, pData, Size, Timeout, cmock_retval)
void HAL_SPI_Transmit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Receive_ExpectAndReturn(hspi, pData, Size, Timeout, cmock_retval) HAL_SPI_Receive_CMockExpectAndReturn(__LINE__, hspi, pData, Size, Timeout, cmock_retval)
void HAL_SPI_Receive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_TransmitReceive_ExpectAndReturn(hspi, pTxData, pRxData, Size, Timeout, cmock_retval) HAL_SPI_TransmitReceive_CMockExpectAndReturn(__LINE__, hspi, pTxData, pRxData, Size, Timeout, cmock_retval)
void HAL_SPI_TransmitReceive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pTxData, uint8_t* pRxData, uint16_t Size, uint32_t Timeout, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Transmit_IT_ExpectAndReturn(hspi, pData, Size, cmock_retval) HAL_SPI_Transmit_IT_CMockExpectAndReturn(__LINE__, hspi, pData, Size, cmock_retval)
void HAL_SPI_Transmit_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pData, uint16_t Size, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Receive_IT_ExpectAndReturn(hspi, pData, Size, cmock_retval) HAL_SPI_Receive_IT_CMockExpectAndReturn(__LINE__, hspi, pData, Size, cmock_retval)
void HAL_SPI_Receive_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pData, uint16_t Size, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_TransmitReceive_IT_ExpectAndReturn(hspi, pTxData, pRxData, Size, cmock_retval) HAL_SPI_TransmitReceive_IT_CMockExpectAndReturn(__LINE__, hspi, pTxData, pRxData, Size, cmock_retval)
void HAL_SPI_TransmitReceive_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pTxData, uint8_t* pRxData, uint16_t Size, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Transmit_DMA_ExpectAndReturn(hspi, pData, Size, cmock_retval) HAL_SPI_Transmit_DMA_CMockExpectAndReturn(__LINE__, hspi, pData, Size, cmock_retval)
void HAL_SPI_Transmit_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pData, uint16_t Size, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Receive_DMA_ExpectAndReturn(hspi, pData, Size, cmock_retval) HAL_SPI_Receive_DMA_CMockExpectAndReturn(__LINE__, hspi, pData, Size, cmock_retval)
void HAL_SPI_Receive_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pData, uint16_t Size, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_TransmitReceive_DMA_ExpectAndReturn(hspi, pTxData, pRxData, Size, cmock_retval) HAL_SPI_TransmitReceive_DMA_CMockExpectAndReturn(__LINE__, hspi, pTxData, pRxData, Size, cmock_retval)
void HAL_SPI_TransmitReceive_DMA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint8_t* pTxData, uint8_t* pRxData, uint16_t Size, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_DMAPause_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_DMAPause_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_DMAPause_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_DMAResume_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_DMAResume_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_DMAResume_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_DMAStop_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_DMAStop_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_DMAStop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Abort_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_Abort_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_Abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_Abort_IT_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_Abort_IT_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_Abort_IT_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_StatusTypeDef cmock_to_return);
#define HAL_SPI_IRQHandler_Expect(hspi) HAL_SPI_IRQHandler_CMockExpect(__LINE__, hspi)
void HAL_SPI_IRQHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_TxCpltCallback_Expect(hspi) HAL_SPI_TxCpltCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_TxCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_RxCpltCallback_Expect(hspi) HAL_SPI_RxCpltCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_RxCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_TxRxCpltCallback_Expect(hspi) HAL_SPI_TxRxCpltCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_TxRxCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_TxHalfCpltCallback_Expect(hspi) HAL_SPI_TxHalfCpltCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_TxHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_RxHalfCpltCallback_Expect(hspi) HAL_SPI_RxHalfCpltCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_RxHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_TxRxHalfCpltCallback_Expect(hspi) HAL_SPI_TxRxHalfCpltCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_TxRxHalfCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_ErrorCallback_Expect(hspi) HAL_SPI_ErrorCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_ErrorCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_AbortCpltCallback_Expect(hspi) HAL_SPI_AbortCpltCallback_CMockExpect(__LINE__, hspi)
void HAL_SPI_AbortCpltCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi);
#define HAL_SPI_GetState_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_GetState_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, HAL_SPI_StateTypeDef cmock_to_return);
#define HAL_SPI_GetError_ExpectAndReturn(hspi, cmock_retval) HAL_SPI_GetError_CMockExpectAndReturn(__LINE__, hspi, cmock_retval)
void HAL_SPI_GetError_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SPI_HandleTypeDef* hspi, uint32_t cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
