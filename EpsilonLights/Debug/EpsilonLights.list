
EpsilonLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004420  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08004dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00005880  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20005894  20005894  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_line   0001b622  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0001b9ca  00000000  00000000  0003b666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003fe0  00000000  00000000  00057030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f40  00000000  00000000  0005b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00088269  00000000  00000000  0005bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  000e41c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0000db67  00000000  00000000  000e5950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c04  00000000  00000000  000f34b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0010d0bb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002dcc  00000000  00000000  0010d10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004590 	.word	0x08004590

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004590 	.word	0x08004590

080001c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
  ldr  r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001f2:	f000 f813 	bl	800021c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f004 f991 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80001fa:	f003 f97b 	bl	80034f4 <main>
  bx  lr    
 80001fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000204:	08004dc0 	.word	0x08004dc0
  ldr  r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800020c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000210:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000214:	20005894 	.word	0x20005894

08000218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <SystemInit>:
  */
void SystemInit(void)
{
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <SystemInit+0x40>)
 800021e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <SystemInit+0x44>)
 800022c:	681a      	ldr	r2, [r3, #0]
    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 800022e:	2000      	movs	r0, #0
    RCC->CR |= (uint32_t)0x00000001;
 8000230:	f042 0201 	orr.w	r2, r2, #1
 8000234:	601a      	str	r2, [r3, #0]
    RCC->CFGR = 0x00000000;
 8000236:	6098      	str	r0, [r3, #8]
    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800023e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000242:	601a      	str	r2, [r3, #0]
    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <SystemInit+0x48>)
 8000246:	605a      	str	r2, [r3, #4]
    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800024e:	601a      	str	r2, [r3, #0]
    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8000250:	60d8      	str	r0, [r3, #12]
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
    /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000256:	608b      	str	r3, [r1, #8]
#endif
}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000ed00 	.word	0xe000ed00
 8000260:	40023800 	.word	0x40023800
 8000264:	24003010 	.word	0x24003010

08000268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000268:	b508      	push	{r3, lr}
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_Init+0x30>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000272:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */
#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800027a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */
#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000282:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */
    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000284:	2003      	movs	r0, #3
 8000286:	f000 fb21 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>
    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 800028a:	2000      	movs	r0, #0
 800028c:	f003 fac6 	bl	800381c <HAL_InitTick>
    /* Init the low level hardware */
    HAL_MspInit();
 8000290:	f003 fa52 	bl	8003738 <HAL_MspInit>
    /* Return function status */
    return HAL_OK;
}
 8000294:	2000      	movs	r0, #0
 8000296:	bd08      	pop	{r3, pc}
 8000298:	40023c00 	.word	0x40023c00

0800029c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
    uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000030 	.word	0x20000030

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000030 	.word	0x20000030

080002b8 <HAL_CAN_ConfigFilter>:
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
    assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
    filternbrbitpos = ((uint32_t)1U) << sFilterConfig->FilterNumber;
    /* Initialisation mode for the filter */
    CAN1->FMR |= (uint32_t)CAN_FMR_FINIT;
 80002b8:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <HAL_CAN_ConfigFilter+0xf4>)
    filternbrbitpos = ((uint32_t)1U) << sFilterConfig->FilterNumber;
 80002ba:	694a      	ldr	r2, [r1, #20]
{
 80002bc:	b530      	push	{r4, r5, lr}
    CAN1->FMR |= (uint32_t)CAN_FMR_FINIT;
 80002be:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80002c2:	f044 0401 	orr.w	r4, r4, #1
 80002c6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    /* Select the start slave bank */
    CAN1->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
 80002ca:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80002ce:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 80002d2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CAN1->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8U);
 80002d6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80002da:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80002dc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80002e0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    /* Filter Deactivation */
    CAN1->FA1R &= ~(uint32_t)filternbrbitpos;
 80002e4:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = ((uint32_t)1U) << sFilterConfig->FilterNumber;
 80002e8:	2001      	movs	r0, #1
 80002ea:	4090      	lsls	r0, r2
    CAN1->FA1R &= ~(uint32_t)filternbrbitpos;
 80002ec:	ea25 0500 	bic.w	r5, r5, r0
 80002f0:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80002f4:	69cd      	ldr	r5, [r1, #28]
    CAN1->FA1R &= ~(uint32_t)filternbrbitpos;
 80002f6:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	d135      	bne.n	8000368 <HAL_CAN_ConfigFilter+0xb0>
    {
        /* 16-bit scale for the filter */
        CAN1->FS1R &= ~(uint32_t)filternbrbitpos;
 80002fc:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000300:	4025      	ands	r5, r4
 8000302:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        /* First 16-bit identifier and First 16-bit mask */
        /* Or First 16-bit identifier and Second 16-bit identifier */
        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000306:	68cb      	ldr	r3, [r1, #12]
            (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000308:	888d      	ldrh	r5, [r1, #4]
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800030a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800030e:	00d3      	lsls	r3, r2, #3
 8000310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000314:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        /* Second 16-bit identifier and Second 16-bit mask */
        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
            (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000318:	880a      	ldrh	r2, [r1, #0]
        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 800031a:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800031e:	688d      	ldr	r5, [r1, #8]
        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
            (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
        /* 32-bit mask or Second 32-bit identifier */
        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000320:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8000324:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
            (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000328:	698a      	ldr	r2, [r1, #24]
 800032a:	4b20      	ldr	r3, [pc, #128]	; (80003ac <HAL_CAN_ConfigFilter+0xf4>)
 800032c:	bb8a      	cbnz	r2, 8000392 <HAL_CAN_ConfigFilter+0xda>
    {
        /*Id/Mask mode for the filter*/
        CAN1->FM1R &= ~(uint32_t)filternbrbitpos;
 800032e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000332:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
        /*Identifier list mode for the filter*/
        CAN1->FM1R |= (uint32_t)filternbrbitpos;
 8000334:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000338:	690a      	ldr	r2, [r1, #16]
 800033a:	bb72      	cbnz	r2, 800039a <HAL_CAN_ConfigFilter+0xe2>
    {
        /* FIFO 0 assignation for the filter */
        CAN1->FFA1R &= ~(uint32_t)filternbrbitpos;
 800033c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000340:	4014      	ands	r4, r2
 8000342:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
        /* FIFO 1 assignation for the filter */
        CAN1->FFA1R |= (uint32_t)filternbrbitpos;
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 8000346:	6a0b      	ldr	r3, [r1, #32]
 8000348:	2b01      	cmp	r3, #1
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <HAL_CAN_ConfigFilter+0xf4>)
    {
        CAN1->FA1R |= filternbrbitpos;
 800034c:	bf02      	ittt	eq
 800034e:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000352:	4310      	orreq	r0, r2
 8000354:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CAN1->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 8000358:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800035c:	f022 0201 	bic.w	r2, r2, #1
 8000360:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Return function status */
    return HAL_OK;
}
 8000364:	2000      	movs	r0, #0
 8000366:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000368:	2d01      	cmp	r5, #1
 800036a:	d1dd      	bne.n	8000328 <HAL_CAN_ConfigFilter+0x70>
        CAN1->FS1R |= filternbrbitpos;
 800036c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000370:	4305      	orrs	r5, r0
 8000372:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000376:	680b      	ldr	r3, [r1, #0]
            (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000378:	888d      	ldrh	r5, [r1, #4]
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800037a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800037e:	00d3      	lsls	r3, r2, #3
 8000380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000384:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
            (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000388:	898a      	ldrh	r2, [r1, #12]
        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 800038a:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
            ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800038e:	688d      	ldr	r5, [r1, #8]
 8000390:	e7c6      	b.n	8000320 <HAL_CAN_ConfigFilter+0x68>
        CAN1->FM1R |= (uint32_t)filternbrbitpos;
 8000392:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000396:	4302      	orrs	r2, r0
 8000398:	e7cc      	b.n	8000334 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 800039a:	2a01      	cmp	r2, #1
        CAN1->FFA1R |= (uint32_t)filternbrbitpos;
 800039c:	bf01      	itttt	eq
 800039e:	4a03      	ldreq	r2, [pc, #12]	; (80003ac <HAL_CAN_ConfigFilter+0xf4>)
 80003a0:	f8d2 3214 	ldreq.w	r3, [r2, #532]	; 0x214
 80003a4:	4303      	orreq	r3, r0
 80003a6:	f8c2 3214 	streq.w	r3, [r2, #532]	; 0x214
 80003aa:	e7cc      	b.n	8000346 <HAL_CAN_ConfigFilter+0x8e>
 80003ac:	40006400 	.word	0x40006400

080003b0 <HAL_CAN_Init>:
{
 80003b0:	b570      	push	{r4, r5, r6, lr}
    if (hcan == NULL)
 80003b2:	4604      	mov	r4, r0
 80003b4:	2800      	cmp	r0, #0
 80003b6:	f000 808f 	beq.w	80004d8 <HAL_CAN_Init+0x128>
    if (hcan->State == HAL_CAN_STATE_RESET)
 80003ba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80003be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80003c2:	b91b      	cbnz	r3, 80003cc <HAL_CAN_Init+0x1c>
        hcan->Lock = HAL_UNLOCKED;
 80003c4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
        HAL_CAN_MspInit(hcan);
 80003c8:	f003 f9e6 	bl	8003798 <HAL_CAN_MspInit>
    hcan->State = HAL_CAN_STATE_BUSY;
 80003cc:	2302      	movs	r3, #2
 80003ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80003d2:	6823      	ldr	r3, [r4, #0]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	f022 0202 	bic.w	r2, r2, #2
 80003da:	601a      	str	r2, [r3, #0]
    hcan->Instance->MCR |= CAN_MCR_INRQ ;
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	f042 0201 	orr.w	r2, r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80003e4:	f7ff ff62 	bl	80002ac <HAL_GetTick>
 80003e8:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80003ea:	6823      	ldr	r3, [r4, #0]
 80003ec:	685d      	ldr	r5, [r3, #4]
 80003ee:	f015 0501 	ands.w	r5, r5, #1
 80003f2:	d057      	beq.n	80004a4 <HAL_CAN_Init+0xf4>
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80003f4:	685a      	ldr	r2, [r3, #4]
 80003f6:	07d1      	lsls	r1, r2, #31
 80003f8:	d56b      	bpl.n	80004d2 <HAL_CAN_Init+0x122>
        if (hcan->Init.TTCM == ENABLE)
 80003fa:	69a2      	ldr	r2, [r4, #24]
 80003fc:	2a01      	cmp	r2, #1
            hcan->Instance->MCR |= CAN_MCR_TTCM;
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	bf0c      	ite	eq
 8000402:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
            hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000406:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800040a:	601a      	str	r2, [r3, #0]
        if (hcan->Init.ABOM == ENABLE)
 800040c:	69e2      	ldr	r2, [r4, #28]
 800040e:	2a01      	cmp	r2, #1
            hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	bf0c      	ite	eq
 8000414:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
            hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000418:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800041c:	601a      	str	r2, [r3, #0]
        if (hcan->Init.AWUM == ENABLE)
 800041e:	6a22      	ldr	r2, [r4, #32]
 8000420:	2a01      	cmp	r2, #1
            hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	bf0c      	ite	eq
 8000426:	f042 0220 	orreq.w	r2, r2, #32
            hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 800042a:	f022 0220 	bicne.w	r2, r2, #32
 800042e:	601a      	str	r2, [r3, #0]
        if (hcan->Init.NART == ENABLE)
 8000430:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000432:	2a01      	cmp	r2, #1
            hcan->Instance->MCR |= CAN_MCR_NART;
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	bf0c      	ite	eq
 8000438:	f042 0210 	orreq.w	r2, r2, #16
            hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 800043c:	f022 0210 	bicne.w	r2, r2, #16
 8000440:	601a      	str	r2, [r3, #0]
        if (hcan->Init.RFLM == ENABLE)
 8000442:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000444:	2a01      	cmp	r2, #1
            hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	bf0c      	ite	eq
 800044a:	f042 0208 	orreq.w	r2, r2, #8
            hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 800044e:	f022 0208 	bicne.w	r2, r2, #8
 8000452:	601a      	str	r2, [r3, #0]
        if (hcan->Init.TXFP == ENABLE)
 8000454:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000456:	2a01      	cmp	r2, #1
            hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	bf0c      	ite	eq
 800045c:	f042 0204 	orreq.w	r2, r2, #4
            hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000460:	f022 0204 	bicne.w	r2, r2, #4
 8000464:	601a      	str	r2, [r3, #0]
        hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000466:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800046a:	430a      	orrs	r2, r1
                              ((uint32_t)hcan->Init.SJW) | \
 800046c:	6921      	ldr	r1, [r4, #16]
 800046e:	430a      	orrs	r2, r1
                              ((uint32_t)hcan->Init.BS1) | \
 8000470:	6961      	ldr	r1, [r4, #20]
 8000472:	430a      	orrs	r2, r1
                              ((uint32_t)hcan->Init.Prescaler - 1U);
 8000474:	6861      	ldr	r1, [r4, #4]
 8000476:	3901      	subs	r1, #1
                              ((uint32_t)hcan->Init.BS2) | \
 8000478:	430a      	orrs	r2, r1
        hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800047a:	61da      	str	r2, [r3, #28]
        hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	f022 0201 	bic.w	r2, r2, #1
 8000482:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000484:	f7ff ff12 	bl	80002ac <HAL_GetTick>
 8000488:	4605      	mov	r5, r0
        while ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	07d2      	lsls	r2, r2, #31
 8000490:	d413      	bmi.n	80004ba <HAL_CAN_Init+0x10a>
        if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000492:	6858      	ldr	r0, [r3, #4]
 8000494:	f010 0001 	ands.w	r0, r0, #1
 8000498:	d11b      	bne.n	80004d2 <HAL_CAN_Init+0x122>
        hcan->State = HAL_CAN_STATE_READY;
 800049a:	2301      	movs	r3, #1
        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800049c:	63e0      	str	r0, [r4, #60]	; 0x3c
        hcan->State = HAL_CAN_STATE_READY;
 800049e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_OK;
 80004a2:	e009      	b.n	80004b8 <HAL_CAN_Init+0x108>
        if ((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 80004a4:	f7ff ff02 	bl	80002ac <HAL_GetTick>
 80004a8:	1b80      	subs	r0, r0, r6
 80004aa:	280a      	cmp	r0, #10
 80004ac:	d99d      	bls.n	80003ea <HAL_CAN_Init+0x3a>
            hcan->State = HAL_CAN_STATE_TIMEOUT;
 80004ae:	2003      	movs	r0, #3
 80004b0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
            __HAL_UNLOCK(hcan);
 80004b4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
}
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
            if ((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 80004ba:	f7ff fef7 	bl	80002ac <HAL_GetTick>
 80004be:	1b40      	subs	r0, r0, r5
 80004c0:	280a      	cmp	r0, #10
 80004c2:	d9e2      	bls.n	800048a <HAL_CAN_Init+0xda>
                hcan->State = HAL_CAN_STATE_TIMEOUT;
 80004c4:	2003      	movs	r0, #3
                __HAL_UNLOCK(hcan);
 80004c6:	2300      	movs	r3, #0
                hcan->State = HAL_CAN_STATE_TIMEOUT;
 80004c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
                __HAL_UNLOCK(hcan);
 80004cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
                return HAL_TIMEOUT;
 80004d0:	e7f2      	b.n	80004b8 <HAL_CAN_Init+0x108>
        hcan->State = HAL_CAN_STATE_ERROR;
 80004d2:	2304      	movs	r3, #4
 80004d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80004d8:	2001      	movs	r0, #1
 80004da:	e7ed      	b.n	80004b8 <HAL_CAN_Init+0x108>

080004dc <HAL_CAN_Transmit_IT>:
    /* Check the parameters */
    assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
    assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
    assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

    if (((hcan->Instance->TSR & CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80004dc:	6803      	ldr	r3, [r0, #0]
 80004de:	689a      	ldr	r2, [r3, #8]
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (((hcan->Instance->TSR & CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80004e2:	0155      	lsls	r5, r2, #5
 80004e4:	d405      	bmi.n	80004f2 <HAL_CAN_Transmit_IT+0x16>
            ((hcan->Instance->TSR & CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80004e6:	689a      	ldr	r2, [r3, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80004e8:	0114      	lsls	r4, r2, #4
 80004ea:	d402      	bmi.n	80004f2 <HAL_CAN_Transmit_IT+0x16>
            ((hcan->Instance->TSR & CAN_TSR_TME2) == CAN_TSR_TME2))
 80004ec:	689a      	ldr	r2, [r3, #8]
            ((hcan->Instance->TSR & CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80004ee:	00d1      	lsls	r1, r2, #3
 80004f0:	d56e      	bpl.n	80005d0 <HAL_CAN_Transmit_IT+0xf4>
    {
        /* Process Locked */
        __HAL_LOCK(hcan);
 80004f2:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 80004f6:	2a01      	cmp	r2, #1
 80004f8:	d06f      	beq.n	80005da <HAL_CAN_Transmit_IT+0xfe>
 80004fa:	2201      	movs	r2, #1
 80004fc:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

        /* Select one empty transmit mailbox */
        if ((hcan->Instance->TSR & CAN_TSR_TME0) == CAN_TSR_TME0)
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	0152      	lsls	r2, r2, #5
 8000504:	d45d      	bmi.n	80005c2 <HAL_CAN_Transmit_IT+0xe6>
        {
            transmitmailbox = 0U;
        }
        else if ((hcan->Instance->TSR & CAN_TSR_TME1) == CAN_TSR_TME1)
 8000506:	689a      	ldr	r2, [r3, #8]
        {
            transmitmailbox = 1U;
        }
        else
        {
            transmitmailbox = 2U;
 8000508:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 800050c:	bf14      	ite	ne
 800050e:	2201      	movne	r2, #1
 8000510:	2202      	moveq	r2, #2
        }

        /* Set up the Id */
        hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000512:	0117      	lsls	r7, r2, #4
 8000514:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000518:	f8d2 1180 	ldr.w	r1, [r2, #384]	; 0x180
 800051c:	f001 0101 	and.w	r1, r1, #1
 8000520:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180

        if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000524:	6b01      	ldr	r1, [r0, #48]	; 0x30
        {
            assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));
            hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8000526:	f8d2 6180 	ldr.w	r6, [r2, #384]	; 0x180
                    hcan->pTxMsg->RTR);
 800052a:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
        if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800052e:	2c00      	cmp	r4, #0
 8000530:	d149      	bne.n	80005c6 <HAL_CAN_Transmit_IT+0xea>
            hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8000532:	680c      	ldr	r4, [r1, #0]
 8000534:	ea45 5444 	orr.w	r4, r5, r4, lsl #21
        }
        else
        {
            assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
            hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8000538:	4334      	orrs	r4, r6
 800053a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
                    hcan->pTxMsg->RTR);
        }

        /* Set up the DLC */
        hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
        hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800053e:	f8d2 5184 	ldr.w	r5, [r2, #388]	; 0x184
        hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8000542:	690c      	ldr	r4, [r1, #16]
        hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8000544:	f025 050f 	bic.w	r5, r5, #15
        hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8000548:	f004 040f 	and.w	r4, r4, #15
 800054c:	610c      	str	r4, [r1, #16]
        hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800054e:	f8c2 5184 	str.w	r5, [r2, #388]	; 0x184
        hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000552:	f8d2 5184 	ldr.w	r5, [r2, #388]	; 0x184
 8000556:	432c      	orrs	r4, r5
 8000558:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
        /* Set up the data field */
        hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) |
 800055c:	441f      	add	r7, r3
                ((uint32_t)hcan->pTxMsg->Data[2U] << 16U) |
                ((uint32_t)hcan->pTxMsg->Data[1U] << 8U) |
 800055e:	694c      	ldr	r4, [r1, #20]
        hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) |
 8000560:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
                ((uint32_t)hcan->pTxMsg->Data[0U]));
        hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) |
                ((uint32_t)hcan->pTxMsg->Data[6U] << 16U) |
                ((uint32_t)hcan->pTxMsg->Data[5U] << 8U) |
 8000564:	6989      	ldr	r1, [r1, #24]
        hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) |
 8000566:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
                ((uint32_t)hcan->pTxMsg->Data[4U]));

        if (hcan->State == HAL_CAN_STATE_BUSY_RX)
 800056a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800056e:	2922      	cmp	r1, #34	; 0x22
        {
            /* Change CAN state */
            hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000570:	bf0c      	ite	eq
 8000572:	2132      	moveq	r1, #50	; 0x32
        }
        else
        {
            /* Change CAN state */
            hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000574:	2112      	movne	r1, #18
 8000576:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
        }

        /* Set CAN error code to none */
        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800057a:	2100      	movs	r1, #0
 800057c:	63c1      	str	r1, [r0, #60]	; 0x3c
        /* Process Unlocked */
        __HAL_UNLOCK(hcan);
 800057e:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
        /* Enable Error warning Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
 8000582:	6958      	ldr	r0, [r3, #20]
 8000584:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000588:	6158      	str	r0, [r3, #20]
        /* Enable Error passive Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EPV);
 800058a:	6958      	ldr	r0, [r3, #20]
 800058c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8000590:	6158      	str	r0, [r3, #20]
        /* Enable Bus-off Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_BOF);
 8000592:	6958      	ldr	r0, [r3, #20]
 8000594:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8000598:	6158      	str	r0, [r3, #20]
        /* Enable Last error code Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_LEC);
 800059a:	6958      	ldr	r0, [r3, #20]
 800059c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80005a0:	6158      	str	r0, [r3, #20]
        /* Enable Error Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERR);
 80005a2:	6958      	ldr	r0, [r3, #20]
 80005a4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80005a8:	6158      	str	r0, [r3, #20]
        /* Enable Transmit mailbox empty Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_TME);
 80005aa:	6958      	ldr	r0, [r3, #20]
 80005ac:	f040 0001 	orr.w	r0, r0, #1
 80005b0:	6158      	str	r0, [r3, #20]
        /* Request transmission */
        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 80005b2:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        hcan->State = HAL_CAN_STATE_ERROR;
        /* Return function status */
        return HAL_ERROR;
    }

    return HAL_OK;
 80005be:	4608      	mov	r0, r1
}
 80005c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            transmitmailbox = 0U;
 80005c2:	2200      	movs	r2, #0
 80005c4:	e7a5      	b.n	8000512 <HAL_CAN_Transmit_IT+0x36>
                    hcan->pTxMsg->IDE | \
 80005c6:	432c      	orrs	r4, r5
 80005c8:	684d      	ldr	r5, [r1, #4]
 80005ca:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 80005ce:	e7b3      	b.n	8000538 <HAL_CAN_Transmit_IT+0x5c>
        hcan->State = HAL_CAN_STATE_ERROR;
 80005d0:	2304      	movs	r3, #4
 80005d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        return HAL_ERROR;
 80005d6:	2001      	movs	r0, #1
 80005d8:	e7f2      	b.n	80005c0 <HAL_CAN_Transmit_IT+0xe4>
        __HAL_LOCK(hcan);
 80005da:	2002      	movs	r0, #2
 80005dc:	e7f0      	b.n	80005c0 <HAL_CAN_Transmit_IT+0xe4>

080005de <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80005de:	b510      	push	{r4, lr}
    uint32_t tmp = 0U;
    /* Check the parameters */
    assert_param(IS_CAN_FIFO(FIFONumber));
    tmp = hcan->State;
 80005e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

    if ((tmp == HAL_CAN_STATE_READY) || (tmp == HAL_CAN_STATE_BUSY_TX))
 80005e4:	2b01      	cmp	r3, #1
    tmp = hcan->State;
 80005e6:	b2da      	uxtb	r2, r3
    if ((tmp == HAL_CAN_STATE_READY) || (tmp == HAL_CAN_STATE_BUSY_TX))
 80005e8:	d001      	beq.n	80005ee <HAL_CAN_Receive_IT+0x10>
 80005ea:	2a12      	cmp	r2, #18
 80005ec:	d134      	bne.n	8000658 <HAL_CAN_Receive_IT+0x7a>
    {
        /* Process locked */
        __HAL_LOCK(hcan);
 80005ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d030      	beq.n	8000658 <HAL_CAN_Receive_IT+0x7a>
 80005f6:	2301      	movs	r3, #1
 80005f8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

        if (hcan->State == HAL_CAN_STATE_BUSY_TX)
 80005fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000600:	2b12      	cmp	r3, #18
        {
            /* Change CAN state */
            hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000602:	bf0c      	ite	eq
 8000604:	2332      	moveq	r3, #50	; 0x32
        }
        else
        {
            /* Change CAN state */
            hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000606:	2322      	movne	r3, #34	; 0x22
 8000608:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        }

        /* Set CAN error code to none */
        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800060c:	2200      	movs	r2, #0
        /* Enable Error warning Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
 800060e:	6803      	ldr	r3, [r0, #0]
        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000610:	63c2      	str	r2, [r0, #60]	; 0x3c
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
 8000612:	695c      	ldr	r4, [r3, #20]
 8000614:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000618:	615c      	str	r4, [r3, #20]
        /* Enable Error passive Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EPV);
 800061a:	695c      	ldr	r4, [r3, #20]
 800061c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8000620:	615c      	str	r4, [r3, #20]
        /* Enable Bus-off Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_BOF);
 8000622:	695c      	ldr	r4, [r3, #20]
 8000624:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8000628:	615c      	str	r4, [r3, #20]
        /* Enable Last error code Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_LEC);
 800062a:	695c      	ldr	r4, [r3, #20]
 800062c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000630:	615c      	str	r4, [r3, #20]
        /* Enable Error Interrupt */
        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERR);
 8000632:	695c      	ldr	r4, [r3, #20]
 8000634:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000638:	615c      	str	r4, [r3, #20]
        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 800063a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

        if (FIFONumber == CAN_FIFO0)
 800063e:	b929      	cbnz	r1, 800064c <HAL_CAN_Receive_IT+0x6e>
        {
            /* Enable FIFO 0 message pending Interrupt */
            __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	f042 0202 	orr.w	r2, r2, #2
 8000646:	615a      	str	r2, [r3, #20]
        return HAL_BUSY;
    }

    /* Return function status */
    return HAL_OK;
}
 8000648:	4608      	mov	r0, r1
 800064a:	bd10      	pop	{r4, pc}
            __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 800064c:	6959      	ldr	r1, [r3, #20]
 800064e:	f041 0110 	orr.w	r1, r1, #16
 8000652:	6159      	str	r1, [r3, #20]
    return HAL_OK;
 8000654:	4611      	mov	r1, r2
 8000656:	e7f7      	b.n	8000648 <HAL_CAN_Receive_IT+0x6a>
        return HAL_BUSY;
 8000658:	2102      	movs	r1, #2
 800065a:	e7f5      	b.n	8000648 <HAL_CAN_Receive_IT+0x6a>

0800065c <HAL_CAN_TxCpltCallback>:
 800065c:	4770      	bx	lr

0800065e <CAN_Receive_IT.isra.0>:
  *         the configuration information for the specified CAN.
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
 800065e:	b538      	push	{r3, r4, r5, lr}
{
    /* Get the Id */
    hcan->pRxMsg->IDE = (uint8_t)0x04U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000660:	6803      	ldr	r3, [r0, #0]
 8000662:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000664:	eb03 1401 	add.w	r4, r3, r1, lsl #4
 8000668:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800066c:	f005 0504 	and.w	r5, r5, #4
 8000670:	6095      	str	r5, [r2, #8]

    if (hcan->pRxMsg->IDE == CAN_ID_STD)
 8000672:	2d00      	cmp	r5, #0
 8000674:	d15c      	bne.n	8000730 <CAN_Receive_IT.isra.0+0xd2>
    {
        hcan->pRxMsg->StdId = (uint32_t)0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8000676:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800067a:	0d6d      	lsrs	r5, r5, #21
 800067c:	6015      	str	r5, [r2, #0]
    else
    {
        hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
    }

    hcan->pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800067e:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000682:	f005 0502 	and.w	r5, r5, #2
 8000686:	60d5      	str	r5, [r2, #12]
    /* Get the DLC */
    hcan->pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000688:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    /* Get the FMI */
    hcan->pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 800068c:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 8000690:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000694:	61d4      	str	r4, [r2, #28]
    /* Get the data field */
    hcan->pRxMsg->Data[0U] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000696:	eb03 1401 	add.w	r4, r3, r1, lsl #4
    hcan->pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 800069a:	f005 050f 	and.w	r5, r5, #15
 800069e:	6115      	str	r5, [r2, #16]
    hcan->pRxMsg->Data[0U] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80006a0:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 80006a4:	7515      	strb	r5, [r2, #20]
    hcan->pRxMsg->Data[1U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 80006a6:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 80006aa:	0a2d      	lsrs	r5, r5, #8
 80006ac:	7555      	strb	r5, [r2, #21]
    hcan->pRxMsg->Data[2U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 80006ae:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 80006b2:	0c2d      	lsrs	r5, r5, #16
 80006b4:	7595      	strb	r5, [r2, #22]
    hcan->pRxMsg->Data[3U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 80006b6:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 80006ba:	0e2d      	lsrs	r5, r5, #24
 80006bc:	75d5      	strb	r5, [r2, #23]
    hcan->pRxMsg->Data[4U] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 80006be:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 80006c2:	7615      	strb	r5, [r2, #24]
    hcan->pRxMsg->Data[5U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 80006c4:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 80006c8:	0a2d      	lsrs	r5, r5, #8
 80006ca:	7655      	strb	r5, [r2, #25]
    hcan->pRxMsg->Data[6U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 80006cc:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 80006d0:	0c2d      	lsrs	r5, r5, #16
 80006d2:	7695      	strb	r5, [r2, #26]
    hcan->pRxMsg->Data[7U] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 80006d4:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80006d8:	0e24      	lsrs	r4, r4, #24
 80006da:	76d4      	strb	r4, [r2, #27]

    /* Release the FIFO */
    /* Release FIFO0 */
    if (FIFONumber == CAN_FIFO0)
 80006dc:	2220      	movs	r2, #32
 80006de:	bb61      	cbnz	r1, 800073a <CAN_Receive_IT.isra.0+0xdc>
    {
        __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80006e0:	60da      	str	r2, [r3, #12]
        /* Disable FIFO 0 message pending Interrupt */
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	f022 0202 	bic.w	r2, r2, #2
    /* Release FIFO1 */
    else /* FIFONumber == CAN_FIFO1 */
    {
        __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
        /* Disable FIFO 1 message pending Interrupt */
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 80006e8:	615a      	str	r2, [r3, #20]
    }

    if (hcan->State == HAL_CAN_STATE_BUSY_RX)
 80006ea:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80006ee:	2a22      	cmp	r2, #34	; 0x22
 80006f0:	d113      	bne.n	800071a <CAN_Receive_IT.isra.0+0xbc>
    {
        /* Disable Error warning Interrupt */
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
 80006f2:	695a      	ldr	r2, [r3, #20]
 80006f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006f8:	615a      	str	r2, [r3, #20]
        /* Disable Error passive Interrupt */
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
 80006fa:	695a      	ldr	r2, [r3, #20]
 80006fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000700:	615a      	str	r2, [r3, #20]
        /* Disable Bus-off Interrupt */
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000708:	615a      	str	r2, [r3, #20]
        /* Disable Last error code Interrupt */
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000710:	615a      	str	r2, [r3, #20]
        /* Disable Error Interrupt */
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000718:	615a      	str	r2, [r3, #20]
    }

    if (hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 800071a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800071e:	2b32      	cmp	r3, #50	; 0x32
    {
        /* Disable CAN state */
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000720:	bf0c      	ite	eq
 8000722:	2312      	moveq	r3, #18
    }
    else
    {
        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_READY;
 8000724:	2301      	movne	r3, #1
 8000726:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    }

    /* Receive complete callback */
    HAL_CAN_RxCpltCallback(hcan);
 800072a:	f002 fe35 	bl	8003398 <HAL_CAN_RxCpltCallback>
    /* Return function status */
    return HAL_OK;
}
 800072e:	bd38      	pop	{r3, r4, r5, pc}
        hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 8000730:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000734:	08ed      	lsrs	r5, r5, #3
 8000736:	6055      	str	r5, [r2, #4]
 8000738:	e7a1      	b.n	800067e <CAN_Receive_IT.isra.0+0x20>
        __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800073a:	611a      	str	r2, [r3, #16]
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	f022 0210 	bic.w	r2, r2, #16
 8000742:	e7d1      	b.n	80006e8 <CAN_Receive_IT.isra.0+0x8a>

08000744 <HAL_CAN_ErrorCallback>:
 8000744:	4770      	bx	lr
	...

08000748 <HAL_CAN_IRQHandler>:
    if (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000748:	6803      	ldr	r3, [r0, #0]
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	07d1      	lsls	r1, r2, #31
{
 800074e:	b570      	push	{r4, r5, r6, lr}
 8000750:	4604      	mov	r4, r0
    if (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000752:	d534      	bpl.n	80007be <HAL_CAN_IRQHandler+0x76>
        tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 8000754:	689e      	ldr	r6, [r3, #8]
        if (tmp1 || tmp2 || tmp3)
 8000756:	4d5a      	ldr	r5, [pc, #360]	; (80008c0 <HAL_CAN_IRQHandler+0x178>)
        tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	495a      	ldr	r1, [pc, #360]	; (80008c4 <HAL_CAN_IRQHandler+0x17c>)
        tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 800075c:	6898      	ldr	r0, [r3, #8]
        if (tmp1 || tmp2 || tmp3)
 800075e:	43b5      	bics	r5, r6
        tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8000760:	ea02 0201 	and.w	r2, r2, r1
        if (tmp1 || tmp2 || tmp3)
 8000764:	d004      	beq.n	8000770 <HAL_CAN_IRQHandler+0x28>
 8000766:	428a      	cmp	r2, r1
 8000768:	d002      	beq.n	8000770 <HAL_CAN_IRQHandler+0x28>
 800076a:	4a57      	ldr	r2, [pc, #348]	; (80008c8 <HAL_CAN_IRQHandler+0x180>)
 800076c:	4382      	bics	r2, r0
 800076e:	d126      	bne.n	80007be <HAL_CAN_IRQHandler+0x76>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	f022 0201 	bic.w	r2, r2, #1
 8000776:	615a      	str	r2, [r3, #20]
    if (hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000778:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800077c:	2a12      	cmp	r2, #18
 800077e:	d113      	bne.n	80007a8 <HAL_CAN_IRQHandler+0x60>
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000786:	615a      	str	r2, [r3, #20]
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800078e:	615a      	str	r2, [r3, #20]
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000796:	615a      	str	r2, [r3, #20]
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800079e:	615a      	str	r2, [r3, #20]
        __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007a6:	615a      	str	r2, [r3, #20]
    if (hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 80007a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80007ac:	2b32      	cmp	r3, #50	; 0x32
        hcan->State = HAL_CAN_STATE_BUSY_RX;
 80007ae:	bf0c      	ite	eq
 80007b0:	2322      	moveq	r3, #34	; 0x22
        hcan->State = HAL_CAN_STATE_READY;
 80007b2:	2301      	movne	r3, #1
 80007b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_CAN_TxCpltCallback(hcan);
 80007b8:	4620      	mov	r0, r4
 80007ba:	f7ff ff4f 	bl	800065c <HAL_CAN_TxCpltCallback>
    tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
    tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 80007c2:	695b      	ldr	r3, [r3, #20]
    if ((tmp1 != 0U) && tmp2)
 80007c4:	0792      	lsls	r2, r2, #30
 80007c6:	d005      	beq.n	80007d4 <HAL_CAN_IRQHandler+0x8c>
 80007c8:	079b      	lsls	r3, r3, #30
 80007ca:	d503      	bpl.n	80007d4 <HAL_CAN_IRQHandler+0x8c>
        CAN_Receive_IT(hcan, CAN_FIFO0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	4620      	mov	r0, r4
 80007d0:	f7ff ff45 	bl	800065e <CAN_Receive_IT.isra.0>
    tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	691a      	ldr	r2, [r3, #16]
    tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 80007d8:	695b      	ldr	r3, [r3, #20]
    if ((tmp1 != 0U) && tmp2)
 80007da:	0796      	lsls	r6, r2, #30
 80007dc:	d005      	beq.n	80007ea <HAL_CAN_IRQHandler+0xa2>
 80007de:	06dd      	lsls	r5, r3, #27
 80007e0:	d503      	bpl.n	80007ea <HAL_CAN_IRQHandler+0xa2>
        CAN_Receive_IT(hcan, CAN_FIFO1);
 80007e2:	2101      	movs	r1, #1
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff ff3a 	bl	800065e <CAN_Receive_IT.isra.0>
    tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	6998      	ldr	r0, [r3, #24]
    tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 80007ee:	6959      	ldr	r1, [r3, #20]
    tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 80007f0:	695a      	ldr	r2, [r3, #20]
    if (tmp1 && tmp2 && tmp3)
 80007f2:	07c0      	lsls	r0, r0, #31
 80007f4:	d507      	bpl.n	8000806 <HAL_CAN_IRQHandler+0xbe>
 80007f6:	05ce      	lsls	r6, r1, #23
 80007f8:	d505      	bpl.n	8000806 <HAL_CAN_IRQHandler+0xbe>
 80007fa:	0415      	lsls	r5, r2, #16
        hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 80007fc:	bf42      	ittt	mi
 80007fe:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000800:	f042 0201 	orrmi.w	r2, r2, #1
 8000804:	63e2      	strmi	r2, [r4, #60]	; 0x3c
    tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 8000806:	6998      	ldr	r0, [r3, #24]
    tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 8000808:	6959      	ldr	r1, [r3, #20]
    tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 800080a:	695a      	ldr	r2, [r3, #20]
    if (tmp1 && tmp2 && tmp3)
 800080c:	0780      	lsls	r0, r0, #30
 800080e:	d507      	bpl.n	8000820 <HAL_CAN_IRQHandler+0xd8>
 8000810:	0589      	lsls	r1, r1, #22
 8000812:	d505      	bpl.n	8000820 <HAL_CAN_IRQHandler+0xd8>
 8000814:	0412      	lsls	r2, r2, #16
        hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000816:	bf42      	ittt	mi
 8000818:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800081a:	f042 0202 	orrmi.w	r2, r2, #2
 800081e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
    tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 8000820:	6998      	ldr	r0, [r3, #24]
    tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 8000822:	6959      	ldr	r1, [r3, #20]
    tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000824:	695a      	ldr	r2, [r3, #20]
    if (tmp1 && tmp2 && tmp3)
 8000826:	0746      	lsls	r6, r0, #29
 8000828:	d507      	bpl.n	800083a <HAL_CAN_IRQHandler+0xf2>
 800082a:	054d      	lsls	r5, r1, #21
 800082c:	d505      	bpl.n	800083a <HAL_CAN_IRQHandler+0xf2>
 800082e:	0410      	lsls	r0, r2, #16
        hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000830:	bf42      	ittt	mi
 8000832:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000834:	f042 0204 	orrmi.w	r2, r2, #4
 8000838:	63e2      	strmi	r2, [r4, #60]	; 0x3c
    tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 800083a:	6998      	ldr	r0, [r3, #24]
    tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 800083c:	6959      	ldr	r1, [r3, #20]
    tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 800083e:	695a      	ldr	r2, [r3, #20]
    if ((!tmp1) && tmp2 && tmp3)
 8000840:	f010 0f70 	tst.w	r0, #112	; 0x70
 8000844:	d013      	beq.n	800086e <HAL_CAN_IRQHandler+0x126>
 8000846:	0509      	lsls	r1, r1, #20
 8000848:	d511      	bpl.n	800086e <HAL_CAN_IRQHandler+0x126>
 800084a:	0412      	lsls	r2, r2, #16
 800084c:	d50f      	bpl.n	800086e <HAL_CAN_IRQHandler+0x126>
        tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
 800084e:	699a      	ldr	r2, [r3, #24]
 8000850:	f002 0270 	and.w	r2, r2, #112	; 0x70
        switch (tmp1)
 8000854:	2a40      	cmp	r2, #64	; 0x40
 8000856:	d02a      	beq.n	80008ae <HAL_CAN_IRQHandler+0x166>
 8000858:	d814      	bhi.n	8000884 <HAL_CAN_IRQHandler+0x13c>
 800085a:	2a20      	cmp	r2, #32
 800085c:	d01f      	beq.n	800089e <HAL_CAN_IRQHandler+0x156>
 800085e:	2a30      	cmp	r2, #48	; 0x30
 8000860:	d021      	beq.n	80008a6 <HAL_CAN_IRQHandler+0x15e>
 8000862:	2a10      	cmp	r2, #16
 8000864:	d016      	beq.n	8000894 <HAL_CAN_IRQHandler+0x14c>
        hcan->Instance->ESR &= ~(CAN_ESR_LEC);
 8000866:	699a      	ldr	r2, [r3, #24]
 8000868:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800086c:	619a      	str	r2, [r3, #24]
    if (hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 800086e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000870:	b13a      	cbz	r2, 8000882 <HAL_CAN_IRQHandler+0x13a>
        hcan->Instance->MSR = CAN_MSR_ERRI;
 8000872:	2204      	movs	r2, #4
 8000874:	605a      	str	r2, [r3, #4]
        hcan->State = HAL_CAN_STATE_READY;
 8000876:	2301      	movs	r3, #1
 8000878:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        HAL_CAN_ErrorCallback(hcan);
 800087c:	4620      	mov	r0, r4
 800087e:	f7ff ff61 	bl	8000744 <HAL_CAN_ErrorCallback>
}
 8000882:	bd70      	pop	{r4, r5, r6, pc}
        switch (tmp1)
 8000884:	2a50      	cmp	r2, #80	; 0x50
 8000886:	d016      	beq.n	80008b6 <HAL_CAN_IRQHandler+0x16e>
 8000888:	2a60      	cmp	r2, #96	; 0x60
 800088a:	d1ec      	bne.n	8000866 <HAL_CAN_IRQHandler+0x11e>
                hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 800088c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800088e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000892:	e002      	b.n	800089a <HAL_CAN_IRQHandler+0x152>
                hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000894:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000896:	f042 0208 	orr.w	r2, r2, #8
                hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 800089a:	63e2      	str	r2, [r4, #60]	; 0x3c
                break;
 800089c:	e7e3      	b.n	8000866 <HAL_CAN_IRQHandler+0x11e>
                hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 800089e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008a0:	f042 0210 	orr.w	r2, r2, #16
 80008a4:	e7f9      	b.n	800089a <HAL_CAN_IRQHandler+0x152>
                hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80008a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008a8:	f042 0220 	orr.w	r2, r2, #32
 80008ac:	e7f5      	b.n	800089a <HAL_CAN_IRQHandler+0x152>
                hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80008ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008b4:	e7f1      	b.n	800089a <HAL_CAN_IRQHandler+0x152>
                hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80008b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008bc:	e7ed      	b.n	800089a <HAL_CAN_IRQHandler+0x152>
 80008be:	bf00      	nop
 80008c0:	04000003 	.word	0x04000003
 80008c4:	08000300 	.word	0x08000300
 80008c8:	10030000 	.word	0x10030000

080008cc <HAL_NVIC_SetPriorityGrouping>:
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    uint32_t reg_value;
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
    reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008ce:	68ca      	ldr	r2, [r1, #12]
    reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    reg_value  =  (reg_value                                   |
                   ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                   (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008d4:	0203      	lsls	r3, r0, #8
    reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	0412      	lsls	r2, r2, #16
                   (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008dc:	0c12      	lsrs	r2, r2, #16
                   ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008de:	4313      	orrs	r3, r2
    reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    SCB->AIRCR =  reg_value;
 80008e8:	60cb      	str	r3, [r1, #12]
{
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
    return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f2:	b530      	push	{r4, r5, lr}
 80008f4:	68dc      	ldr	r4, [r3, #12]
 80008f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
    uint32_t PreemptPriorityBits;
    uint32_t SubPriorityBits;
    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fa:	f1c4 0507 	rsb	r5, r4, #7
    SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	1d23      	adds	r3, r4, #4
    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	2d04      	cmp	r5, #4
 8000902:	bf28      	it	cs
 8000904:	2504      	movcs	r5, #4
    SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	2b06      	cmp	r3, #6
    return (
               ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
    SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090c:	bf8c      	ite	hi
 800090e:	3c03      	subhi	r4, #3
 8000910:	2400      	movls	r4, #0
               ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000912:	fa03 f505 	lsl.w	r5, r3, r5
 8000916:	ea21 0105 	bic.w	r1, r1, r5
               ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091a:	40a3      	lsls	r3, r4
 800091c:	ea22 0203 	bic.w	r2, r2, r3
               ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	40a1      	lsls	r1, r4
    if ((int32_t)(IRQn) < 0)
 8000922:	2800      	cmp	r0, #0
               ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	ea41 0302 	orr.w	r3, r1, r2
        NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	bfac      	ite	ge
 800092a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
        SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	4a08      	ldrlt	r2, [pc, #32]	; (8000950 <HAL_NVIC_SetPriority+0x60>)
 8000930:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000934:	bfb8      	it	lt
 8000936:	f000 000f 	andlt.w	r0, r0, #15
 800093a:	b2db      	uxtb	r3, r3
        NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	bfaa      	itet	ge
 800093e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
        SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	5413      	strblt	r3, [r2, r0]
        NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
    prioritygroup = NVIC_GetPriorityGrouping();
    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000948:	bd30      	pop	{r4, r5, pc}
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00
 8000950:	e000ed14 	.word	0xe000ed14

08000954 <HAL_NVIC_EnableIRQ>:
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000954:	0942      	lsrs	r2, r0, #5
 8000956:	2301      	movs	r3, #1
 8000958:	f000 001f 	and.w	r0, r0, #31
 800095c:	fa03 f000 	lsl.w	r0, r3, r0
 8000960:	4b01      	ldr	r3, [pc, #4]	; (8000968 <HAL_NVIC_EnableIRQ+0x14>)
 8000962:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
{
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
}
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100

0800096c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	3801      	subs	r0, #1
 800096e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000972:	d20b      	bcs.n	800098c <HAL_SYSTICK_Config+0x20>
    {
        return (1UL);                                                   /* Reload value impossible */
    }

    SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000974:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
        SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	4a05      	ldr	r2, [pc, #20]	; (8000990 <HAL_SYSTICK_Config+0x24>)
    SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	6158      	str	r0, [r3, #20]
        SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	21f0      	movs	r1, #240	; 0xf0
 800097e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000982:	2000      	movs	r0, #0
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000984:	2207      	movs	r2, #7
    SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000986:	6198      	str	r0, [r3, #24]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000988:	611a      	str	r2, [r3, #16]
                     SysTick_CTRL_TICKINT_Msk   |
                     SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
    return (0UL);                                                     /* Function successful */
 800098a:	4770      	bx	lr
        return (1UL);                                                   /* Reload value impossible */
 800098c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
    return SysTick_Config(TicksNumb);
}
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <HAL_SYSTICK_CLKSourceConfig>:
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
    /* Check the parameters */
    assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));

    if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000994:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000998:	2804      	cmp	r0, #4
    {
        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	bf0c      	ite	eq
 800099e:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009a2:	f022 0204 	bicne.w	r2, r2, #4
 80009a6:	611a      	str	r2, [r3, #16]
    }
}
 80009a8:	4770      	bx	lr
	...

080009ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef*  GPIOx, GPIO_InitTypeDef* GPIO_Init)
{
 80009ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                temp = SYSCFG->EXTICR[position >> 2U];
                temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
                SYSCFG->EXTICR[position >> 2U] = temp;
                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 80009b0:	4a71      	ldr	r2, [pc, #452]	; (8000b78 <HAL_GPIO_Init+0x1cc>)
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8000b80 <HAL_GPIO_Init+0x1d4>
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b6:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8000b84 <HAL_GPIO_Init+0x1d8>
{
 80009ba:	b085      	sub	sp, #20
    for (position = 0U; position < GPIO_NUMBER; position++)
 80009bc:	2300      	movs	r3, #0
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009be:	680c      	ldr	r4, [r1, #0]
        ioposition = ((uint32_t)0x01U) << position;
 80009c0:	2701      	movs	r7, #1
 80009c2:	409f      	lsls	r7, r3
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009c4:	ea07 0504 	and.w	r5, r7, r4
        if (iocurrent == ioposition)
 80009c8:	ea37 0404 	bics.w	r4, r7, r4
 80009cc:	f040 80bd 	bne.w	8000b4a <HAL_GPIO_Init+0x19e>
            if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d0:	684c      	ldr	r4, [r1, #4]
 80009d2:	f024 0a10 	bic.w	sl, r4, #16
 80009d6:	f1ba 0f02 	cmp.w	sl, #2
 80009da:	d116      	bne.n	8000a0a <HAL_GPIO_Init+0x5e>
                temp = GPIOx->AFR[position >> 3U];
 80009dc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80009e0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
                temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80009e4:	f003 0b07 	and.w	fp, r3, #7
                temp = GPIOx->AFR[position >> 3U];
 80009e8:	f8de 6020 	ldr.w	r6, [lr, #32]
                temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80009ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009f0:	f04f 0c0f 	mov.w	ip, #15
 80009f4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009f8:	ea26 0c0c 	bic.w	ip, r6, ip
                temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80009fc:	690e      	ldr	r6, [r1, #16]
 80009fe:	fa06 f60b 	lsl.w	r6, r6, fp
 8000a02:	ea46 060c 	orr.w	r6, r6, ip
                GPIOx->AFR[position >> 3U] = temp;
 8000a06:	f8ce 6020 	str.w	r6, [lr, #32]
            temp = GPIOx->MODER;
 8000a0a:	f8d0 b000 	ldr.w	fp, [r0]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000a12:	f04f 0c03 	mov.w	ip, #3
 8000a16:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000a1a:	ea6f 060c 	mvn.w	r6, ip
 8000a1e:	ea2b 0b0c 	bic.w	fp, fp, ip
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a22:	f004 0c03 	and.w	ip, r4, #3
 8000a26:	fa0c fc0e 	lsl.w	ip, ip, lr
            if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a2e:	ea4c 0c0b 	orr.w	ip, ip, fp
            if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a32:	f1ba 0f01 	cmp.w	sl, #1
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a36:	9601      	str	r6, [sp, #4]
            GPIOx->MODER = temp;
 8000a38:	f8c0 c000 	str.w	ip, [r0]
            if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a3c:	d815      	bhi.n	8000a6a <HAL_GPIO_Init+0xbe>
                temp = GPIOx->OSPEEDR;
 8000a3e:	f8d0 c008 	ldr.w	ip, [r0, #8]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a42:	ea06 0c0c 	and.w	ip, r6, ip
                temp |= (GPIO_Init->Speed << (position * 2U));
 8000a46:	68ce      	ldr	r6, [r1, #12]
 8000a48:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000a4c:	ea4a 0c0c 	orr.w	ip, sl, ip
                GPIOx->OSPEEDR = temp;
 8000a50:	f8c0 c008 	str.w	ip, [r0, #8]
                temp = GPIOx->OTYPER;
 8000a54:	f8d0 c004 	ldr.w	ip, [r0, #4]
                temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a58:	ea2c 0707 	bic.w	r7, ip, r7
                temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a5c:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000a60:	fa0c fc03 	lsl.w	ip, ip, r3
 8000a64:	ea4c 0707 	orr.w	r7, ip, r7
                GPIOx->OTYPER = temp;
 8000a68:	6047      	str	r7, [r0, #4]
            temp = GPIOx->PUPDR;
 8000a6a:	68c7      	ldr	r7, [r0, #12]
            temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a6c:	9e01      	ldr	r6, [sp, #4]
 8000a6e:	4037      	ands	r7, r6
            temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a70:	688e      	ldr	r6, [r1, #8]
 8000a72:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a76:	433e      	orrs	r6, r7
            GPIOx->PUPDR = temp;
 8000a78:	60c6      	str	r6, [r0, #12]
            if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7a:	00e6      	lsls	r6, r4, #3
 8000a7c:	d565      	bpl.n	8000b4a <HAL_GPIO_Init+0x19e>
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	f04f 0b00 	mov.w	fp, #0
 8000a82:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a86:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a8a:	4e3c      	ldr	r6, [pc, #240]	; (8000b7c <HAL_GPIO_Init+0x1d0>)
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a90:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a94:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a98:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a9c:	9703      	str	r7, [sp, #12]
 8000a9e:	9f03      	ldr	r7, [sp, #12]
                temp = SYSCFG->EXTICR[position >> 2U];
 8000aa0:	f023 0703 	bic.w	r7, r3, #3
 8000aa4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000aa8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
                temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000aac:	f003 0e03 	and.w	lr, r3, #3
                temp = SYSCFG->EXTICR[position >> 2U];
 8000ab0:	f8d7 a008 	ldr.w	sl, [r7, #8]
                temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ab4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ab8:	f04f 0c0f 	mov.w	ip, #15
 8000abc:	fa0c fc0e 	lsl.w	ip, ip, lr
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac0:	42b0      	cmp	r0, r6
                temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ac2:	ea2a 0c0c 	bic.w	ip, sl, ip
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac6:	d047      	beq.n	8000b58 <HAL_GPIO_Init+0x1ac>
 8000ac8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000acc:	42b0      	cmp	r0, r6
 8000ace:	d045      	beq.n	8000b5c <HAL_GPIO_Init+0x1b0>
 8000ad0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ad4:	42b0      	cmp	r0, r6
 8000ad6:	d043      	beq.n	8000b60 <HAL_GPIO_Init+0x1b4>
 8000ad8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000adc:	42b0      	cmp	r0, r6
 8000ade:	d041      	beq.n	8000b64 <HAL_GPIO_Init+0x1b8>
 8000ae0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ae4:	42b0      	cmp	r0, r6
 8000ae6:	d03f      	beq.n	8000b68 <HAL_GPIO_Init+0x1bc>
 8000ae8:	4548      	cmp	r0, r9
 8000aea:	d03f      	beq.n	8000b6c <HAL_GPIO_Init+0x1c0>
 8000aec:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000af0:	42b0      	cmp	r0, r6
 8000af2:	d03d      	beq.n	8000b70 <HAL_GPIO_Init+0x1c4>
 8000af4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000af8:	42b0      	cmp	r0, r6
 8000afa:	d03b      	beq.n	8000b74 <HAL_GPIO_Init+0x1c8>
 8000afc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b00:	42b0      	cmp	r0, r6
 8000b02:	bf0c      	ite	eq
 8000b04:	2608      	moveq	r6, #8
 8000b06:	2609      	movne	r6, #9
 8000b08:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b0c:	ea46 060c 	orr.w	r6, r6, ip
                SYSCFG->EXTICR[position >> 2U] = temp;
 8000b10:	60be      	str	r6, [r7, #8]
                temp = EXTI->IMR;
 8000b12:	6816      	ldr	r6, [r2, #0]
                temp &= ~((uint32_t)iocurrent);
 8000b14:	43ef      	mvns	r7, r5

                if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b16:	f414 3f80 	tst.w	r4, #65536	; 0x10000
                temp &= ~((uint32_t)iocurrent);
 8000b1a:	bf0c      	ite	eq
 8000b1c:	403e      	andeq	r6, r7
                {
                    temp |= iocurrent;
 8000b1e:	432e      	orrne	r6, r5
                }

                EXTI->IMR = temp;
 8000b20:	6016      	str	r6, [r2, #0]
                temp = EXTI->EMR;
 8000b22:	6856      	ldr	r6, [r2, #4]
                temp &= ~((uint32_t)iocurrent);

                if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b24:	f414 3f00 	tst.w	r4, #131072	; 0x20000
                temp &= ~((uint32_t)iocurrent);
 8000b28:	bf0c      	ite	eq
 8000b2a:	403e      	andeq	r6, r7
                {
                    temp |= iocurrent;
 8000b2c:	432e      	orrne	r6, r5
                }

                EXTI->EMR = temp;
 8000b2e:	6056      	str	r6, [r2, #4]
                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 8000b30:	6896      	ldr	r6, [r2, #8]
                temp &= ~((uint32_t)iocurrent);

                if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b32:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
                temp &= ~((uint32_t)iocurrent);
 8000b36:	bf0c      	ite	eq
 8000b38:	403e      	andeq	r6, r7
                {
                    temp |= iocurrent;
 8000b3a:	432e      	orrne	r6, r5
                }

                EXTI->RTSR = temp;
 8000b3c:	6096      	str	r6, [r2, #8]
                temp = EXTI->FTSR;
 8000b3e:	68d6      	ldr	r6, [r2, #12]
                temp &= ~((uint32_t)iocurrent);

                if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b40:	02a4      	lsls	r4, r4, #10
                temp &= ~((uint32_t)iocurrent);
 8000b42:	bf54      	ite	pl
 8000b44:	403e      	andpl	r6, r7
                {
                    temp |= iocurrent;
 8000b46:	432e      	orrmi	r6, r5
                }

                EXTI->FTSR = temp;
 8000b48:	60d6      	str	r6, [r2, #12]
    for (position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	2b10      	cmp	r3, #16
 8000b4e:	f47f af36 	bne.w	80009be <HAL_GPIO_Init+0x12>
            }
        }
    }
}
 8000b52:	b005      	add	sp, #20
 8000b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b58:	465e      	mov	r6, fp
 8000b5a:	e7d5      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b5c:	2601      	movs	r6, #1
 8000b5e:	e7d3      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b60:	2602      	movs	r6, #2
 8000b62:	e7d1      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b64:	2603      	movs	r6, #3
 8000b66:	e7cf      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b68:	2604      	movs	r6, #4
 8000b6a:	e7cd      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b6c:	2605      	movs	r6, #5
 8000b6e:	e7cb      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b70:	2606      	movs	r6, #6
 8000b72:	e7c9      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b74:	2607      	movs	r6, #7
 8000b76:	e7c7      	b.n	8000b08 <HAL_GPIO_Init+0x15c>
 8000b78:	40013c00 	.word	0x40013c00
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40021400 	.word	0x40021400

08000b88 <HAL_GPIO_ReadPin>:
{
    GPIO_PinState bitstatus;
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b88:	6903      	ldr	r3, [r0, #16]
 8000b8a:	4219      	tst	r1, r3
    {
        bitstatus = GPIO_PIN_RESET;
    }

    return bitstatus;
}
 8000b8c:	bf14      	ite	ne
 8000b8e:	2001      	movne	r0, #1
 8000b90:	2000      	moveq	r0, #0
 8000b92:	4770      	bx	lr

08000b94 <HAL_GPIO_WritePin>:
{
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET)
 8000b94:	b10a      	cbz	r2, 8000b9a <HAL_GPIO_WritePin+0x6>
    {
        GPIOx->BSRR = GPIO_Pin;
    }
    else
    {
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b96:	6181      	str	r1, [r0, #24]
    }
}
 8000b98:	4770      	bx	lr
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b9a:	0409      	lsls	r1, r1, #16
 8000b9c:	e7fb      	b.n	8000b96 <HAL_GPIO_WritePin+0x2>

08000b9e <HAL_GPIO_TogglePin>:
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    GPIOx->ODR ^= GPIO_Pin;
 8000b9e:	6943      	ldr	r3, [r0, #20]
 8000ba0:	4059      	eors	r1, r3
 8000ba2:	6141      	str	r1, [r0, #20]
}
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_RCC_OscConfig>:
    uint32_t tickstart = 0U;
    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba8:	6803      	ldr	r3, [r0, #0]
{
 8000baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bac:	4604      	mov	r4, r0
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bae:	07d8      	lsls	r0, r3, #31
 8000bb0:	d438      	bmi.n	8000c24 <HAL_RCC_OscConfig+0x7c>
            }
        }
    }

    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	0799      	lsls	r1, r3, #30
 8000bb6:	d46c      	bmi.n	8000c92 <HAL_RCC_OscConfig+0xea>
            }
        }
    }

    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	071e      	lsls	r6, r3, #28
 8000bbc:	f100 80b8 	bmi.w	8000d30 <HAL_RCC_OscConfig+0x188>
            }
        }
    }

    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	075d      	lsls	r5, r3, #29
 8000bc4:	d528      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x70>
    {
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
        /* Enable Power Clock*/
        __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	4ba6      	ldr	r3, [pc, #664]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
        /* Enable write access to Backup domain */
        PWR->CR |= PWR_CR_DBP;
 8000bcc:	4da6      	ldr	r5, [pc, #664]	; (8000e68 <HAL_RCC_OscConfig+0x2c0>)
        __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9b01      	ldr	r3, [sp, #4]
        PWR->CR |= PWR_CR_DBP;
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	602b      	str	r3, [r5, #0]
        /* Wait for Backup domain Write protection enable */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fb60 	bl	80002ac <HAL_GetTick>
 8000bec:	4606      	mov	r6, r0

        while ((PWR->CR & PWR_CR_DBP) == RESET)
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	05da      	lsls	r2, r3, #23
 8000bf2:	f140 80c1 	bpl.w	8000d78 <HAL_RCC_OscConfig+0x1d0>
                return HAL_TIMEOUT;
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf6:	4d9b      	ldr	r5, [pc, #620]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
 8000bf8:	7a23      	ldrb	r3, [r4, #8]
 8000bfa:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bfe:	68a3      	ldr	r3, [r4, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 80c7 	beq.w	8000d94 <HAL_RCC_OscConfig+0x1ec>
        {
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000c06:	f7ff fb51 	bl	80002ac <HAL_GetTick>

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
            {
                if ((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c0a:	f241 3788 	movw	r7, #5000	; 0x1388
            tickstart = HAL_GetTick();
 8000c0e:	4606      	mov	r6, r0
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c12:	079b      	lsls	r3, r3, #30
 8000c14:	f140 80b7 	bpl.w	8000d86 <HAL_RCC_OscConfig+0x1de>

    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c18:	69a2      	ldr	r2, [r4, #24]
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 80c9 	bne.w	8000db2 <HAL_RCC_OscConfig+0x20a>
        {
            return HAL_ERROR;
        }
    }

    return HAL_OK;
 8000c20:	2000      	movs	r0, #0
 8000c22:	e015      	b.n	8000c50 <HAL_RCC_OscConfig+0xa8>
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c24:	4b8f      	ldr	r3, [pc, #572]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	f002 020c 	and.w	r2, r2, #12
 8000c2c:	2a04      	cmp	r2, #4
 8000c2e:	d007      	beq.n	8000c40 <HAL_RCC_OscConfig+0x98>
                ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	f002 020c 	and.w	r2, r2, #12
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c36:	2a08      	cmp	r2, #8
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0xac>
                ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	0252      	lsls	r2, r2, #9
 8000c3e:	d509      	bpl.n	8000c54 <HAL_RCC_OscConfig+0xac>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c40:	4b88      	ldr	r3, [pc, #544]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	039b      	lsls	r3, r3, #14
 8000c46:	d5b4      	bpl.n	8000bb2 <HAL_RCC_OscConfig+0xa>
 8000c48:	6863      	ldr	r3, [r4, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1b1      	bne.n	8000bb2 <HAL_RCC_OscConfig+0xa>
                return HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
}
 8000c50:	b003      	add	sp, #12
 8000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c54:	7922      	ldrb	r2, [r4, #4]
 8000c56:	709a      	strb	r2, [r3, #2]
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c58:	6863      	ldr	r3, [r4, #4]
 8000c5a:	b16b      	cbz	r3, 8000c78 <HAL_RCC_OscConfig+0xd0>
                tickstart = HAL_GetTick();
 8000c5c:	f7ff fb26 	bl	80002ac <HAL_GetTick>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c60:	4e80      	ldr	r6, [pc, #512]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
                tickstart = HAL_GetTick();
 8000c62:	4605      	mov	r5, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c64:	6833      	ldr	r3, [r6, #0]
 8000c66:	039f      	lsls	r7, r3, #14
 8000c68:	d4a3      	bmi.n	8000bb2 <HAL_RCC_OscConfig+0xa>
                    if ((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6a:	f7ff fb1f 	bl	80002ac <HAL_GetTick>
 8000c6e:	1b40      	subs	r0, r0, r5
 8000c70:	2864      	cmp	r0, #100	; 0x64
 8000c72:	d9f7      	bls.n	8000c64 <HAL_RCC_OscConfig+0xbc>
                        return HAL_TIMEOUT;
 8000c74:	2003      	movs	r0, #3
 8000c76:	e7eb      	b.n	8000c50 <HAL_RCC_OscConfig+0xa8>
                tickstart = HAL_GetTick();
 8000c78:	f7ff fb18 	bl	80002ac <HAL_GetTick>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7c:	4e79      	ldr	r6, [pc, #484]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
                tickstart = HAL_GetTick();
 8000c7e:	4605      	mov	r5, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c80:	6833      	ldr	r3, [r6, #0]
 8000c82:	0398      	lsls	r0, r3, #14
 8000c84:	d595      	bpl.n	8000bb2 <HAL_RCC_OscConfig+0xa>
                    if ((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c86:	f7ff fb11 	bl	80002ac <HAL_GetTick>
 8000c8a:	1b40      	subs	r0, r0, r5
 8000c8c:	2864      	cmp	r0, #100	; 0x64
 8000c8e:	d9f7      	bls.n	8000c80 <HAL_RCC_OscConfig+0xd8>
 8000c90:	e7f0      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000c92:	4b74      	ldr	r3, [pc, #464]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	f012 0f0c 	tst.w	r2, #12
 8000c9a:	d007      	beq.n	8000cac <HAL_RCC_OscConfig+0x104>
                ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	f002 020c 	and.w	r2, r2, #12
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ca2:	2a08      	cmp	r2, #8
 8000ca4:	d116      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x12c>
                ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	0259      	lsls	r1, r3, #9
 8000caa:	d413      	bmi.n	8000cd4 <HAL_RCC_OscConfig+0x12c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cac:	496d      	ldr	r1, [pc, #436]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
 8000cae:	680b      	ldr	r3, [r1, #0]
 8000cb0:	079a      	lsls	r2, r3, #30
 8000cb2:	d502      	bpl.n	8000cba <HAL_RCC_OscConfig+0x112>
 8000cb4:	68e3      	ldr	r3, [r4, #12]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d1c9      	bne.n	8000c4e <HAL_RCC_OscConfig+0xa6>
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	6808      	ldr	r0, [r1, #0]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
    uint32_t result;
#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbc:	23f8      	movs	r3, #248	; 0xf8
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	fab3 f283 	clz	r2, r3
 8000cc6:	6923      	ldr	r3, [r4, #16]
 8000cc8:	4093      	lsls	r3, r2
 8000cca:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd2:	e771      	b.n	8000bb8 <HAL_RCC_OscConfig+0x10>
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000cd4:	68e2      	ldr	r2, [r4, #12]
 8000cd6:	4b65      	ldr	r3, [pc, #404]	; (8000e6c <HAL_RCC_OscConfig+0x2c4>)
 8000cd8:	b1da      	cbz	r2, 8000d12 <HAL_RCC_OscConfig+0x16a>
                __HAL_RCC_HSI_ENABLE();
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
                tickstart = HAL_GetTick();
 8000cde:	f7ff fae5 	bl	80002ac <HAL_GetTick>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce2:	4d60      	ldr	r5, [pc, #384]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
                tickstart = HAL_GetTick();
 8000ce4:	4606      	mov	r6, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	079b      	lsls	r3, r3, #30
 8000cea:	d50c      	bpl.n	8000d06 <HAL_RCC_OscConfig+0x15e>
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cec:	6829      	ldr	r1, [r5, #0]
 8000cee:	23f8      	movs	r3, #248	; 0xf8
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	fab3 f283 	clz	r2, r3
 8000cf8:	6923      	ldr	r3, [r4, #16]
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000d00:	4313      	orrs	r3, r2
 8000d02:	602b      	str	r3, [r5, #0]
 8000d04:	e758      	b.n	8000bb8 <HAL_RCC_OscConfig+0x10>
                    if ((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d06:	f7ff fad1 	bl	80002ac <HAL_GetTick>
 8000d0a:	1b80      	subs	r0, r0, r6
 8000d0c:	2802      	cmp	r0, #2
 8000d0e:	d9ea      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x13e>
 8000d10:	e7b0      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
                __HAL_RCC_HSI_DISABLE();
 8000d12:	601a      	str	r2, [r3, #0]
                tickstart = HAL_GetTick();
 8000d14:	f7ff faca 	bl	80002ac <HAL_GetTick>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d18:	4e52      	ldr	r6, [pc, #328]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
                tickstart = HAL_GetTick();
 8000d1a:	4605      	mov	r5, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1c:	6833      	ldr	r3, [r6, #0]
 8000d1e:	079f      	lsls	r7, r3, #30
 8000d20:	f57f af4a 	bpl.w	8000bb8 <HAL_RCC_OscConfig+0x10>
                    if ((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d24:	f7ff fac2 	bl	80002ac <HAL_GetTick>
 8000d28:	1b40      	subs	r0, r0, r5
 8000d2a:	2802      	cmp	r0, #2
 8000d2c:	d9f6      	bls.n	8000d1c <HAL_RCC_OscConfig+0x174>
 8000d2e:	e7a1      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000d30:	6962      	ldr	r2, [r4, #20]
 8000d32:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <HAL_RCC_OscConfig+0x2c4>)
 8000d34:	b182      	cbz	r2, 8000d58 <HAL_RCC_OscConfig+0x1b0>
            __HAL_RCC_LSI_ENABLE();
 8000d36:	2201      	movs	r2, #1
 8000d38:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
            tickstart = HAL_GetTick();
 8000d3c:	f7ff fab6 	bl	80002ac <HAL_GetTick>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d40:	4e48      	ldr	r6, [pc, #288]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
            tickstart = HAL_GetTick();
 8000d42:	4605      	mov	r5, r0
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d44:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000d46:	0798      	lsls	r0, r3, #30
 8000d48:	f53f af3a 	bmi.w	8000bc0 <HAL_RCC_OscConfig+0x18>
                if ((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d4c:	f7ff faae 	bl	80002ac <HAL_GetTick>
 8000d50:	1b40      	subs	r0, r0, r5
 8000d52:	2802      	cmp	r0, #2
 8000d54:	d9f6      	bls.n	8000d44 <HAL_RCC_OscConfig+0x19c>
 8000d56:	e78d      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
            __HAL_RCC_LSI_DISABLE();
 8000d58:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
            tickstart = HAL_GetTick();
 8000d5c:	f7ff faa6 	bl	80002ac <HAL_GetTick>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d60:	4e40      	ldr	r6, [pc, #256]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
            tickstart = HAL_GetTick();
 8000d62:	4605      	mov	r5, r0
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000d66:	0799      	lsls	r1, r3, #30
 8000d68:	f57f af2a 	bpl.w	8000bc0 <HAL_RCC_OscConfig+0x18>
                if ((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fa9e 	bl	80002ac <HAL_GetTick>
 8000d70:	1b40      	subs	r0, r0, r5
 8000d72:	2802      	cmp	r0, #2
 8000d74:	d9f6      	bls.n	8000d64 <HAL_RCC_OscConfig+0x1bc>
 8000d76:	e77d      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
            if ((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d78:	f7ff fa98 	bl	80002ac <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	f67f af35 	bls.w	8000bee <HAL_RCC_OscConfig+0x46>
 8000d84:	e776      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
                if ((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d86:	f7ff fa91 	bl	80002ac <HAL_GetTick>
 8000d8a:	1b80      	subs	r0, r0, r6
 8000d8c:	42b8      	cmp	r0, r7
 8000d8e:	f67f af3f 	bls.w	8000c10 <HAL_RCC_OscConfig+0x68>
 8000d92:	e76f      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
            tickstart = HAL_GetTick();
 8000d94:	f7ff fa8a 	bl	80002ac <HAL_GetTick>
                if ((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d98:	f241 3788 	movw	r7, #5000	; 0x1388
            tickstart = HAL_GetTick();
 8000d9c:	4606      	mov	r6, r0
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000da0:	0798      	lsls	r0, r3, #30
 8000da2:	f57f af39 	bpl.w	8000c18 <HAL_RCC_OscConfig+0x70>
                if ((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da6:	f7ff fa81 	bl	80002ac <HAL_GetTick>
 8000daa:	1b80      	subs	r0, r0, r6
 8000dac:	42b8      	cmp	r0, r7
 8000dae:	d9f6      	bls.n	8000d9e <HAL_RCC_OscConfig+0x1f6>
 8000db0:	e760      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000db2:	4d2c      	ldr	r5, [pc, #176]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
 8000db4:	68ab      	ldr	r3, [r5, #8]
 8000db6:	f003 030c 	and.w	r3, r3, #12
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	f43f af47 	beq.w	8000c4e <HAL_RCC_OscConfig+0xa6>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <HAL_RCC_OscConfig+0x2c4>)
 8000dc2:	2a02      	cmp	r2, #2
 8000dc4:	f04f 0200 	mov.w	r2, #0
                __HAL_RCC_PLL_DISABLE();
 8000dc8:	661a      	str	r2, [r3, #96]	; 0x60
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dca:	d13e      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2a2>
                tickstart = HAL_GetTick();
 8000dcc:	f7ff fa6e 	bl	80002ac <HAL_GetTick>
 8000dd0:	4606      	mov	r6, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	0199      	lsls	r1, r3, #6
 8000dd6:	d432      	bmi.n	8000e3e <HAL_RCC_OscConfig+0x296>
 8000dd8:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8000ddc:	fa96 f6a6 	rbit	r6, r6
 8000de0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
                WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000de4:	fab6 f686 	clz	r6, r6
 8000de8:	fa92 f2a2 	rbit	r2, r2
 8000dec:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000df0:	fab2 f082 	clz	r0, r2
 8000df4:	fa91 f1a1 	rbit	r1, r1
 8000df8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e00:	40b2      	lsls	r2, r6
 8000e02:	4313      	orrs	r3, r2
 8000e04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e06:	0852      	lsrs	r2, r2, #1
 8000e08:	3a01      	subs	r2, #1
 8000e0a:	4082      	lsls	r2, r0
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e10:	fab1 f181 	clz	r1, r1
 8000e14:	fa02 f101 	lsl.w	r1, r2, r1
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	606b      	str	r3, [r5, #4]
                __HAL_RCC_PLL_ENABLE();
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_RCC_OscConfig+0x2c4>)
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e1e:	4d11      	ldr	r5, [pc, #68]	; (8000e64 <HAL_RCC_OscConfig+0x2bc>)
                __HAL_RCC_PLL_ENABLE();
 8000e20:	2201      	movs	r2, #1
 8000e22:	661a      	str	r2, [r3, #96]	; 0x60
                tickstart = HAL_GetTick();
 8000e24:	f7ff fa42 	bl	80002ac <HAL_GetTick>
 8000e28:	4604      	mov	r4, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e2a:	682b      	ldr	r3, [r5, #0]
 8000e2c:	019a      	lsls	r2, r3, #6
 8000e2e:	f53f aef7 	bmi.w	8000c20 <HAL_RCC_OscConfig+0x78>
                    if ((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e32:	f7ff fa3b 	bl	80002ac <HAL_GetTick>
 8000e36:	1b00      	subs	r0, r0, r4
 8000e38:	2802      	cmp	r0, #2
 8000e3a:	d9f6      	bls.n	8000e2a <HAL_RCC_OscConfig+0x282>
 8000e3c:	e71a      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
                    if ((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3e:	f7ff fa35 	bl	80002ac <HAL_GetTick>
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	2802      	cmp	r0, #2
 8000e46:	d9c4      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x22a>
 8000e48:	e714      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
                tickstart = HAL_GetTick();
 8000e4a:	f7ff fa2f 	bl	80002ac <HAL_GetTick>
 8000e4e:	4604      	mov	r4, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	019b      	lsls	r3, r3, #6
 8000e54:	f57f aee4 	bpl.w	8000c20 <HAL_RCC_OscConfig+0x78>
                    if ((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e58:	f7ff fa28 	bl	80002ac <HAL_GetTick>
 8000e5c:	1b00      	subs	r0, r0, r4
 8000e5e:	2802      	cmp	r0, #2
 8000e60:	d9f6      	bls.n	8000e50 <HAL_RCC_OscConfig+0x2a8>
 8000e62:	e707      	b.n	8000c74 <HAL_RCC_OscConfig+0xcc>
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000
 8000e6c:	42470000 	.word	0x42470000

08000e70 <HAL_RCC_GetSysClockFreq>:
{
    uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
    uint32_t sysclockfreq = 0U;

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0x68>)
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	f002 020c 	and.w	r2, r2, #12
 8000e78:	2a04      	cmp	r2, #4
 8000e7a:	d028      	beq.n	8000ece <HAL_RCC_GetSysClockFreq+0x5e>
 8000e7c:	2a08      	cmp	r2, #8
 8000e7e:	d128      	bne.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x62>

        case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
        {
            /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
            SYSCLK = PLL_VCO / PLLP */
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e80:	685a      	ldr	r2, [r3, #4]

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e82:	6859      	ldr	r1, [r3, #4]
            {
                /* HSE used as PLL clock source */
                pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000e84:	6858      	ldr	r0, [r3, #4]
            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e86:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e8e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000e92:	fa91 f3a1 	rbit	r3, r1
                pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000e96:	fab3 f383 	clz	r3, r3
 8000e9a:	ea00 0001 	and.w	r0, r0, r1
 8000e9e:	fa20 f003 	lsr.w	r0, r0, r3
 8000ea2:	bf14      	ite	ne
 8000ea4:	4b0d      	ldrne	r3, [pc, #52]	; (8000edc <HAL_RCC_GetSysClockFreq+0x6c>)
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ea6:	4b0e      	ldreq	r3, [pc, #56]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x70>)
 8000ea8:	fbb3 f2f2 	udiv	r2, r3, r2
            }

            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) * 2U);
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0x68>)
                pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000eae:	4350      	muls	r0, r2
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) * 2U);
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb6:	fa92 f2a2 	rbit	r2, r2
 8000eba:	fab2 f282 	clz	r2, r2
 8000ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	005b      	lsls	r3, r3, #1
            sysclockfreq = pllvco / pllp;
 8000ec8:	fbb0 f0f3 	udiv	r0, r0, r3
            sysclockfreq = HSI_VALUE;
            break;
        }
    }

    return sysclockfreq;
 8000ecc:	4770      	bx	lr
    switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ece:	4803      	ldr	r0, [pc, #12]	; (8000edc <HAL_RCC_GetSysClockFreq+0x6c>)
 8000ed0:	4770      	bx	lr
            sysclockfreq = HSI_VALUE;
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x70>)
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	007a1200 	.word	0x007a1200
 8000ee0:	00f42400 	.word	0x00f42400

08000ee4 <HAL_RCC_ClockConfig>:
    if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ee4:	4b55      	ldr	r3, [pc, #340]	; (800103c <HAL_RCC_ClockConfig+0x158>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f002 020f 	and.w	r2, r2, #15
 8000eec:	428a      	cmp	r2, r1
{
 8000eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	460d      	mov	r5, r1
    if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ef6:	d32f      	bcc.n	8000f58 <HAL_RCC_ClockConfig+0x74>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ef8:	6822      	ldr	r2, [r4, #0]
 8000efa:	0796      	lsls	r6, r2, #30
 8000efc:	d436      	bmi.n	8000f6c <HAL_RCC_ClockConfig+0x88>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000efe:	07d0      	lsls	r0, r2, #31
 8000f00:	d43c      	bmi.n	8000f7c <HAL_RCC_ClockConfig+0x98>
    if (FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <HAL_RCC_ClockConfig+0x158>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f002 020f 	and.w	r2, r2, #15
 8000f0a:	42aa      	cmp	r2, r5
 8000f0c:	f200 8086 	bhi.w	800101c <HAL_RCC_ClockConfig+0x138>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f10:	6822      	ldr	r2, [r4, #0]
 8000f12:	0751      	lsls	r1, r2, #29
 8000f14:	f100 808a 	bmi.w	800102c <HAL_RCC_ClockConfig+0x148>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f18:	0713      	lsls	r3, r2, #28
 8000f1a:	d507      	bpl.n	8000f2c <HAL_RCC_ClockConfig+0x48>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f1c:	4a48      	ldr	r2, [pc, #288]	; (8001040 <HAL_RCC_ClockConfig+0x15c>)
 8000f1e:	6921      	ldr	r1, [r4, #16]
 8000f20:	6893      	ldr	r3, [r2, #8]
 8000f22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f2a:	6093      	str	r3, [r2, #8]
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8000f2c:	f7ff ffa0 	bl	8000e70 <HAL_RCC_GetSysClockFreq>
 8000f30:	4b43      	ldr	r3, [pc, #268]	; (8001040 <HAL_RCC_ClockConfig+0x15c>)
 8000f32:	22f0      	movs	r2, #240	; 0xf0
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	fa92 f2a2 	rbit	r2, r2
 8000f3a:	fab2 f282 	clz	r2, r2
 8000f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f42:	40d3      	lsrs	r3, r2
 8000f44:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <HAL_RCC_ClockConfig+0x160>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	40d8      	lsrs	r0, r3
 8000f4a:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <HAL_RCC_ClockConfig+0x164>)
 8000f4c:	6018      	str	r0, [r3, #0]
    HAL_InitTick (TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f002 fc64 	bl	800381c <HAL_InitTick>
    return HAL_OK;
 8000f54:	2000      	movs	r0, #0
 8000f56:	e007      	b.n	8000f68 <HAL_RCC_ClockConfig+0x84>
        __HAL_FLASH_SET_LATENCY(FLatency);
 8000f58:	b2ca      	uxtb	r2, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
        if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d0c8      	beq.n	8000ef8 <HAL_RCC_ClockConfig+0x14>
            return HAL_ERROR;
 8000f66:	2001      	movs	r0, #1
}
 8000f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f6c:	4934      	ldr	r1, [pc, #208]	; (8001040 <HAL_RCC_ClockConfig+0x15c>)
 8000f6e:	68a0      	ldr	r0, [r4, #8]
 8000f70:	688b      	ldr	r3, [r1, #8]
 8000f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f76:	4303      	orrs	r3, r0
 8000f78:	608b      	str	r3, [r1, #8]
 8000f7a:	e7c0      	b.n	8000efe <HAL_RCC_ClockConfig+0x1a>
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7c:	6862      	ldr	r2, [r4, #4]
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <HAL_RCC_ClockConfig+0x15c>)
 8000f80:	2a01      	cmp	r2, #1
 8000f82:	d11d      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0xdc>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	d0ec      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x82>
        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f8c:	4e2c      	ldr	r6, [pc, #176]	; (8001040 <HAL_RCC_ClockConfig+0x15c>)
 8000f8e:	68b3      	ldr	r3, [r6, #8]
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60b3      	str	r3, [r6, #8]
        tickstart = HAL_GetTick();
 8000f98:	f7ff f988 	bl	80002ac <HAL_GetTick>
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f9c:	6863      	ldr	r3, [r4, #4]
 8000f9e:	2b01      	cmp	r3, #1
        tickstart = HAL_GetTick();
 8000fa0:	4607      	mov	r7, r0
                if ((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa2:	f241 3888 	movw	r8, #5000	; 0x1388
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa6:	d115      	bne.n	8000fd4 <HAL_RCC_ClockConfig+0xf0>
            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa8:	68b3      	ldr	r3, [r6, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d0a7      	beq.n	8000f02 <HAL_RCC_ClockConfig+0x1e>
                if ((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb2:	f7ff f97b 	bl	80002ac <HAL_GetTick>
 8000fb6:	1bc0      	subs	r0, r0, r7
 8000fb8:	4540      	cmp	r0, r8
 8000fba:	d9f5      	bls.n	8000fa8 <HAL_RCC_ClockConfig+0xc4>
                    return HAL_TIMEOUT;
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	e7d3      	b.n	8000f68 <HAL_RCC_ClockConfig+0x84>
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc0:	1e91      	subs	r1, r2, #2
 8000fc2:	2901      	cmp	r1, #1
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc4:	681b      	ldr	r3, [r3, #0]
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc6:	d802      	bhi.n	8000fce <HAL_RCC_ClockConfig+0xea>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fcc:	e7dd      	b.n	8000f8a <HAL_RCC_ClockConfig+0xa6>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fce:	f013 0f02 	tst.w	r3, #2
 8000fd2:	e7da      	b.n	8000f8a <HAL_RCC_ClockConfig+0xa6>
        else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d10a      	bne.n	8000fee <HAL_RCC_ClockConfig+0x10a>
            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd8:	68b3      	ldr	r3, [r6, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d08f      	beq.n	8000f02 <HAL_RCC_ClockConfig+0x1e>
                if ((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe2:	f7ff f963 	bl	80002ac <HAL_GetTick>
 8000fe6:	1bc0      	subs	r0, r0, r7
 8000fe8:	4540      	cmp	r0, r8
 8000fea:	d9f5      	bls.n	8000fd8 <HAL_RCC_ClockConfig+0xf4>
 8000fec:	e7e6      	b.n	8000fbc <HAL_RCC_ClockConfig+0xd8>
        else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d10f      	bne.n	8001012 <HAL_RCC_ClockConfig+0x12e>
            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000ff2:	68b3      	ldr	r3, [r6, #8]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	d082      	beq.n	8000f02 <HAL_RCC_ClockConfig+0x1e>
                if ((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff f956 	bl	80002ac <HAL_GetTick>
 8001000:	1bc0      	subs	r0, r0, r7
 8001002:	4540      	cmp	r0, r8
 8001004:	d9f5      	bls.n	8000ff2 <HAL_RCC_ClockConfig+0x10e>
 8001006:	e7d9      	b.n	8000fbc <HAL_RCC_ClockConfig+0xd8>
                if ((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001008:	f7ff f950 	bl	80002ac <HAL_GetTick>
 800100c:	1bc0      	subs	r0, r0, r7
 800100e:	4540      	cmp	r0, r8
 8001010:	d8d4      	bhi.n	8000fbc <HAL_RCC_ClockConfig+0xd8>
            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001012:	68b3      	ldr	r3, [r6, #8]
 8001014:	f013 0f0c 	tst.w	r3, #12
 8001018:	d1f6      	bne.n	8001008 <HAL_RCC_ClockConfig+0x124>
 800101a:	e772      	b.n	8000f02 <HAL_RCC_ClockConfig+0x1e>
        __HAL_FLASH_SET_LATENCY(FLatency);
 800101c:	b2ea      	uxtb	r2, r5
 800101e:	701a      	strb	r2, [r3, #0]
        if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	42ab      	cmp	r3, r5
 8001028:	d19d      	bne.n	8000f66 <HAL_RCC_ClockConfig+0x82>
 800102a:	e771      	b.n	8000f10 <HAL_RCC_ClockConfig+0x2c>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800102c:	4904      	ldr	r1, [pc, #16]	; (8001040 <HAL_RCC_ClockConfig+0x15c>)
 800102e:	68e0      	ldr	r0, [r4, #12]
 8001030:	688b      	ldr	r3, [r1, #8]
 8001032:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001036:	4303      	orrs	r3, r0
 8001038:	608b      	str	r3, [r1, #8]
 800103a:	e76d      	b.n	8000f18 <HAL_RCC_ClockConfig+0x34>
 800103c:	40023c00 	.word	0x40023c00
 8001040:	40023800 	.word	0x40023800
 8001044:	080045a8 	.word	0x080045a8
 8001048:	20000000 	.word	0x20000000

0800104c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    return SystemCoreClock;
}
 800104c:	4b01      	ldr	r3, [pc, #4]	; (8001054 <HAL_RCC_GetHCLKFreq+0x8>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_RCC_GetPCLK1Freq+0x24>)
 800105a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	fa92 f2a2 	rbit	r2, r2
 8001064:	fab2 f282 	clz	r2, r2
 8001068:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800106c:	40d3      	lsrs	r3, r2
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001074:	6810      	ldr	r0, [r2, #0]
}
 8001076:	40d8      	lsrs	r0, r3
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	080045a8 	.word	0x080045a8
 8001084:	20000000 	.word	0x20000000

08001088 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef*  RCC_ClkInitStruct, uint32_t* pFLatency)
{
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001088:	230f      	movs	r3, #15
 800108a:	6003      	str	r3, [r0, #0]
    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_RCC_GetClockConfig+0x34>)
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	6042      	str	r2, [r0, #4]
    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800109c:	6082      	str	r2, [r0, #8]
    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80010a4:	60c2      	str	r2, [r0, #12]
    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80010ae:	6103      	str	r3, [r0, #16]
    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_RCC_GetClockConfig+0x38>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	600b      	str	r3, [r1, #0]
}
 80010ba:	4770      	bx	lr
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40023c00 	.word	0x40023c00

080010c4 <HAL_TIM_Base_MspInit>:
    /* Prevent unused argument(s) compilation warning */
    UNUSED(htim);
    /* NOTE : This function Should not be modified, when the callback is needed,
              the HAL_TIM_Base_MspInit could be implemented in the user file
     */
}
 80010c4:	4770      	bx	lr

080010c6 <HAL_TIM_Base_Start_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef* htim)
{
    /* Check the parameters */
    assert_param(IS_TIM_INSTANCE(htim->Instance));
    /* Enable the TIM Update interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010c6:	6803      	ldr	r3, [r0, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
    /* Enable the Peripheral */
    __HAL_TIM_ENABLE(htim);
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
    /* Return function status */
    return HAL_OK;
}
 80010d8:	2000      	movs	r0, #0
 80010da:	4770      	bx	lr

080010dc <HAL_TIM_OC_DelayElapsedCallback>:
 80010dc:	4770      	bx	lr

080010de <HAL_TIM_IC_CaptureCallback>:
 80010de:	4770      	bx	lr

080010e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80010e0:	4770      	bx	lr

080010e2 <HAL_TIM_TriggerCallback>:
 80010e2:	4770      	bx	lr

080010e4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef* htim)
{
    /* Capture compare 1 event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010e4:	6803      	ldr	r3, [r0, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	0791      	lsls	r1, r2, #30
{
 80010ea:	b510      	push	{r4, lr}
 80010ec:	4604      	mov	r4, r0
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010ee:	d50e      	bpl.n	800110e <HAL_TIM_IRQHandler+0x2a>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	0792      	lsls	r2, r2, #30
 80010f4:	d50b      	bpl.n	800110e <HAL_TIM_IRQHandler+0x2a>
        {
            {
                __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010f6:	f06f 0202 	mvn.w	r2, #2
 80010fa:	611a      	str	r2, [r3, #16]
                htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010fc:	2201      	movs	r2, #1
 80010fe:	7602      	strb	r2, [r0, #24]

                /* Input capture event */
                if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	079b      	lsls	r3, r3, #30
 8001104:	d077      	beq.n	80011f6 <HAL_TIM_IRQHandler+0x112>
                {
                    HAL_TIM_IC_CaptureCallback(htim);
 8001106:	f7ff ffea 	bl	80010de <HAL_TIM_IC_CaptureCallback>
                {
                    HAL_TIM_OC_DelayElapsedCallback(htim);
                    HAL_TIM_PWM_PulseFinishedCallback(htim);
                }

                htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800110a:	2300      	movs	r3, #0
 800110c:	7623      	strb	r3, [r4, #24]
            }
        }
    }

    /* Capture compare 2 event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	0750      	lsls	r0, r2, #29
 8001114:	d510      	bpl.n	8001138 <HAL_TIM_IRQHandler+0x54>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	0751      	lsls	r1, r2, #29
 800111a:	d50d      	bpl.n	8001138 <HAL_TIM_IRQHandler+0x54>
        {
            __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800111c:	f06f 0204 	mvn.w	r2, #4
 8001120:	611a      	str	r2, [r3, #16]
            htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001122:	2202      	movs	r2, #2
 8001124:	7622      	strb	r2, [r4, #24]

            /* Input capture event */
            if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f413 7f40 	tst.w	r3, #768	; 0x300
            {
                HAL_TIM_IC_CaptureCallback(htim);
 800112c:	4620      	mov	r0, r4
            if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800112e:	d068      	beq.n	8001202 <HAL_TIM_IRQHandler+0x11e>
                HAL_TIM_IC_CaptureCallback(htim);
 8001130:	f7ff ffd5 	bl	80010de <HAL_TIM_IC_CaptureCallback>
            {
                HAL_TIM_OC_DelayElapsedCallback(htim);
                HAL_TIM_PWM_PulseFinishedCallback(htim);
            }

            htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001134:	2300      	movs	r3, #0
 8001136:	7623      	strb	r3, [r4, #24]
        }
    }

    /* Capture compare 3 event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	0712      	lsls	r2, r2, #28
 800113e:	d50f      	bpl.n	8001160 <HAL_TIM_IRQHandler+0x7c>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	0710      	lsls	r0, r2, #28
 8001144:	d50c      	bpl.n	8001160 <HAL_TIM_IRQHandler+0x7c>
        {
            __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001146:	f06f 0208 	mvn.w	r2, #8
 800114a:	611a      	str	r2, [r3, #16]
            htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800114c:	2204      	movs	r2, #4
 800114e:	7622      	strb	r2, [r4, #24]

            /* Input capture event */
            if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	0799      	lsls	r1, r3, #30
            {
                HAL_TIM_IC_CaptureCallback(htim);
 8001154:	4620      	mov	r0, r4
            if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001156:	d05a      	beq.n	800120e <HAL_TIM_IRQHandler+0x12a>
                HAL_TIM_IC_CaptureCallback(htim);
 8001158:	f7ff ffc1 	bl	80010de <HAL_TIM_IC_CaptureCallback>
            {
                HAL_TIM_OC_DelayElapsedCallback(htim);
                HAL_TIM_PWM_PulseFinishedCallback(htim);
            }

            htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800115c:	2300      	movs	r3, #0
 800115e:	7623      	strb	r3, [r4, #24]
        }
    }

    /* Capture compare 4 event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	06d2      	lsls	r2, r2, #27
 8001166:	d510      	bpl.n	800118a <HAL_TIM_IRQHandler+0xa6>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	06d0      	lsls	r0, r2, #27
 800116c:	d50d      	bpl.n	800118a <HAL_TIM_IRQHandler+0xa6>
        {
            __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800116e:	f06f 0210 	mvn.w	r2, #16
 8001172:	611a      	str	r2, [r3, #16]
            htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001174:	2208      	movs	r2, #8
 8001176:	7622      	strb	r2, [r4, #24]

            /* Input capture event */
            if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f413 7f40 	tst.w	r3, #768	; 0x300
            {
                HAL_TIM_IC_CaptureCallback(htim);
 800117e:	4620      	mov	r0, r4
            if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001180:	d04b      	beq.n	800121a <HAL_TIM_IRQHandler+0x136>
                HAL_TIM_IC_CaptureCallback(htim);
 8001182:	f7ff ffac 	bl	80010de <HAL_TIM_IC_CaptureCallback>
            {
                HAL_TIM_OC_DelayElapsedCallback(htim);
                HAL_TIM_PWM_PulseFinishedCallback(htim);
            }

            htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001186:	2300      	movs	r3, #0
 8001188:	7623      	strb	r3, [r4, #24]
        }
    }

    /* TIM Update event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	07d1      	lsls	r1, r2, #31
 8001190:	d508      	bpl.n	80011a4 <HAL_TIM_IRQHandler+0xc0>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	07d2      	lsls	r2, r2, #31
 8001196:	d505      	bpl.n	80011a4 <HAL_TIM_IRQHandler+0xc0>
        {
            __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001198:	f06f 0201 	mvn.w	r2, #1
 800119c:	611a      	str	r2, [r3, #16]
            HAL_TIM_PeriodElapsedCallback(htim);
 800119e:	4620      	mov	r0, r4
 80011a0:	f002 fb78 	bl	8003894 <HAL_TIM_PeriodElapsedCallback>
        }
    }

    /* TIM Break input event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	0610      	lsls	r0, r2, #24
 80011aa:	d508      	bpl.n	80011be <HAL_TIM_IRQHandler+0xda>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	0611      	lsls	r1, r2, #24
 80011b0:	d505      	bpl.n	80011be <HAL_TIM_IRQHandler+0xda>
        {
            __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011b6:	611a      	str	r2, [r3, #16]
            HAL_TIMEx_BreakCallback(htim);
 80011b8:	4620      	mov	r0, r4
 80011ba:	f000 f8b2 	bl	8001322 <HAL_TIMEx_BreakCallback>
        }
    }

    /* TIM Trigger detection event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	0652      	lsls	r2, r2, #25
 80011c4:	d508      	bpl.n	80011d8 <HAL_TIM_IRQHandler+0xf4>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	0650      	lsls	r0, r2, #25
 80011ca:	d505      	bpl.n	80011d8 <HAL_TIM_IRQHandler+0xf4>
        {
            __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011d0:	611a      	str	r2, [r3, #16]
            HAL_TIM_TriggerCallback(htim);
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff ff85 	bl	80010e2 <HAL_TIM_TriggerCallback>
        }
    }

    /* TIM commutation event */
    if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	0691      	lsls	r1, r2, #26
 80011de:	d522      	bpl.n	8001226 <HAL_TIM_IRQHandler+0x142>
    {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	0692      	lsls	r2, r2, #26
 80011e4:	d51f      	bpl.n	8001226 <HAL_TIM_IRQHandler+0x142>
        {
            __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011e6:	f06f 0220 	mvn.w	r2, #32
            HAL_TIMEx_CommutationCallback(htim);
 80011ea:	4620      	mov	r0, r4
            __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011ec:	611a      	str	r2, [r3, #16]
        }
    }
}
 80011ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            HAL_TIMEx_CommutationCallback(htim);
 80011f2:	f000 b895 	b.w	8001320 <HAL_TIMEx_CommutationCallback>
                    HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f6:	f7ff ff71 	bl	80010dc <HAL_TIM_OC_DelayElapsedCallback>
                    HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff ff70 	bl	80010e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001200:	e783      	b.n	800110a <HAL_TIM_IRQHandler+0x26>
                HAL_TIM_OC_DelayElapsedCallback(htim);
 8001202:	f7ff ff6b 	bl	80010dc <HAL_TIM_OC_DelayElapsedCallback>
                HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff ff6a 	bl	80010e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800120c:	e792      	b.n	8001134 <HAL_TIM_IRQHandler+0x50>
                HAL_TIM_OC_DelayElapsedCallback(htim);
 800120e:	f7ff ff65 	bl	80010dc <HAL_TIM_OC_DelayElapsedCallback>
                HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff ff64 	bl	80010e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001218:	e7a0      	b.n	800115c <HAL_TIM_IRQHandler+0x78>
                HAL_TIM_OC_DelayElapsedCallback(htim);
 800121a:	f7ff ff5f 	bl	80010dc <HAL_TIM_OC_DelayElapsedCallback>
                HAL_TIM_PWM_PulseFinishedCallback(htim);
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff ff5e 	bl	80010e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001224:	e7af      	b.n	8001186 <HAL_TIM_IRQHandler+0xa2>
}
 8001226:	bd10      	pop	{r4, pc}

08001228 <TIM_Base_SetConfig>:
{
    uint32_t tmpcr1 = 0U;
    tmpcr1 = TIMx->CR1;

    /* Set TIM Time Base Unit parameters ---------------------------------------*/
    if (IS_TIM_CC3_INSTANCE(TIMx) != RESET)
 8001228:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <TIM_Base_SetConfig+0xbc>)
    tmpcr1 = TIMx->CR1;
 800122a:	6803      	ldr	r3, [r0, #0]
    if (IS_TIM_CC3_INSTANCE(TIMx) != RESET)
 800122c:	4290      	cmp	r0, r2
 800122e:	d012      	beq.n	8001256 <TIM_Base_SetConfig+0x2e>
 8001230:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001234:	d00f      	beq.n	8001256 <TIM_Base_SetConfig+0x2e>
 8001236:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800123a:	4290      	cmp	r0, r2
 800123c:	d00b      	beq.n	8001256 <TIM_Base_SetConfig+0x2e>
 800123e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001242:	4290      	cmp	r0, r2
 8001244:	d007      	beq.n	8001256 <TIM_Base_SetConfig+0x2e>
 8001246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800124a:	4290      	cmp	r0, r2
 800124c:	d003      	beq.n	8001256 <TIM_Base_SetConfig+0x2e>
 800124e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001252:	4290      	cmp	r0, r2
 8001254:	d119      	bne.n	800128a <TIM_Base_SetConfig+0x62>
    {
        /* Select the Counter Mode */
        tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
        tmpcr1 |= Structure->CounterMode;
 8001256:	684a      	ldr	r2, [r1, #4]
        tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
        tmpcr1 |= Structure->CounterMode;
 800125c:	4313      	orrs	r3, r2
    }

    if (IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <TIM_Base_SetConfig+0xbc>)
 8001260:	4290      	cmp	r0, r2
 8001262:	d029      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 8001264:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001268:	d026      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 800126a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800126e:	4290      	cmp	r0, r2
 8001270:	d022      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 8001272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001276:	4290      	cmp	r0, r2
 8001278:	d01e      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 800127a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800127e:	4290      	cmp	r0, r2
 8001280:	d01a      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 8001282:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001286:	4290      	cmp	r0, r2
 8001288:	d016      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <TIM_Base_SetConfig+0xc0>)
 800128c:	4290      	cmp	r0, r2
 800128e:	d013      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 8001290:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001294:	4290      	cmp	r0, r2
 8001296:	d00f      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 8001298:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800129c:	4290      	cmp	r0, r2
 800129e:	d00b      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 80012a0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80012a4:	4290      	cmp	r0, r2
 80012a6:	d007      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 80012a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ac:	4290      	cmp	r0, r2
 80012ae:	d003      	beq.n	80012b8 <TIM_Base_SetConfig+0x90>
 80012b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012b4:	4290      	cmp	r0, r2
 80012b6:	d103      	bne.n	80012c0 <TIM_Base_SetConfig+0x98>
    {
        /* Set the clock division */
        tmpcr1 &= ~TIM_CR1_CKD;
        tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012b8:	68ca      	ldr	r2, [r1, #12]
        tmpcr1 &= ~TIM_CR1_CKD;
 80012ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012be:	4313      	orrs	r3, r2
    }

    TIMx->CR1 = tmpcr1;
 80012c0:	6003      	str	r3, [r0, #0]
    /* Set the Auto-reload value */
    TIMx->ARR = (uint32_t)Structure->Period ;
 80012c2:	688b      	ldr	r3, [r1, #8]
 80012c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    /* Set the Prescaler value */
    TIMx->PSC = (uint32_t)Structure->Prescaler;
 80012c6:	680b      	ldr	r3, [r1, #0]
 80012c8:	6283      	str	r3, [r0, #40]	; 0x28

    if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <TIM_Base_SetConfig+0xbc>)
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d003      	beq.n	80012d8 <TIM_Base_SetConfig+0xb0>
 80012d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012d4:	4298      	cmp	r0, r3
 80012d6:	d101      	bne.n	80012dc <TIM_Base_SetConfig+0xb4>
    {
        /* Set the Repetition Counter value */
        TIMx->RCR = Structure->RepetitionCounter;
 80012d8:	690b      	ldr	r3, [r1, #16]
 80012da:	6303      	str	r3, [r0, #48]	; 0x30
    }

    /* Generate an update event to reload the Prescaler
       and the repetition counter(only for TIM1 and TIM8) value immediately */
    TIMx->EGR = TIM_EGR_UG;
 80012dc:	2301      	movs	r3, #1
 80012de:	6143      	str	r3, [r0, #20]
}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40014000 	.word	0x40014000

080012ec <HAL_TIM_Base_Init>:
{
 80012ec:	b510      	push	{r4, lr}
    if (htim == NULL)
 80012ee:	4604      	mov	r4, r0
 80012f0:	b1a0      	cbz	r0, 800131c <HAL_TIM_Base_Init+0x30>
    if (htim->State == HAL_TIM_STATE_RESET)
 80012f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012fa:	b91b      	cbnz	r3, 8001304 <HAL_TIM_Base_Init+0x18>
        htim->Lock = HAL_UNLOCKED;
 80012fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
        HAL_TIM_Base_MspInit(htim);
 8001300:	f7ff fee0 	bl	80010c4 <HAL_TIM_Base_MspInit>
    htim->State = HAL_TIM_STATE_BUSY;
 8001304:	2302      	movs	r3, #2
    TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001306:	6820      	ldr	r0, [r4, #0]
    htim->State = HAL_TIM_STATE_BUSY;
 8001308:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800130c:	1d21      	adds	r1, r4, #4
 800130e:	f7ff ff8b 	bl	8001228 <TIM_Base_SetConfig>
    htim->State = HAL_TIM_STATE_READY;
 8001312:	2301      	movs	r3, #1
 8001314:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001318:	2000      	movs	r0, #0
}
 800131a:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 800131c:	2001      	movs	r0, #1
 800131e:	e7fc      	b.n	800131a <HAL_TIM_Base_Init+0x2e>

08001320 <HAL_TIMEx_CommutationCallback>:
 8001320:	4770      	bx	lr

08001322 <HAL_TIMEx_BreakCallback>:
 8001322:	4770      	bx	lr

08001324 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001324:	b508      	push	{r3, lr}
    vTaskStartScheduler();
 8001326:	f000 ff93 	bl	8002250 <vTaskStartScheduler>
    return osOK;
}
 800132a:	2000      	movs	r0, #0
 800132c:	bd08      	pop	{r3, pc}

0800132e <osKernelSysTick>:
    __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800132e:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
    if (inHandlerMode())
 8001332:	b10b      	cbz	r3, 8001338 <osKernelSysTick+0xa>
    {
        return xTaskGetTickCountFromISR();
 8001334:	f000 bfd0 	b.w	80022d8 <xTaskGetTickCountFromISR>
    }
    else
    {
        return xTaskGetTickCount();
 8001338:	f000 bfc8 	b.w	80022cc <xTaskGetTickCount>

0800133c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t* thread_def, void* argument)
{
 800133c:	b530      	push	{r4, r5, lr}
 800133e:	4604      	mov	r4, r0
 8001340:	b087      	sub	sp, #28
    TaskHandle_t handle;

    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR*)thread_def->name,
 8001342:	8a22      	ldrh	r2, [r4, #16]
 8001344:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
    if (priority != osPriorityError)
 8001348:	2500      	movs	r5, #0
 800134a:	2c84      	cmp	r4, #132	; 0x84
    unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800134c:	bf0c      	ite	eq
 800134e:	462c      	moveq	r4, r5
        fpriority += (priority - osPriorityIdle);
 8001350:	3403      	addne	r4, #3
{
 8001352:	460b      	mov	r3, r1
    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR*)thread_def->name,
 8001354:	e9d0 1000 	ldrd	r1, r0, [r0]
 8001358:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800135c:	ad05      	add	r5, sp, #20
 800135e:	e9cd 4500 	strd	r4, r5, [sp]
 8001362:	f000 fe41 	bl	8001fe8 <xTaskGenericCreate>
 8001366:	2801      	cmp	r0, #1
                    &handle) != pdPASS)
    {
        return NULL;
    }

    return handle;
 8001368:	bf0c      	ite	eq
 800136a:	9805      	ldreq	r0, [sp, #20]
        return NULL;
 800136c:	2000      	movne	r0, #0
}
 800136e:	b007      	add	sp, #28
 8001370:	bd30      	pop	{r4, r5, pc}

08001372 <osMutexCreate>:
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t* mutex_def)
{
#if ( configUSE_MUTEXES == 1)
    return xSemaphoreCreateMutex();
 8001372:	2001      	movs	r0, #1
 8001374:	f000 ba74 	b.w	8001860 <xQueueCreateMutex>

08001378 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001378:	b513      	push	{r0, r1, r4, lr}
    TickType_t ticks;
    portBASE_TYPE taskWoken = pdFALSE;
 800137a:	2400      	movs	r4, #0
{
 800137c:	460a      	mov	r2, r1
    portBASE_TYPE taskWoken = pdFALSE;
 800137e:	9401      	str	r4, [sp, #4]

    if (mutex_id == NULL)
 8001380:	b1f8      	cbz	r0, 80013c2 <osMutexWait+0x4a>
 8001382:	f3ef 8305 	mrs	r3, IPSR
        {
            ticks = 1;
        }
    }

    if (inHandlerMode())
 8001386:	b1ab      	cbz	r3, 80013b4 <osMutexWait+0x3c>
    {
        if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE)
 8001388:	aa01      	add	r2, sp, #4
 800138a:	4621      	mov	r1, r4
 800138c:	f000 fd60 	bl	8001e50 <xQueueReceiveFromISR>
 8001390:	2801      	cmp	r0, #1
 8001392:	d114      	bne.n	80013be <osMutexWait+0x46>
        {
            return osErrorOS;
        }

        portEND_SWITCHING_ISR(taskWoken);
 8001394:	9b01      	ldr	r3, [sp, #4]
 8001396:	b913      	cbnz	r3, 800139e <osMutexWait+0x26>
    else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE)
    {
        return osErrorOS;
    }

    return osOK;
 8001398:	2000      	movs	r0, #0
}
 800139a:	b002      	add	sp, #8
 800139c:	bd10      	pop	{r4, pc}
        portEND_SWITCHING_ISR(taskWoken);
 800139e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80013a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80013aa:	f3bf 8f4f 	dsb	sy
 80013ae:	f3bf 8f6f 	isb	sy
 80013b2:	e7f1      	b.n	8001398 <osMutexWait+0x20>
    else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE)
 80013b4:	4619      	mov	r1, r3
 80013b6:	f000 fb85 	bl	8001ac4 <xQueueGenericReceive>
 80013ba:	2801      	cmp	r0, #1
 80013bc:	d0ec      	beq.n	8001398 <osMutexWait+0x20>
        return osErrorOS;
 80013be:	20ff      	movs	r0, #255	; 0xff
 80013c0:	e7eb      	b.n	800139a <osMutexWait+0x22>
        return osErrorParameter;
 80013c2:	2080      	movs	r0, #128	; 0x80
 80013c4:	e7e9      	b.n	800139a <osMutexWait+0x22>

080013c6 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80013c6:	b513      	push	{r0, r1, r4, lr}
    osStatus result = osOK;
    portBASE_TYPE taskWoken = pdFALSE;
 80013c8:	2400      	movs	r4, #0
 80013ca:	9401      	str	r4, [sp, #4]
 80013cc:	f3ef 8305 	mrs	r3, IPSR

    if (inHandlerMode())
 80013d0:	b1a3      	cbz	r3, 80013fc <osMutexRelease+0x36>
    {
        if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE)
 80013d2:	a901      	add	r1, sp, #4
 80013d4:	f000 fb72 	bl	8001abc <xQueueGiveFromISR>
 80013d8:	2801      	cmp	r0, #1
 80013da:	d115      	bne.n	8001408 <osMutexRelease+0x42>
        {
            return osErrorOS;
        }

        portEND_SWITCHING_ISR(taskWoken);
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	b913      	cbnz	r3, 80013e6 <osMutexRelease+0x20>
    osStatus result = osOK;
 80013e0:	2000      	movs	r0, #0
    {
        result = osErrorOS;
    }

    return result;
}
 80013e2:	b002      	add	sp, #8
 80013e4:	bd10      	pop	{r4, pc}
        portEND_SWITCHING_ISR(taskWoken);
 80013e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80013ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80013f2:	f3bf 8f4f 	dsb	sy
 80013f6:	f3bf 8f6f 	isb	sy
 80013fa:	e7f1      	b.n	80013e0 <osMutexRelease+0x1a>
    else if (xSemaphoreGive(mutex_id) != pdTRUE)
 80013fc:	461a      	mov	r2, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	f000 f8da 	bl	80015b8 <xQueueGenericSend>
 8001404:	2801      	cmp	r0, #1
 8001406:	d0eb      	beq.n	80013e0 <osMutexRelease+0x1a>
        result = osErrorOS;
 8001408:	20ff      	movs	r0, #255	; 0xff
 800140a:	e7ea      	b.n	80013e2 <osMutexRelease+0x1c>

0800140c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800140c:	b508      	push	{r3, lr}
#if (INCLUDE_xTaskGetSchedulerState  == 1 )

    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800140e:	f001 fac3 	bl	8002998 <xTaskGetSchedulerState>
 8001412:	2801      	cmp	r0, #1
 8001414:	d003      	beq.n	800141e <osSystickHandler+0x12>
        xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
    }

#endif  /* INCLUDE_xTaskGetSchedulerState */
}
 8001416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortSysTickHandler();
 800141a:	f001 bc97 	b.w	8002d4c <xPortSysTickHandler>
}
 800141e:	bd08      	pop	{r3, pc}

08001420 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t* PreviousWakeTime, uint32_t millisec)
{
 8001420:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
    TickType_t ticks = (millisec / portTICK_PERIOD_MS);
    vTaskDelayUntil((TickType_t*) PreviousWakeTime, ticks ? ticks : 1);
 8001422:	2901      	cmp	r1, #1
 8001424:	bf38      	it	cc
 8001426:	2101      	movcc	r1, #1
 8001428:	f001 f878 	bl	800251c <vTaskDelayUntil>
#else
    (void) millisec;
    (void) PreviousWakeTime;
    return osErrorResource;
#endif
}
 800142c:	2000      	movs	r0, #0
 800142e:	bd08      	pop	{r3, pc}

08001430 <vListInitialise>:
void vListInitialise( List_t* const pxList )
{
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t* ) & ( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001430:	f100 0308 	add.w	r3, r0, #8
    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t* ) & ( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001438:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t* ) & ( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800143c:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t* ) & ( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800143e:	6103      	str	r3, [r0, #16]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	6003      	str	r3, [r0, #0]
    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001444:	4770      	bx	lr

08001446 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t* const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pvContainer = NULL;
 8001446:	2300      	movs	r3, #0
 8001448:	6103      	str	r3, [r0, #16]
    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800144a:	4770      	bx	lr

0800144c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t* const pxList, ListItem_t* const pxNewListItem )
{
    ListItem_t* const pxIndex = pxList->pxIndex;
 800144c:	6843      	ldr	r3, [r0, #4]
    listTEST_LIST_INTEGRITY( pxList );
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800144e:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	608a      	str	r2, [r1, #8]
    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001458:	6099      	str	r1, [r3, #8]
    /* Remember which list the item is in. */
    pxNewListItem->pvContainer = ( void* ) pxList;
    ( pxList->uxNumberOfItems )++;
 800145a:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pvContainer = ( void* ) pxList;
 800145c:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 800145e:	3301      	adds	r3, #1
 8001460:	6003      	str	r3, [r0, #0]
}
 8001462:	4770      	bx	lr

08001464 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t* const pxList, ListItem_t* const pxNewListItem )
{
 8001464:	b530      	push	{r4, r5, lr}
    ListItem_t* pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001466:	680c      	ldr	r4, [r1, #0]
    new list item should be placed after it.  This ensures that TCB's which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if ( xValueOfInsertion == portMAX_DELAY )
 8001468:	1c63      	adds	r3, r4, #1
 800146a:	d10a      	bne.n	8001482 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800146c:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001472:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001474:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8001476:	6059      	str	r1, [r3, #4]
    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pvContainer = ( void* ) pxList;
    ( pxList->uxNumberOfItems )++;
 8001478:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pvContainer = ( void* ) pxList;
 800147a:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 800147c:	3301      	adds	r3, #1
 800147e:	6003      	str	r3, [r0, #0]
}
 8001480:	bd30      	pop	{r4, r5, pc}
        for ( pxIterator = ( ListItem_t* ) & ( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001482:	f100 0208 	add.w	r2, r0, #8
 8001486:	4613      	mov	r3, r2
 8001488:	6852      	ldr	r2, [r2, #4]
 800148a:	6815      	ldr	r5, [r2, #0]
 800148c:	42a5      	cmp	r5, r4
 800148e:	d9fa      	bls.n	8001486 <vListInsert+0x22>
 8001490:	e7ed      	b.n	800146e <vListInsert+0xa>

08001492 <uxListRemove>:
UBaseType_t uxListRemove( ListItem_t* const pxItemToRemove )
{
    /* The list item knows which list it is in.  Obtain the list from the list
    item. */
    List_t* const pxList = ( List_t* ) pxItemToRemove->pvContainer;
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001492:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    List_t* const pxList = ( List_t* ) pxItemToRemove->pvContainer;
 8001496:	6903      	ldr	r3, [r0, #16]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001498:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800149a:	6051      	str	r1, [r2, #4]
    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if ( pxList->pxIndex == pxItemToRemove )
 800149c:	6859      	ldr	r1, [r3, #4]
 800149e:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014a0:	bf08      	it	eq
 80014a2:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pvContainer = NULL;
 80014a4:	2200      	movs	r2, #0
 80014a6:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	3801      	subs	r0, #1
 80014ac:	6018      	str	r0, [r3, #0]
    return pxList->uxNumberOfItems;
}
 80014ae:	4770      	bx	lr

080014b0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t* const pxQueue, const void* pvItemToQueue, const BaseType_t xPosition )
{
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	4615      	mov	r5, r2
    BaseType_t xReturn = pdFALSE;

    if ( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80014b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80014b6:	4604      	mov	r4, r0
    if ( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80014b8:	b96a      	cbnz	r2, 80014d6 <prvCopyDataToQueue+0x26>
    {
#if ( configUSE_MUTEXES == 1 )
        {
            if ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80014ba:	6806      	ldr	r6, [r0, #0]
 80014bc:	b10e      	cbz	r6, 80014c2 <prvCopyDataToQueue+0x12>
    BaseType_t xReturn = pdFALSE;
 80014be:	2500      	movs	r5, #0
 80014c0:	e004      	b.n	80014cc <prvCopyDataToQueue+0x1c>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( ( void* ) pxQueue->pxMutexHolder );
 80014c2:	6840      	ldr	r0, [r0, #4]
 80014c4:	f001 faf6 	bl	8002ab4 <xTaskPriorityDisinherit>
                pxQueue->pxMutexHolder = NULL;
 80014c8:	6066      	str	r6, [r4, #4]
                xReturn = xTaskPriorityDisinherit( ( void* ) pxQueue->pxMutexHolder );
 80014ca:	4605      	mov	r5, r0
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    ++( pxQueue->uxMessagesWaiting );
 80014cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014ce:	3301      	adds	r3, #1
 80014d0:	63a3      	str	r3, [r4, #56]	; 0x38
    return xReturn;
}
 80014d2:	4628      	mov	r0, r5
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
    else if ( xPosition == queueSEND_TO_BACK )
 80014d6:	b965      	cbnz	r5, 80014f2 <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void* ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );  /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80014d8:	6880      	ldr	r0, [r0, #8]
 80014da:	f003 f843 	bl	8004564 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80014de:	68a3      	ldr	r3, [r4, #8]
 80014e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014e2:	4413      	add	r3, r2
        if ( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014e4:	6862      	ldr	r2, [r4, #4]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80014e6:	60a3      	str	r3, [r4, #8]
        if ( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d3e8      	bcc.n	80014be <prvCopyDataToQueue+0xe>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	60a3      	str	r3, [r4, #8]
 80014f0:	e7ec      	b.n	80014cc <prvCopyDataToQueue+0x1c>
        ( void ) memcpy( ( void* ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );  /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014f2:	68c0      	ldr	r0, [r0, #12]
 80014f4:	f003 f836 	bl	8004564 <memcpy>
        pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80014f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014fa:	68e3      	ldr	r3, [r4, #12]
 80014fc:	4251      	negs	r1, r2
 80014fe:	1a9b      	subs	r3, r3, r2
        if ( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001500:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001502:	60e3      	str	r3, [r4, #12]
        if ( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001504:	4293      	cmp	r3, r2
            pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001506:	bf3e      	ittt	cc
 8001508:	6863      	ldrcc	r3, [r4, #4]
 800150a:	185b      	addcc	r3, r3, r1
 800150c:	60e3      	strcc	r3, [r4, #12]
        if ( xPosition == queueOVERWRITE )
 800150e:	2d02      	cmp	r5, #2
 8001510:	d1d5      	bne.n	80014be <prvCopyDataToQueue+0xe>
            if ( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0d2      	beq.n	80014be <prvCopyDataToQueue+0xe>
                --( pxQueue->uxMessagesWaiting );
 8001518:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800151a:	3b01      	subs	r3, #1
 800151c:	63a3      	str	r3, [r4, #56]	; 0x38
 800151e:	e7ce      	b.n	80014be <prvCopyDataToQueue+0xe>

08001520 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t* const pxQueue, void* const pvBuffer )
{
 8001520:	4603      	mov	r3, r0
 8001522:	b410      	push	{r4}
    if ( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001526:	4608      	mov	r0, r1
    if ( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001528:	b16a      	cbz	r2, 8001546 <prvCopyDataFromQueue+0x26>
    {
        pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800152a:	68dc      	ldr	r4, [r3, #12]

        if ( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800152c:	6859      	ldr	r1, [r3, #4]
        pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800152e:	4414      	add	r4, r2
        if ( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001530:	428c      	cmp	r4, r1
        {
            pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001532:	bf28      	it	cs
 8001534:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001536:	60dc      	str	r4, [r3, #12]
            pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001538:	bf28      	it	cs
 800153a:	60d9      	strcs	r1, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void* ) pvBuffer, ( void* ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize );   /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800153c:	68d9      	ldr	r1, [r3, #12]
    }
}
 800153e:	f85d 4b04 	ldr.w	r4, [sp], #4
        ( void ) memcpy( ( void* ) pvBuffer, ( void* ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize );   /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001542:	f003 b80f 	b.w	8004564 <memcpy>
}
 8001546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800154a:	4770      	bx	lr

0800154c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t* const pxQueue )
{
 800154c:	b538      	push	{r3, r4, r5, lr}
 800154e:	4604      	mov	r4, r0
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
    /* The lock counts contains the number of extra data items placed or
    removed from the queue while the queue was locked.  When a queue is
    locked items can be added or removed, but the event lists cannot be
    updated. */
    taskENTER_CRITICAL();
 8001550:	f001 fb98 	bl	8002c84 <vPortEnterCritical>
            {
                /* Tasks that are removed from the event list will get added to
                the pending ready list as the scheduler is still suspended. */
                if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001554:	f104 0524 	add.w	r5, r4, #36	; 0x24
        while ( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001558:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800155a:	2b00      	cmp	r3, #0
 800155c:	dc12      	bgt.n	8001584 <prvUnlockQueue+0x38>
            }
#endif /* configUSE_QUEUE_SETS */
            --( pxQueue->xTxLock );
        }

        pxQueue->xTxLock = queueUNLOCKED;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	64a3      	str	r3, [r4, #72]	; 0x48
    }
    taskEXIT_CRITICAL();
 8001564:	f001 fbae 	bl	8002cc4 <vPortExitCritical>
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001568:	f001 fb8c 	bl	8002c84 <vPortEnterCritical>
    {
        while ( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
        {
            if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800156c:	f104 0510 	add.w	r5, r4, #16
        while ( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001570:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001572:	2b00      	cmp	r3, #0
 8001574:	dc13      	bgt.n	800159e <prvUnlockQueue+0x52>
            {
                break;
            }
        }

        pxQueue->xRxLock = queueUNLOCKED;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	6463      	str	r3, [r4, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
}
 800157c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    taskEXIT_CRITICAL();
 8001580:	f001 bba0 	b.w	8002cc4 <vPortExitCritical>
                if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0e9      	beq.n	800155e <prvUnlockQueue+0x12>
                    if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800158a:	4628      	mov	r0, r5
 800158c:	f001 f948 	bl	8002820 <xTaskRemoveFromEventList>
 8001590:	b108      	cbz	r0, 8001596 <prvUnlockQueue+0x4a>
                        vTaskMissedYield();
 8001592:	f001 f9dd 	bl	8002950 <vTaskMissedYield>
            --( pxQueue->xTxLock );
 8001596:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001598:	3b01      	subs	r3, #1
 800159a:	64a3      	str	r3, [r4, #72]	; 0x48
 800159c:	e7dc      	b.n	8001558 <prvUnlockQueue+0xc>
            if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800159e:	6923      	ldr	r3, [r4, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0e8      	beq.n	8001576 <prvUnlockQueue+0x2a>
                if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015a4:	4628      	mov	r0, r5
 80015a6:	f001 f93b 	bl	8002820 <xTaskRemoveFromEventList>
 80015aa:	b108      	cbz	r0, 80015b0 <prvUnlockQueue+0x64>
                    vTaskMissedYield();
 80015ac:	f001 f9d0 	bl	8002950 <vTaskMissedYield>
                --( pxQueue->xRxLock );
 80015b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6463      	str	r3, [r4, #68]	; 0x44
 80015b6:	e7db      	b.n	8001570 <prvUnlockQueue+0x24>

080015b8 <xQueueGenericSend>:
{
 80015b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015bc:	b085      	sub	sp, #20
 80015be:	460f      	mov	r7, r1
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	461d      	mov	r5, r3
    configASSERT( pxQueue );
 80015c4:	4604      	mov	r4, r0
 80015c6:	b940      	cbnz	r0, 80015da <xQueueGenericSend+0x22>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;
    __asm volatile
 80015c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015cc:	f383 8811 	msr	BASEPRI, r3
 80015d0:	f3bf 8f6f 	isb	sy
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	e7fe      	b.n	80015d8 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015da:	b951      	cbnz	r1, 80015f2 <xQueueGenericSend+0x3a>
 80015dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015de:	b143      	cbz	r3, 80015f2 <xQueueGenericSend+0x3a>
 80015e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	e7fe      	b.n	80015f0 <xQueueGenericSend+0x38>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80015f2:	2d02      	cmp	r5, #2
 80015f4:	d10b      	bne.n	800160e <xQueueGenericSend+0x56>
 80015f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d008      	beq.n	800160e <xQueueGenericSend+0x56>
 80015fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001600:	f383 8811 	msr	BASEPRI, r3
 8001604:	f3bf 8f6f 	isb	sy
 8001608:	f3bf 8f4f 	dsb	sy
 800160c:	e7fe      	b.n	800160c <xQueueGenericSend+0x54>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800160e:	f001 f9c3 	bl	8002998 <xTaskGetSchedulerState>
 8001612:	4606      	mov	r6, r0
 8001614:	b950      	cbnz	r0, 800162c <xQueueGenericSend+0x74>
 8001616:	9b01      	ldr	r3, [sp, #4]
 8001618:	b14b      	cbz	r3, 800162e <xQueueGenericSend+0x76>
 800161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	e7fe      	b.n	800162a <xQueueGenericSend+0x72>
 800162c:	2600      	movs	r6, #0
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800162e:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8001858 <xQueueGenericSend+0x2a0>
 8001632:	f8df 9228 	ldr.w	r9, [pc, #552]	; 800185c <xQueueGenericSend+0x2a4>
 8001636:	e09f      	b.n	8001778 <xQueueGenericSend+0x1c0>
                traceQUEUE_SEND( pxQueue );
 8001638:	2625      	movs	r6, #37	; 0x25
 800163a:	e0c0      	b.n	80017be <xQueueGenericSend+0x206>
                    else if ( xYieldRequired != pdFALSE )
 800163c:	2800      	cmp	r0, #0
 800163e:	f040 80f5 	bne.w	800182c <xQueueGenericSend+0x274>
                taskEXIT_CRITICAL();
 8001642:	f001 fb3f 	bl	8002cc4 <vPortExitCritical>
                return pdPASS;
 8001646:	2001      	movs	r0, #1
}
 8001648:	b005      	add	sp, #20
 800164a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ( xTicksToWait == ( TickType_t ) 0 )
 800164e:	9b01      	ldr	r3, [sp, #4]
 8001650:	bb43      	cbnz	r3, 80016a4 <xQueueGenericSend+0xec>
                    taskEXIT_CRITICAL();
 8001652:	f001 fb37 	bl	8002cc4 <vPortExitCritical>
            traceQUEUE_SEND_FAILED( pxQueue );
 8001656:	f002 f98a 	bl	800396e <prvTraceGetCurrentTaskHandle>
 800165a:	4e7f      	ldr	r6, [pc, #508]	; (8001858 <xQueueGenericSend+0x2a0>)
 800165c:	f002 f944 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001660:	8833      	ldrh	r3, [r6, #0]
 8001662:	4218      	tst	r0, r3
 8001664:	d01c      	beq.n	80016a0 <xQueueGenericSend+0xe8>
 8001666:	4620      	mov	r0, r4
 8001668:	f002 f962 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 800166c:	8833      	ldrh	r3, [r6, #0]
 800166e:	4218      	tst	r0, r3
 8001670:	d016      	beq.n	80016a0 <xQueueGenericSend+0xe8>
 8001672:	4e7a      	ldr	r6, [pc, #488]	; (800185c <xQueueGenericSend+0x2a4>)
 8001674:	2d00      	cmp	r5, #0
 8001676:	f040 80ec 	bne.w	8001852 <xQueueGenericSend+0x29a>
 800167a:	4620      	mov	r0, r4
 800167c:	f002 f92d 	bl	80038da <prvTraceGetQueueType>
 8001680:	5c35      	ldrb	r5, [r6, r0]
 8001682:	3548      	adds	r5, #72	; 0x48
 8001684:	b2ed      	uxtb	r5, r5
 8001686:	4620      	mov	r0, r4
 8001688:	f002 f927 	bl	80038da <prvTraceGetQueueType>
 800168c:	5c31      	ldrb	r1, [r6, r0]
 800168e:	9100      	str	r1, [sp, #0]
 8001690:	4620      	mov	r0, r4
 8001692:	f002 f948 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001696:	9900      	ldr	r1, [sp, #0]
 8001698:	b2c2      	uxtb	r2, r0
 800169a:	4628      	mov	r0, r5
 800169c:	f002 fda2 	bl	80041e4 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 80016a0:	2000      	movs	r0, #0
 80016a2:	e7d1      	b.n	8001648 <xQueueGenericSend+0x90>
                else if ( xEntryTimeSet == pdFALSE )
 80016a4:	b916      	cbnz	r6, 80016ac <xQueueGenericSend+0xf4>
                    vTaskSetTimeOutState( &xTimeOut );
 80016a6:	a802      	add	r0, sp, #8
 80016a8:	f001 f906 	bl	80028b8 <vTaskSetTimeOutState>
        taskEXIT_CRITICAL();
 80016ac:	f001 fb0a 	bl	8002cc4 <vPortExitCritical>
        vTaskSuspendAll();
 80016b0:	f000 fe02 	bl	80022b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80016b4:	f001 fae6 	bl	8002c84 <vPortEnterCritical>
 80016b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ba:	3301      	adds	r3, #1
 80016bc:	bf04      	itt	eq
 80016be:	2300      	moveq	r3, #0
 80016c0:	6463      	streq	r3, [r4, #68]	; 0x44
 80016c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80016c4:	3301      	adds	r3, #1
 80016c6:	bf04      	itt	eq
 80016c8:	2300      	moveq	r3, #0
 80016ca:	64a3      	streq	r3, [r4, #72]	; 0x48
 80016cc:	f001 fafa 	bl	8002cc4 <vPortExitCritical>
        if ( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016d0:	a901      	add	r1, sp, #4
 80016d2:	a802      	add	r0, sp, #8
 80016d4:	f001 f904 	bl	80028e0 <xTaskCheckForTimeOut>
 80016d8:	2800      	cmp	r0, #0
 80016da:	f040 80b4 	bne.w	8001846 <xQueueGenericSend+0x28e>
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t* pxQueue )
{
    BaseType_t xReturn;
    taskENTER_CRITICAL();
 80016de:	f001 fad1 	bl	8002c84 <vPortEnterCritical>
    {
        if ( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80016e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80016e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d13e      	bne.n	8001768 <xQueueGenericSend+0x1b0>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80016ea:	f001 faeb 	bl	8002cc4 <vPortExitCritical>
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80016ee:	f002 f93e 	bl	800396e <prvTraceGetCurrentTaskHandle>
 80016f2:	f002 f8f9 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80016f6:	f8b8 3000 	ldrh.w	r3, [r8]
 80016fa:	4218      	tst	r0, r3
 80016fc:	d01e      	beq.n	800173c <xQueueGenericSend+0x184>
 80016fe:	4620      	mov	r0, r4
 8001700:	f002 f916 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001704:	f8b8 3000 	ldrh.w	r3, [r8]
 8001708:	4218      	tst	r0, r3
 800170a:	d017      	beq.n	800173c <xQueueGenericSend+0x184>
 800170c:	2d00      	cmp	r5, #0
 800170e:	f040 8098 	bne.w	8001842 <xQueueGenericSend+0x28a>
 8001712:	4620      	mov	r0, r4
 8001714:	f002 f8e1 	bl	80038da <prvTraceGetQueueType>
 8001718:	f819 6000 	ldrb.w	r6, [r9, r0]
 800171c:	3670      	adds	r6, #112	; 0x70
 800171e:	b2f6      	uxtb	r6, r6
 8001720:	4620      	mov	r0, r4
 8001722:	f002 f8da 	bl	80038da <prvTraceGetQueueType>
 8001726:	f819 1000 	ldrb.w	r1, [r9, r0]
 800172a:	9100      	str	r1, [sp, #0]
 800172c:	4620      	mov	r0, r4
 800172e:	f002 f8fa 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001732:	9900      	ldr	r1, [sp, #0]
 8001734:	b2c2      	uxtb	r2, r0
 8001736:	4630      	mov	r0, r6
 8001738:	f002 fd54 	bl	80041e4 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800173c:	9901      	ldr	r1, [sp, #4]
 800173e:	f104 0010 	add.w	r0, r4, #16
 8001742:	f001 f83b 	bl	80027bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff ff00 	bl	800154c <prvUnlockQueue>
                if ( xTaskResumeAll() == pdFALSE )
 800174c:	f000 fe6a 	bl	8002424 <xTaskResumeAll>
 8001750:	b988      	cbnz	r0, 8001776 <xQueueGenericSend+0x1be>
                    portYIELD_WITHIN_API();
 8001752:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800175a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800175e:	f3bf 8f4f 	dsb	sy
 8001762:	f3bf 8f6f 	isb	sy
 8001766:	e006      	b.n	8001776 <xQueueGenericSend+0x1be>
    taskEXIT_CRITICAL();
 8001768:	f001 faac 	bl	8002cc4 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff feed 	bl	800154c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001772:	f000 fe57 	bl	8002424 <xTaskResumeAll>
 8001776:	2601      	movs	r6, #1
        taskENTER_CRITICAL();
 8001778:	f001 fa84 	bl	8002c84 <vPortEnterCritical>
            if ( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800177c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800177e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001780:	429a      	cmp	r2, r3
 8001782:	d302      	bcc.n	800178a <xQueueGenericSend+0x1d2>
 8001784:	2d02      	cmp	r5, #2
 8001786:	f47f af62 	bne.w	800164e <xQueueGenericSend+0x96>
                traceQUEUE_SEND( pxQueue );
 800178a:	f002 f8f0 	bl	800396e <prvTraceGetCurrentTaskHandle>
 800178e:	4e32      	ldr	r6, [pc, #200]	; (8001858 <xQueueGenericSend+0x2a0>)
 8001790:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800185c <xQueueGenericSend+0x2a4>
 8001794:	f002 f8a8 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001798:	8833      	ldrh	r3, [r6, #0]
 800179a:	4218      	tst	r0, r3
 800179c:	d01d      	beq.n	80017da <xQueueGenericSend+0x222>
 800179e:	4620      	mov	r0, r4
 80017a0:	f002 f8c6 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 80017a4:	8833      	ldrh	r3, [r6, #0]
 80017a6:	4218      	tst	r0, r3
 80017a8:	d017      	beq.n	80017da <xQueueGenericSend+0x222>
 80017aa:	2d00      	cmp	r5, #0
 80017ac:	f47f af44 	bne.w	8001638 <xQueueGenericSend+0x80>
 80017b0:	4620      	mov	r0, r4
 80017b2:	f002 f892 	bl	80038da <prvTraceGetQueueType>
 80017b6:	f818 6000 	ldrb.w	r6, [r8, r0]
 80017ba:	3620      	adds	r6, #32
 80017bc:	b2f6      	uxtb	r6, r6
 80017be:	4620      	mov	r0, r4
 80017c0:	f002 f88b 	bl	80038da <prvTraceGetQueueType>
 80017c4:	f818 1000 	ldrb.w	r1, [r8, r0]
 80017c8:	9100      	str	r1, [sp, #0]
 80017ca:	4620      	mov	r0, r4
 80017cc:	f002 f8ab 	bl	8003926 <prvTraceGetQueueNumberLow16>
 80017d0:	9900      	ldr	r1, [sp, #0]
 80017d2:	b2c2      	uxtb	r2, r0
 80017d4:	4630      	mov	r0, r6
 80017d6:	f002 fd05 	bl	80041e4 <prvTraceStoreKernelCall>
 80017da:	4620      	mov	r0, r4
 80017dc:	f002 f87d 	bl	80038da <prvTraceGetQueueType>
 80017e0:	f818 6000 	ldrb.w	r6, [r8, r0]
 80017e4:	4620      	mov	r0, r4
 80017e6:	f002 f89e 	bl	8003926 <prvTraceGetQueueNumberLow16>
 80017ea:	b2c1      	uxtb	r1, r0
 80017ec:	4620      	mov	r0, r4
 80017ee:	9100      	str	r1, [sp, #0]
 80017f0:	f002 f873 	bl	80038da <prvTraceGetQueueType>
 80017f4:	f818 3000 	ldrb.w	r3, [r8, r0]
 80017f8:	9900      	ldr	r1, [sp, #0]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	bf1d      	ittte	ne
 80017fe:	6ba2      	ldrne	r2, [r4, #56]	; 0x38
 8001800:	3201      	addne	r2, #1
 8001802:	b2d2      	uxtbne	r2, r2
 8001804:	2200      	moveq	r2, #0
 8001806:	4630      	mov	r0, r6
 8001808:	f002 fa68 	bl	8003cdc <prvTraceSetObjectState>
                xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800180c:	462a      	mov	r2, r5
 800180e:	4639      	mov	r1, r7
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fe4d 	bl	80014b0 <prvCopyDataToQueue>
                    if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001818:	2b00      	cmp	r3, #0
 800181a:	f43f af0f 	beq.w	800163c <xQueueGenericSend+0x84>
                        if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800181e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001822:	f000 fffd 	bl	8002820 <xTaskRemoveFromEventList>
 8001826:	2801      	cmp	r0, #1
 8001828:	f47f af0b 	bne.w	8001642 <xQueueGenericSend+0x8a>
                        queueYIELD_IF_USING_PREEMPTION();
 800182c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001834:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001838:	f3bf 8f4f 	dsb	sy
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	e6ff      	b.n	8001642 <xQueueGenericSend+0x8a>
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8001842:	2675      	movs	r6, #117	; 0x75
 8001844:	e76c      	b.n	8001720 <xQueueGenericSend+0x168>
            prvUnlockQueue( pxQueue );
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fe80 	bl	800154c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800184c:	f000 fdea 	bl	8002424 <xTaskResumeAll>
 8001850:	e701      	b.n	8001656 <xQueueGenericSend+0x9e>
            traceQUEUE_SEND_FAILED( pxQueue );
 8001852:	254d      	movs	r5, #77	; 0x4d
 8001854:	e717      	b.n	8001686 <xQueueGenericSend+0xce>
 8001856:	bf00      	nop
 8001858:	20003f00 	.word	0x20003f00
 800185c:	20000008 	.word	0x20000008

08001860 <xQueueCreateMutex>:
{
 8001860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001862:	4605      	mov	r5, r0
    pxNewQueue = ( Queue_t* ) pvPortMalloc( sizeof( Queue_t ) );
 8001864:	2054      	movs	r0, #84	; 0x54
 8001866:	f001 fb5b 	bl	8002f20 <pvPortMalloc>
    if ( pxNewQueue != NULL )
 800186a:	4e3c      	ldr	r6, [pc, #240]	; (800195c <xQueueCreateMutex+0xfc>)
 800186c:	4604      	mov	r4, r0
 800186e:	2800      	cmp	r0, #0
 8001870:	d065      	beq.n	800193e <xQueueCreateMutex+0xde>
        pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8001872:	2201      	movs	r2, #1
        pxNewQueue->pxMutexHolder = NULL;
 8001874:	2300      	movs	r3, #0
        pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 8001876:	e9c0 230f 	strd	r2, r3, [r0, #60]	; 0x3c
        pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800187a:	6383      	str	r3, [r0, #56]	; 0x38
        pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800187c:	e9c0 3300 	strd	r3, r3, [r0]
        pxNewQueue->u.pcReadFrom = NULL;
 8001880:	e9c0 3302 	strd	r3, r3, [r0, #8]
        pxNewQueue->xRxLock = queueUNLOCKED;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	6443      	str	r3, [r0, #68]	; 0x44
            pxNewQueue->ucQueueType = ucQueueType;
 800188a:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
        pxNewQueue->xTxLock = queueUNLOCKED;
 800188e:	6483      	str	r3, [r0, #72]	; 0x48
        vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8001890:	3010      	adds	r0, #16
 8001892:	f7ff fdcd 	bl	8001430 <vListInitialise>
        vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8001896:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800189a:	f7ff fdc9 	bl	8001430 <vListInitialise>
        traceCREATE_MUTEX( pxNewQueue );
 800189e:	4620      	mov	r0, r4
 80018a0:	f002 f81b 	bl	80038da <prvTraceGetQueueType>
 80018a4:	4d2e      	ldr	r5, [pc, #184]	; (8001960 <xQueueCreateMutex+0x100>)
 80018a6:	5c28      	ldrb	r0, [r5, r0]
 80018a8:	f002 fa4e 	bl	8003d48 <prvTraceGetObjectHandle>
 80018ac:	b281      	uxth	r1, r0
 80018ae:	4620      	mov	r0, r4
 80018b0:	f002 f843 	bl	800393a <prvTraceSetQueueNumberLow16>
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <xQueueCreateMutex+0x104>)
 80018b6:	4620      	mov	r0, r4
 80018b8:	8819      	ldrh	r1, [r3, #0]
 80018ba:	f002 f84b 	bl	8003954 <prvTraceSetQueueNumberHigh16>
 80018be:	4620      	mov	r0, r4
 80018c0:	f002 f80b 	bl	80038da <prvTraceGetQueueType>
 80018c4:	5c2f      	ldrb	r7, [r5, r0]
 80018c6:	4620      	mov	r0, r4
 80018c8:	f002 f82d 	bl	8003926 <prvTraceGetQueueNumberLow16>
 80018cc:	b2c1      	uxtb	r1, r0
 80018ce:	4638      	mov	r0, r7
 80018d0:	f002 fa2a 	bl	8003d28 <prvMarkObjectAsUsed>
 80018d4:	f002 f84b 	bl	800396e <prvTraceGetCurrentTaskHandle>
 80018d8:	f002 f806 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80018dc:	8833      	ldrh	r3, [r6, #0]
 80018de:	4218      	tst	r0, r3
 80018e0:	d018      	beq.n	8001914 <xQueueCreateMutex+0xb4>
 80018e2:	4620      	mov	r0, r4
 80018e4:	f002 f824 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 80018e8:	8833      	ldrh	r3, [r6, #0]
 80018ea:	4218      	tst	r0, r3
 80018ec:	d012      	beq.n	8001914 <xQueueCreateMutex+0xb4>
 80018ee:	4620      	mov	r0, r4
 80018f0:	f001 fff3 	bl	80038da <prvTraceGetQueueType>
 80018f4:	5c2e      	ldrb	r6, [r5, r0]
 80018f6:	4620      	mov	r0, r4
 80018f8:	f001 ffef 	bl	80038da <prvTraceGetQueueType>
 80018fc:	5c29      	ldrb	r1, [r5, r0]
 80018fe:	9101      	str	r1, [sp, #4]
 8001900:	4620      	mov	r0, r4
 8001902:	f002 f810 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001906:	3618      	adds	r6, #24
 8001908:	b2f6      	uxtb	r6, r6
 800190a:	b2c2      	uxtb	r2, r0
 800190c:	9901      	ldr	r1, [sp, #4]
 800190e:	4630      	mov	r0, r6
 8001910:	f002 fc68 	bl	80041e4 <prvTraceStoreKernelCall>
 8001914:	4620      	mov	r0, r4
 8001916:	f001 ffe0 	bl	80038da <prvTraceGetQueueType>
 800191a:	5c2d      	ldrb	r5, [r5, r0]
 800191c:	4620      	mov	r0, r4
 800191e:	f002 f802 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001922:	2200      	movs	r2, #0
 8001924:	b2c1      	uxtb	r1, r0
 8001926:	4628      	mov	r0, r5
 8001928:	f002 f9d8 	bl	8003cdc <prvTraceSetObjectState>
        ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800192c:	2300      	movs	r3, #0
 800192e:	461a      	mov	r2, r3
 8001930:	4619      	mov	r1, r3
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fe40 	bl	80015b8 <xQueueGenericSend>
}
 8001938:	4620      	mov	r0, r4
 800193a:	b003      	add	sp, #12
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        traceCREATE_MUTEX_FAILED();
 800193e:	f002 f816 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001942:	f001 ffd1 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001946:	8833      	ldrh	r3, [r6, #0]
 8001948:	4218      	tst	r0, r3
 800194a:	d0f5      	beq.n	8001938 <xQueueCreateMutex+0xd8>
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <xQueueCreateMutex+0x100>)
 800194e:	7858      	ldrb	r0, [r3, #1]
 8001950:	3040      	adds	r0, #64	; 0x40
 8001952:	4621      	mov	r1, r4
 8001954:	b2c0      	uxtb	r0, r0
 8001956:	f002 fcb3 	bl	80042c0 <prvTraceStoreKernelCallWithNumericParamOnly>
    return pxNewQueue;
 800195a:	e7ed      	b.n	8001938 <xQueueCreateMutex+0xd8>
 800195c:	20003f00 	.word	0x20003f00
 8001960:	20000008 	.word	0x20000008
 8001964:	20003f02 	.word	0x20003f02

08001968 <MyWrapper_xQueueGiveFromISR>:
{
 8001968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800196c:	460f      	mov	r7, r1
 800196e:	4615      	mov	r5, r2
    configASSERT( pxQueue );
 8001970:	4604      	mov	r4, r0
 8001972:	b940      	cbnz	r0, 8001986 <MyWrapper_xQueueGiveFromISR+0x1e>
 8001974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001978:	f383 8811 	msr	BASEPRI, r3
 800197c:	f3bf 8f6f 	isb	sy
 8001980:	f3bf 8f4f 	dsb	sy
 8001984:	e7fe      	b.n	8001984 <MyWrapper_xQueueGiveFromISR+0x1c>
    configASSERT( pxQueue->uxItemSize == 0 );
 8001986:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001988:	b143      	cbz	r3, 800199c <MyWrapper_xQueueGiveFromISR+0x34>
 800198a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198e:	f383 8811 	msr	BASEPRI, r3
 8001992:	f3bf 8f6f 	isb	sy
 8001996:	f3bf 8f4f 	dsb	sy
 800199a:	e7fe      	b.n	800199a <MyWrapper_xQueueGiveFromISR+0x32>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800199c:	6803      	ldr	r3, [r0, #0]
 800199e:	b953      	cbnz	r3, 80019b6 <MyWrapper_xQueueGiveFromISR+0x4e>
 80019a0:	6843      	ldr	r3, [r0, #4]
 80019a2:	b143      	cbz	r3, 80019b6 <MyWrapper_xQueueGiveFromISR+0x4e>
 80019a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a8:	f383 8811 	msr	BASEPRI, r3
 80019ac:	f3bf 8f6f 	isb	sy
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	e7fe      	b.n	80019b4 <MyWrapper_xQueueGiveFromISR+0x4c>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80019b6:	f001 fa67 	bl	8002e88 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
    __asm volatile
 80019ba:	f3ef 8611 	mrs	r6, BASEPRI
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
        if ( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80019ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019d2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001ab8 <MyWrapper_xQueueGiveFromISR+0x150>
 80019d6:	429a      	cmp	r2, r3
            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80019d8:	4620      	mov	r0, r4
        if ( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80019da:	d24b      	bcs.n	8001a74 <MyWrapper_xQueueGiveFromISR+0x10c>
            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80019dc:	f001 ffa8 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 80019e0:	f8b8 3000 	ldrh.w	r3, [r8]
 80019e4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001ab4 <MyWrapper_xQueueGiveFromISR+0x14c>
 80019e8:	4218      	tst	r0, r3
 80019ea:	d015      	beq.n	8001a18 <MyWrapper_xQueueGiveFromISR+0xb0>
 80019ec:	bb6d      	cbnz	r5, 8001a4a <MyWrapper_xQueueGiveFromISR+0xe2>
 80019ee:	4620      	mov	r0, r4
 80019f0:	f001 ff73 	bl	80038da <prvTraceGetQueueType>
 80019f4:	f818 5000 	ldrb.w	r5, [r8, r0]
 80019f8:	3530      	adds	r5, #48	; 0x30
 80019fa:	b2ed      	uxtb	r5, r5
 80019fc:	4620      	mov	r0, r4
 80019fe:	f001 ff6c 	bl	80038da <prvTraceGetQueueType>
 8001a02:	f818 1000 	ldrb.w	r1, [r8, r0]
 8001a06:	9101      	str	r1, [sp, #4]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f001 ff8c 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001a0e:	9901      	ldr	r1, [sp, #4]
 8001a10:	b2c2      	uxtb	r2, r0
 8001a12:	4628      	mov	r0, r5
 8001a14:	f002 fbe6 	bl	80041e4 <prvTraceStoreKernelCall>
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f001 ff5e 	bl	80038da <prvTraceGetQueueType>
 8001a1e:	f818 5000 	ldrb.w	r5, [r8, r0]
 8001a22:	4620      	mov	r0, r4
 8001a24:	f001 ff7f 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001a28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a2a:	3201      	adds	r2, #1
 8001a2c:	b2c1      	uxtb	r1, r0
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	4628      	mov	r0, r5
 8001a32:	f002 f953 	bl	8003cdc <prvTraceSetObjectState>
            ++( pxQueue->uxMessagesWaiting );
 8001a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a38:	3301      	adds	r3, #1
 8001a3a:	63a3      	str	r3, [r4, #56]	; 0x38
            if ( pxQueue->xTxLock == queueUNLOCKED )
 8001a3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a3e:	3301      	adds	r3, #1
 8001a40:	d114      	bne.n	8001a6c <MyWrapper_xQueueGiveFromISR+0x104>
                    if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a44:	b91b      	cbnz	r3, 8001a4e <MyWrapper_xQueueGiveFromISR+0xe6>
            xReturn = pdPASS;
 8001a46:	2001      	movs	r0, #1
 8001a48:	e00b      	b.n	8001a62 <MyWrapper_xQueueGiveFromISR+0xfa>
            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001a4a:	2535      	movs	r5, #53	; 0x35
 8001a4c:	e7d6      	b.n	80019fc <MyWrapper_xQueueGiveFromISR+0x94>
                        if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a52:	f000 fee5 	bl	8002820 <xTaskRemoveFromEventList>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d0f5      	beq.n	8001a46 <MyWrapper_xQueueGiveFromISR+0xde>
                            if ( pxHigherPriorityTaskWoken != NULL )
 8001a5a:	2f00      	cmp	r7, #0
 8001a5c:	d0f3      	beq.n	8001a46 <MyWrapper_xQueueGiveFromISR+0xde>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8001a5e:	2001      	movs	r0, #1
 8001a60:	6038      	str	r0, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001a62:	f386 8811 	msr	BASEPRI, r6
}
 8001a66:	b002      	add	sp, #8
 8001a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ++( pxQueue->xTxLock );
 8001a6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a6e:	3301      	adds	r3, #1
 8001a70:	64a3      	str	r3, [r4, #72]	; 0x48
 8001a72:	e7e8      	b.n	8001a46 <MyWrapper_xQueueGiveFromISR+0xde>
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001a74:	f001 ff5c 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001a78:	f8b8 3000 	ldrh.w	r3, [r8]
 8001a7c:	4018      	ands	r0, r3
 8001a7e:	d0f0      	beq.n	8001a62 <MyWrapper_xQueueGiveFromISR+0xfa>
 8001a80:	4f0c      	ldr	r7, [pc, #48]	; (8001ab4 <MyWrapper_xQueueGiveFromISR+0x14c>)
 8001a82:	b9a5      	cbnz	r5, 8001aae <MyWrapper_xQueueGiveFromISR+0x146>
 8001a84:	4620      	mov	r0, r4
 8001a86:	f001 ff28 	bl	80038da <prvTraceGetQueueType>
 8001a8a:	5c3d      	ldrb	r5, [r7, r0]
 8001a8c:	3558      	adds	r5, #88	; 0x58
 8001a8e:	b2ed      	uxtb	r5, r5
 8001a90:	4620      	mov	r0, r4
 8001a92:	f001 ff22 	bl	80038da <prvTraceGetQueueType>
 8001a96:	5c39      	ldrb	r1, [r7, r0]
 8001a98:	9101      	str	r1, [sp, #4]
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f001 ff43 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001aa0:	9901      	ldr	r1, [sp, #4]
 8001aa2:	b2c2      	uxtb	r2, r0
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f002 fb9d 	bl	80041e4 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 8001aaa:	2000      	movs	r0, #0
 8001aac:	e7d9      	b.n	8001a62 <MyWrapper_xQueueGiveFromISR+0xfa>
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001aae:	255d      	movs	r5, #93	; 0x5d
 8001ab0:	e7ee      	b.n	8001a90 <MyWrapper_xQueueGiveFromISR+0x128>
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20003f00 	.word	0x20003f00

08001abc <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t* const pxHigherPriorityTaskWoken )
 8001abc:	2200      	movs	r2, #0
 8001abe:	f7ff bf53 	b.w	8001968 <MyWrapper_xQueueGiveFromISR>
	...

08001ac4 <xQueueGenericReceive>:
{
 8001ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac8:	4689      	mov	r9, r1
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	461d      	mov	r5, r3
    configASSERT( pxQueue );
 8001ace:	4604      	mov	r4, r0
 8001ad0:	b940      	cbnz	r0, 8001ae4 <xQueueGenericReceive+0x20>
    __asm volatile
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	e7fe      	b.n	8001ae2 <xQueueGenericReceive+0x1e>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ae4:	b951      	cbnz	r1, 8001afc <xQueueGenericReceive+0x38>
 8001ae6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ae8:	b143      	cbz	r3, 8001afc <xQueueGenericReceive+0x38>
 8001aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aee:	f383 8811 	msr	BASEPRI, r3
 8001af2:	f3bf 8f6f 	isb	sy
 8001af6:	f3bf 8f4f 	dsb	sy
 8001afa:	e7fe      	b.n	8001afa <xQueueGenericReceive+0x36>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001afc:	f000 ff4c 	bl	8002998 <xTaskGetSchedulerState>
 8001b00:	4606      	mov	r6, r0
 8001b02:	b950      	cbnz	r0, 8001b1a <xQueueGenericReceive+0x56>
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	b14b      	cbz	r3, 8001b1c <xQueueGenericReceive+0x58>
 8001b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	e7fe      	b.n	8001b18 <xQueueGenericReceive+0x54>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	4fb7      	ldr	r7, [pc, #732]	; (8001dfc <xQueueGenericReceive+0x338>)
 8001b1e:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8001e00 <xQueueGenericReceive+0x33c>
 8001b22:	e0a7      	b.n	8001c74 <xQueueGenericReceive+0x1b0>
                    traceQUEUE_RECEIVE( pxQueue );
 8001b24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b26:	3a01      	subs	r2, #1
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	e0e6      	b.n	8001cfa <xQueueGenericReceive+0x236>
                    traceQUEUE_PEEK( pxQueue );
 8001b2c:	f001 ff1f 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001b30:	f001 feda 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001b34:	8833      	ldrh	r3, [r6, #0]
 8001b36:	4218      	tst	r0, r3
 8001b38:	d019      	beq.n	8001b6e <xQueueGenericReceive+0xaa>
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f001 fef8 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001b40:	8833      	ldrh	r3, [r6, #0]
 8001b42:	4218      	tst	r0, r3
 8001b44:	d013      	beq.n	8001b6e <xQueueGenericReceive+0xaa>
 8001b46:	4620      	mov	r0, r4
 8001b48:	f001 fec7 	bl	80038da <prvTraceGetQueueType>
 8001b4c:	4eac      	ldr	r6, [pc, #688]	; (8001e00 <xQueueGenericReceive+0x33c>)
 8001b4e:	5c35      	ldrb	r5, [r6, r0]
 8001b50:	4620      	mov	r0, r4
 8001b52:	f001 fec2 	bl	80038da <prvTraceGetQueueType>
 8001b56:	5c31      	ldrb	r1, [r6, r0]
 8001b58:	9100      	str	r1, [sp, #0]
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f001 fee3 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001b60:	3578      	adds	r5, #120	; 0x78
 8001b62:	b2ed      	uxtb	r5, r5
 8001b64:	b2c2      	uxtb	r2, r0
 8001b66:	9900      	ldr	r1, [sp, #0]
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f002 fb3b 	bl	80041e4 <prvTraceStoreKernelCall>
                    if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
                    pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001b70:	60e7      	str	r7, [r4, #12]
                    if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b72:	b133      	cbz	r3, 8001b82 <xQueueGenericReceive+0xbe>
                        if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b78:	f000 fe52 	bl	8002820 <xTaskRemoveFromEventList>
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	f040 80d3 	bne.w	8001d28 <xQueueGenericReceive+0x264>
                taskEXIT_CRITICAL();
 8001b82:	f001 f89f 	bl	8002cc4 <vPortExitCritical>
                return pdPASS;
 8001b86:	2501      	movs	r5, #1
}
 8001b88:	4628      	mov	r0, r5
 8001b8a:	b004      	add	sp, #16
 8001b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if ( xTicksToWait == ( TickType_t ) 0 )
 8001b90:	f8dd a004 	ldr.w	sl, [sp, #4]
 8001b94:	f1ba 0f00 	cmp.w	sl, #0
 8001b98:	d128      	bne.n	8001bec <xQueueGenericReceive+0x128>
                    taskEXIT_CRITICAL();
 8001b9a:	f001 f893 	bl	8002cc4 <vPortExitCritical>
            traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001b9e:	4e97      	ldr	r6, [pc, #604]	; (8001dfc <xQueueGenericReceive+0x338>)
 8001ba0:	2d00      	cmp	r5, #0
 8001ba2:	f000 812f 	beq.w	8001e04 <xQueueGenericReceive+0x340>
 8001ba6:	f001 fee2 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001baa:	f001 fe9d 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001bae:	8833      	ldrh	r3, [r6, #0]
 8001bb0:	4218      	tst	r0, r3
 8001bb2:	d019      	beq.n	8001be8 <xQueueGenericReceive+0x124>
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f001 febb 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001bba:	8833      	ldrh	r3, [r6, #0]
 8001bbc:	4218      	tst	r0, r3
 8001bbe:	d013      	beq.n	8001be8 <xQueueGenericReceive+0x124>
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f001 fe8a 	bl	80038da <prvTraceGetQueueType>
 8001bc6:	4e8e      	ldr	r6, [pc, #568]	; (8001e00 <xQueueGenericReceive+0x33c>)
 8001bc8:	5c35      	ldrb	r5, [r6, r0]
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f001 fe85 	bl	80038da <prvTraceGetQueueType>
 8001bd0:	5c31      	ldrb	r1, [r6, r0]
 8001bd2:	9100      	str	r1, [sp, #0]
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f001 fea6 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001bda:	3d21      	subs	r5, #33	; 0x21
 8001bdc:	b2ed      	uxtb	r5, r5
 8001bde:	b2c2      	uxtb	r2, r0
 8001be0:	9900      	ldr	r1, [sp, #0]
 8001be2:	4628      	mov	r0, r5
 8001be4:	f002 fafe 	bl	80041e4 <prvTraceStoreKernelCall>
            return errQUEUE_EMPTY;
 8001be8:	2500      	movs	r5, #0
 8001bea:	e7cd      	b.n	8001b88 <xQueueGenericReceive+0xc4>
                else if ( xEntryTimeSet == pdFALSE )
 8001bec:	b916      	cbnz	r6, 8001bf4 <xQueueGenericReceive+0x130>
                    vTaskSetTimeOutState( &xTimeOut );
 8001bee:	a802      	add	r0, sp, #8
 8001bf0:	f000 fe62 	bl	80028b8 <vTaskSetTimeOutState>
        taskEXIT_CRITICAL();
 8001bf4:	f001 f866 	bl	8002cc4 <vPortExitCritical>
        vTaskSuspendAll();
 8001bf8:	f000 fb5e 	bl	80022b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001bfc:	f001 f842 	bl	8002c84 <vPortEnterCritical>
 8001c00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c02:	3301      	adds	r3, #1
 8001c04:	bf04      	itt	eq
 8001c06:	2300      	moveq	r3, #0
 8001c08:	6463      	streq	r3, [r4, #68]	; 0x44
 8001c0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	bf04      	itt	eq
 8001c10:	2300      	moveq	r3, #0
 8001c12:	64a3      	streq	r3, [r4, #72]	; 0x48
 8001c14:	f001 f856 	bl	8002cc4 <vPortExitCritical>
        if ( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c18:	a901      	add	r1, sp, #4
 8001c1a:	a802      	add	r0, sp, #8
 8001c1c:	f000 fe60 	bl	80028e0 <xTaskCheckForTimeOut>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	f040 80e4 	bne.w	8001dee <xQueueGenericReceive+0x32a>
    taskENTER_CRITICAL();
 8001c26:	f001 f82d 	bl	8002c84 <vPortEnterCritical>
        if ( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c2c:	b9d3      	cbnz	r3, 8001c64 <xQueueGenericReceive+0x1a0>
    taskEXIT_CRITICAL();
 8001c2e:	f001 f849 	bl	8002cc4 <vPortExitCritical>
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001c32:	2d00      	cmp	r5, #0
 8001c34:	f040 8083 	bne.w	8001d3e <xQueueGenericReceive+0x27a>
 8001c38:	f001 fe99 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001c3c:	f001 fe54 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001c40:	883b      	ldrh	r3, [r7, #0]
 8001c42:	4218      	tst	r0, r3
 8001c44:	f000 809d 	beq.w	8001d82 <xQueueGenericReceive+0x2be>
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f001 fe71 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001c4e:	883b      	ldrh	r3, [r7, #0]
 8001c50:	4218      	tst	r0, r3
 8001c52:	f000 8096 	beq.w	8001d82 <xQueueGenericReceive+0x2be>
 8001c56:	4620      	mov	r0, r4
 8001c58:	f001 fe3f 	bl	80038da <prvTraceGetQueueType>
 8001c5c:	f818 6000 	ldrb.w	r6, [r8, r0]
 8001c60:	3668      	adds	r6, #104	; 0x68
 8001c62:	e07f      	b.n	8001d64 <xQueueGenericReceive+0x2a0>
    taskEXIT_CRITICAL();
 8001c64:	f001 f82e 	bl	8002cc4 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fc6f 	bl	800154c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c6e:	f000 fbd9 	bl	8002424 <xTaskResumeAll>
 8001c72:	2601      	movs	r6, #1
        taskENTER_CRITICAL();
 8001c74:	f001 f806 	bl	8002c84 <vPortEnterCritical>
            if ( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d088      	beq.n	8001b90 <xQueueGenericReceive+0xcc>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c7e:	4649      	mov	r1, r9
 8001c80:	4620      	mov	r0, r4
                pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001c82:	68e7      	ldr	r7, [r4, #12]
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c84:	4e5d      	ldr	r6, [pc, #372]	; (8001dfc <xQueueGenericReceive+0x338>)
 8001c86:	f7ff fc4b 	bl	8001520 <prvCopyDataFromQueue>
                if ( xJustPeeking == pdFALSE )
 8001c8a:	2d00      	cmp	r5, #0
 8001c8c:	f47f af4e 	bne.w	8001b2c <xQueueGenericReceive+0x68>
                    traceQUEUE_RECEIVE( pxQueue );
 8001c90:	f001 fe6d 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001c94:	f001 fe28 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001c98:	8833      	ldrh	r3, [r6, #0]
 8001c9a:	4f59      	ldr	r7, [pc, #356]	; (8001e00 <xQueueGenericReceive+0x33c>)
 8001c9c:	4218      	tst	r0, r3
 8001c9e:	d018      	beq.n	8001cd2 <xQueueGenericReceive+0x20e>
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f001 fe45 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001ca6:	8833      	ldrh	r3, [r6, #0]
 8001ca8:	4218      	tst	r0, r3
 8001caa:	d012      	beq.n	8001cd2 <xQueueGenericReceive+0x20e>
 8001cac:	4620      	mov	r0, r4
 8001cae:	f001 fe14 	bl	80038da <prvTraceGetQueueType>
 8001cb2:	5c3d      	ldrb	r5, [r7, r0]
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f001 fe10 	bl	80038da <prvTraceGetQueueType>
 8001cba:	5c39      	ldrb	r1, [r7, r0]
 8001cbc:	9100      	str	r1, [sp, #0]
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f001 fe31 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001cc4:	3528      	adds	r5, #40	; 0x28
 8001cc6:	b2ed      	uxtb	r5, r5
 8001cc8:	b2c2      	uxtb	r2, r0
 8001cca:	9900      	ldr	r1, [sp, #0]
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f002 fa89 	bl	80041e4 <prvTraceStoreKernelCall>
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f001 fe01 	bl	80038da <prvTraceGetQueueType>
 8001cd8:	5c3e      	ldrb	r6, [r7, r0]
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f001 fe23 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001ce0:	b2c5      	uxtb	r5, r0
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f001 fdf9 	bl	80038da <prvTraceGetQueueType>
 8001ce8:	5c3b      	ldrb	r3, [r7, r0]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	f47f af1a 	bne.w	8001b24 <xQueueGenericReceive+0x60>
 8001cf0:	f001 fe3d 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001cf4:	f001 fdf3 	bl	80038de <prvTraceGetTaskNumberLow16>
 8001cf8:	b2c2      	uxtb	r2, r0
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f001 ffed 	bl	8003cdc <prvTraceSetObjectState>
                    --( pxQueue->uxMessagesWaiting );
 8001d02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d04:	3b01      	subs	r3, #1
 8001d06:	63a3      	str	r3, [r4, #56]	; 0x38
                        if ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	b913      	cbnz	r3, 8001d12 <xQueueGenericReceive+0x24e>
                            pxQueue->pxMutexHolder = ( int8_t* ) pvTaskIncrementMutexHeldCount();  /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001d0c:	f000 ff5a 	bl	8002bc4 <pvTaskIncrementMutexHeldCount>
 8001d10:	6060      	str	r0, [r4, #4]
                    if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d12:	6923      	ldr	r3, [r4, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f43f af34 	beq.w	8001b82 <xQueueGenericReceive+0xbe>
                        if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001d1a:	f104 0010 	add.w	r0, r4, #16
 8001d1e:	f000 fd7f 	bl	8002820 <xTaskRemoveFromEventList>
 8001d22:	2801      	cmp	r0, #1
 8001d24:	f47f af2d 	bne.w	8001b82 <xQueueGenericReceive+0xbe>
                            queueYIELD_IF_USING_PREEMPTION();
 8001d28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	e721      	b.n	8001b82 <xQueueGenericReceive+0xbe>
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001d3e:	f001 fe16 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001d42:	f001 fdd1 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001d46:	883b      	ldrh	r3, [r7, #0]
 8001d48:	4218      	tst	r0, r3
 8001d4a:	d01a      	beq.n	8001d82 <xQueueGenericReceive+0x2be>
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f001 fdef 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001d52:	883b      	ldrh	r3, [r7, #0]
 8001d54:	4218      	tst	r0, r3
 8001d56:	d014      	beq.n	8001d82 <xQueueGenericReceive+0x2be>
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f001 fdbe 	bl	80038da <prvTraceGetQueueType>
 8001d5e:	f818 6000 	ldrb.w	r6, [r8, r0]
 8001d62:	3e24      	subs	r6, #36	; 0x24
 8001d64:	4620      	mov	r0, r4
 8001d66:	f001 fdb8 	bl	80038da <prvTraceGetQueueType>
 8001d6a:	f818 1000 	ldrb.w	r1, [r8, r0]
 8001d6e:	9100      	str	r1, [sp, #0]
 8001d70:	4620      	mov	r0, r4
 8001d72:	f001 fdd8 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001d76:	b2f6      	uxtb	r6, r6
 8001d78:	b2c2      	uxtb	r2, r0
 8001d7a:	9900      	ldr	r1, [sp, #0]
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f002 fa31 	bl	80041e4 <prvTraceStoreKernelCall>
 8001d82:	4620      	mov	r0, r4
 8001d84:	f001 fda9 	bl	80038da <prvTraceGetQueueType>
 8001d88:	f818 3000 	ldrb.w	r3, [r8, r0]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d00d      	beq.n	8001dac <xQueueGenericReceive+0x2e8>
 8001d90:	f001 fded 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001d94:	f001 fda8 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001d98:	883b      	ldrh	r3, [r7, #0]
 8001d9a:	4218      	tst	r0, r3
 8001d9c:	d006      	beq.n	8001dac <xQueueGenericReceive+0x2e8>
 8001d9e:	f001 fde6 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001da2:	f001 fd9c 	bl	80038de <prvTraceGetTaskNumberLow16>
 8001da6:	b2c0      	uxtb	r0, r0
 8001da8:	f001 ffac 	bl	8003d04 <prvTraceSetTaskInstanceFinished>
                    if ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	b933      	cbnz	r3, 8001dbe <xQueueGenericReceive+0x2fa>
                        taskENTER_CRITICAL();
 8001db0:	f000 ff68 	bl	8002c84 <vPortEnterCritical>
                            vTaskPriorityInherit( ( void* ) pxQueue->pxMutexHolder );
 8001db4:	6860      	ldr	r0, [r4, #4]
 8001db6:	f000 fdff 	bl	80029b8 <vTaskPriorityInherit>
                        taskEXIT_CRITICAL();
 8001dba:	f000 ff83 	bl	8002cc4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dbe:	9901      	ldr	r1, [sp, #4]
 8001dc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001dc4:	f000 fcfa 	bl	80027bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff fbbf 	bl	800154c <prvUnlockQueue>
                if ( xTaskResumeAll() == pdFALSE )
 8001dce:	f000 fb29 	bl	8002424 <xTaskResumeAll>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	f47f af4d 	bne.w	8001c72 <xQueueGenericReceive+0x1ae>
                    portYIELD_WITHIN_API();
 8001dd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	e741      	b.n	8001c72 <xQueueGenericReceive+0x1ae>
            prvUnlockQueue( pxQueue );
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff fbac 	bl	800154c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001df4:	f000 fb16 	bl	8002424 <xTaskResumeAll>
 8001df8:	e6d1      	b.n	8001b9e <xQueueGenericReceive+0xda>
 8001dfa:	bf00      	nop
 8001dfc:	20003f00 	.word	0x20003f00
 8001e00:	20000008 	.word	0x20000008
            traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e04:	f001 fdb3 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8001e08:	f001 fd6e 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8001e0c:	8833      	ldrh	r3, [r6, #0]
 8001e0e:	4218      	tst	r0, r3
 8001e10:	f43f aeea 	beq.w	8001be8 <xQueueGenericReceive+0x124>
 8001e14:	4620      	mov	r0, r4
 8001e16:	f001 fd8b 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001e1a:	8833      	ldrh	r3, [r6, #0]
 8001e1c:	4218      	tst	r0, r3
 8001e1e:	f43f aee3 	beq.w	8001be8 <xQueueGenericReceive+0x124>
 8001e22:	4620      	mov	r0, r4
 8001e24:	f001 fd59 	bl	80038da <prvTraceGetQueueType>
 8001e28:	4f08      	ldr	r7, [pc, #32]	; (8001e4c <xQueueGenericReceive+0x388>)
 8001e2a:	5c3e      	ldrb	r6, [r7, r0]
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f001 fd54 	bl	80038da <prvTraceGetQueueType>
 8001e32:	5c39      	ldrb	r1, [r7, r0]
 8001e34:	9100      	str	r1, [sp, #0]
 8001e36:	4620      	mov	r0, r4
 8001e38:	f001 fd75 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001e3c:	3650      	adds	r6, #80	; 0x50
 8001e3e:	b2f6      	uxtb	r6, r6
 8001e40:	b2c2      	uxtb	r2, r0
 8001e42:	9900      	ldr	r1, [sp, #0]
 8001e44:	4630      	mov	r0, r6
 8001e46:	f002 f9cd 	bl	80041e4 <prvTraceStoreKernelCall>
 8001e4a:	e69d      	b.n	8001b88 <xQueueGenericReceive+0xc4>
 8001e4c:	20000008 	.word	0x20000008

08001e50 <xQueueReceiveFromISR>:
{
 8001e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e54:	4689      	mov	r9, r1
 8001e56:	4690      	mov	r8, r2
    configASSERT( pxQueue );
 8001e58:	4604      	mov	r4, r0
 8001e5a:	b940      	cbnz	r0, 8001e6e <xQueueReceiveFromISR+0x1e>
 8001e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e60:	f383 8811 	msr	BASEPRI, r3
 8001e64:	f3bf 8f6f 	isb	sy
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	e7fe      	b.n	8001e6c <xQueueReceiveFromISR+0x1c>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e6e:	b951      	cbnz	r1, 8001e86 <xQueueReceiveFromISR+0x36>
 8001e70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e72:	b143      	cbz	r3, 8001e86 <xQueueReceiveFromISR+0x36>
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	e7fe      	b.n	8001e84 <xQueueReceiveFromISR+0x34>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e86:	f000 ffff 	bl	8002e88 <vPortValidateInterruptPriority>
    __asm volatile
 8001e8a:	f3ef 8611 	mrs	r6, BASEPRI
 8001e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e92:	f383 8811 	msr	BASEPRI, r3
 8001e96:	f3bf 8f6f 	isb	sy
 8001e9a:	f3bf 8f4f 	dsb	sy
        if ( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e9e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8001ea0:	4d35      	ldr	r5, [pc, #212]	; (8001f78 <xQueueReceiveFromISR+0x128>)
            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8001ea2:	4620      	mov	r0, r4
        if ( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ea4:	2f00      	cmp	r7, #0
 8001ea6:	d049      	beq.n	8001f3c <xQueueReceiveFromISR+0xec>
            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8001ea8:	f001 fd42 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001eac:	882b      	ldrh	r3, [r5, #0]
 8001eae:	4f33      	ldr	r7, [pc, #204]	; (8001f7c <xQueueReceiveFromISR+0x12c>)
 8001eb0:	4218      	tst	r0, r3
 8001eb2:	d012      	beq.n	8001eda <xQueueReceiveFromISR+0x8a>
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f001 fd10 	bl	80038da <prvTraceGetQueueType>
 8001eba:	5c3d      	ldrb	r5, [r7, r0]
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f001 fd0c 	bl	80038da <prvTraceGetQueueType>
 8001ec2:	5c39      	ldrb	r1, [r7, r0]
 8001ec4:	9101      	str	r1, [sp, #4]
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f001 fd2d 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001ecc:	3538      	adds	r5, #56	; 0x38
 8001ece:	b2ed      	uxtb	r5, r5
 8001ed0:	b2c2      	uxtb	r2, r0
 8001ed2:	9901      	ldr	r1, [sp, #4]
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f002 f985 	bl	80041e4 <prvTraceStoreKernelCall>
 8001eda:	4620      	mov	r0, r4
 8001edc:	f001 fcfd 	bl	80038da <prvTraceGetQueueType>
 8001ee0:	5c3d      	ldrb	r5, [r7, r0]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f001 fd1f 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001ee8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001eea:	3a01      	subs	r2, #1
 8001eec:	b2c1      	uxtb	r1, r0
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f001 fef3 	bl	8003cdc <prvTraceSetObjectState>
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff fb11 	bl	8001520 <prvCopyDataFromQueue>
            --( pxQueue->uxMessagesWaiting );
 8001efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f00:	3b01      	subs	r3, #1
 8001f02:	63a3      	str	r3, [r4, #56]	; 0x38
            if ( pxQueue->xRxLock == queueUNLOCKED )
 8001f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f06:	3301      	adds	r3, #1
 8001f08:	d114      	bne.n	8001f34 <xQueueReceiveFromISR+0xe4>
                if ( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f0a:	6923      	ldr	r3, [r4, #16]
 8001f0c:	b90b      	cbnz	r3, 8001f12 <xQueueReceiveFromISR+0xc2>
            xReturn = pdPASS;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	e00b      	b.n	8001f2a <xQueueReceiveFromISR+0xda>
                    if ( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f12:	f104 0010 	add.w	r0, r4, #16
 8001f16:	f000 fc83 	bl	8002820 <xTaskRemoveFromEventList>
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d0f7      	beq.n	8001f0e <xQueueReceiveFromISR+0xbe>
                        if ( pxHigherPriorityTaskWoken != NULL )
 8001f1e:	f1b8 0f00 	cmp.w	r8, #0
 8001f22:	d0f4      	beq.n	8001f0e <xQueueReceiveFromISR+0xbe>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001f24:	2001      	movs	r0, #1
 8001f26:	f8c8 0000 	str.w	r0, [r8]
    __asm volatile
 8001f2a:	f386 8811 	msr	BASEPRI, r6
}
 8001f2e:	b003      	add	sp, #12
 8001f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ++( pxQueue->xRxLock );
 8001f34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f36:	3301      	adds	r3, #1
 8001f38:	6463      	str	r3, [r4, #68]	; 0x44
 8001f3a:	e7e8      	b.n	8001f0e <xQueueReceiveFromISR+0xbe>
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8001f3c:	f001 fcf8 	bl	8003930 <prvTraceGetQueueNumberHigh16>
 8001f40:	882b      	ldrh	r3, [r5, #0]
 8001f42:	4018      	ands	r0, r3
 8001f44:	d0f1      	beq.n	8001f2a <xQueueReceiveFromISR+0xda>
 8001f46:	4620      	mov	r0, r4
 8001f48:	f001 fcc7 	bl	80038da <prvTraceGetQueueType>
 8001f4c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8001f7c <xQueueReceiveFromISR+0x12c>
 8001f50:	f818 5000 	ldrb.w	r5, [r8, r0]
 8001f54:	4620      	mov	r0, r4
 8001f56:	f001 fcc0 	bl	80038da <prvTraceGetQueueType>
 8001f5a:	f818 1000 	ldrb.w	r1, [r8, r0]
 8001f5e:	9101      	str	r1, [sp, #4]
 8001f60:	4620      	mov	r0, r4
 8001f62:	f001 fce0 	bl	8003926 <prvTraceGetQueueNumberLow16>
 8001f66:	3560      	adds	r5, #96	; 0x60
 8001f68:	b2ed      	uxtb	r5, r5
 8001f6a:	b2c2      	uxtb	r2, r0
 8001f6c:	9901      	ldr	r1, [sp, #4]
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f002 f938 	bl	80041e4 <prvTraceStoreKernelCall>
            xReturn = pdFAIL;
 8001f74:	4638      	mov	r0, r7
 8001f76:	e7d8      	b.n	8001f2a <xQueueReceiveFromISR+0xda>
 8001f78:	20003f00 	.word	0x20003f00
 8001f7c:	20000008 	.word	0x20000008

08001f80 <uxQueueGetQueueNumber>:
}
 8001f80:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001f82:	4770      	bx	lr

08001f84 <vQueueSetQueueNumber>:
    ( ( Queue_t* ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001f84:	64c1      	str	r1, [r0, #76]	; 0x4c
}
 8001f86:	4770      	bx	lr

08001f88 <ucQueueGetQueueType>:
}
 8001f88:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8001f8c:	4770      	bx	lr
	...

08001f90 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
    TCB_t* pxTCB;

    if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <prvResetNextTaskUnblockTime+0x1c>)
 8001f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	b91a      	cbnz	r2, 8001fa0 <prvResetNextTaskUnblockTime+0x10>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
        the maximum possible value so it is	extremely unlikely that the
        if( xTickCount >= xNextTaskUnblockTime ) test will pass until
        there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
        /* The new current delayed list is not empty, get the value of
        the item at the head of the delayed list.  This is the time at
        which the task at the head of the delayed list should be removed
        from the Blocked state. */
        ( pxTCB ) = ( TCB_t* ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
}
 8001f9e:	4770      	bx	lr
        ( pxTCB ) = ( TCB_t* ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa2:	68d2      	ldr	r2, [r2, #12]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001fa4:	68d2      	ldr	r2, [r2, #12]
 8001fa6:	6852      	ldr	r2, [r2, #4]
 8001fa8:	e7f8      	b.n	8001f9c <prvResetNextTaskUnblockTime+0xc>
 8001faa:	bf00      	nop
 8001fac:	20000034 	.word	0x20000034

08001fb0 <prvAddCurrentTaskToDelayedList>:
{
 8001fb0:	b538      	push	{r3, r4, r5, lr}
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001fb2:	4c0c      	ldr	r4, [pc, #48]	; (8001fe4 <prvAddCurrentTaskToDelayedList+0x34>)
 8001fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fb6:	6058      	str	r0, [r3, #4]
    if ( xTimeToWake < xTickCount )
 8001fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fba:	4283      	cmp	r3, r0
{
 8001fbc:	4605      	mov	r5, r0
    if ( xTimeToWake < xTickCount )
 8001fbe:	d906      	bls.n	8001fce <prvAddCurrentTaskToDelayedList+0x1e>
        vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001fc0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001fc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
}
 8001fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001fc8:	3104      	adds	r1, #4
 8001fca:	f7ff ba4b 	b.w	8001464 <vListInsert>
        vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001fce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001fd2:	3104      	adds	r1, #4
 8001fd4:	f7ff fa46 	bl	8001464 <vListInsert>
        if ( xTimeToWake < xNextTaskUnblockTime )
 8001fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fda:	429d      	cmp	r5, r3
            xNextTaskUnblockTime = xTimeToWake;
 8001fdc:	bf38      	it	cc
 8001fde:	62e5      	strcc	r5, [r4, #44]	; 0x2c
}
 8001fe0:	bd38      	pop	{r3, r4, r5, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000034 	.word	0x20000034

08001fe8 <xTaskGenericCreate>:
{
 8001fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001fee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001ff0:	4688      	mov	r8, r1
 8001ff2:	4615      	mov	r5, r2
 8001ff4:	469a      	mov	sl, r3
    configASSERT( pxTaskCode );
 8001ff6:	4681      	mov	r9, r0
 8001ff8:	b940      	cbnz	r0, 800200c <xTaskGenericCreate+0x24>
    __asm volatile
 8001ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffe:	f383 8811 	msr	BASEPRI, r3
 8002002:	f3bf 8f6f 	isb	sy
 8002006:	f3bf 8f4f 	dsb	sy
 800200a:	e7fe      	b.n	800200a <xTaskGenericCreate+0x22>
    configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800200c:	2f06      	cmp	r7, #6
 800200e:	d908      	bls.n	8002022 <xTaskGenericCreate+0x3a>
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	e7fe      	b.n	8002020 <xTaskGenericCreate+0x38>
        pxStack = ( StackType_t* ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer );  /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002022:	b936      	cbnz	r6, 8002032 <xTaskGenericCreate+0x4a>
 8002024:	0090      	lsls	r0, r2, #2
 8002026:	f000 ff7b 	bl	8002f20 <pvPortMalloc>
        if ( pxStack != NULL )
 800202a:	4606      	mov	r6, r0
 800202c:	2800      	cmp	r0, #0
 800202e:	f000 80de 	beq.w	80021ee <xTaskGenericCreate+0x206>
            pxNewTCB = ( TCB_t* ) pvPortMalloc( sizeof( TCB_t ) );
 8002032:	205c      	movs	r0, #92	; 0x5c
 8002034:	f000 ff74 	bl	8002f20 <pvPortMalloc>
            if ( pxNewTCB != NULL )
 8002038:	4604      	mov	r4, r0
 800203a:	2800      	cmp	r0, #0
 800203c:	f000 80d4 	beq.w	80021e8 <xTaskGenericCreate+0x200>
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8002040:	00ad      	lsls	r5, r5, #2
 8002042:	462a      	mov	r2, r5
                pxNewTCB->pxStack = pxStack;
 8002044:	6306      	str	r6, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8002046:	21a5      	movs	r1, #165	; 0xa5
 8002048:	4630      	mov	r0, r6
 800204a:	f002 fa99 	bl	8004580 <memset>
            pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800204e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002050:	3d04      	subs	r5, #4
 8002052:	4415      	add	r5, r2
 8002054:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002058:	f108 33ff 	add.w	r3, r8, #4294967295
 800205c:	f108 010f 	add.w	r1, r8, #15
            pxTopOfStack = ( StackType_t* ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );  /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002060:	f025 0507 	bic.w	r5, r5, #7
    for ( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002064:	4690      	mov	r8, r2
        pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002066:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800206a:	f802 0b01 	strb.w	r0, [r2], #1
        if ( pcName[ x ] == 0x00 )
 800206e:	b108      	cbz	r0, 8002074 <xTaskGenericCreate+0x8c>
    for ( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002070:	4299      	cmp	r1, r3
 8002072:	d1f8      	bne.n	8002066 <xTaskGenericCreate+0x7e>
    pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002074:	f04f 0b00 	mov.w	fp, #0
    vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002078:	1d26      	adds	r6, r4, #4
 800207a:	4630      	mov	r0, r6
        pxTCB->uxMutexesHeld = 0;
 800207c:	e9c4 7b13 	strd	r7, fp, [r4, #76]	; 0x4c
    pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002080:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
    pxTCB->uxPriority = uxPriority;
 8002084:	62e7      	str	r7, [r4, #44]	; 0x2c
    vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002086:	f7ff f9de 	bl	8001446 <vListInitialiseItem>
    vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800208a:	f104 0018 	add.w	r0, r4, #24
 800208e:	f7ff f9da 	bl	8001446 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002092:	f1c7 0207 	rsb	r2, r7, #7
 8002096:	61a2      	str	r2, [r4, #24]
        pxTCB->ulNotifiedValue = 0;
 8002098:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
    listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800209c:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800209e:	6264      	str	r4, [r4, #36]	; 0x24
        pxTCB->eNotifyState = eNotWaitingNotification;
 80020a0:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020a4:	4652      	mov	r2, sl
 80020a6:	4649      	mov	r1, r9
 80020a8:	4628      	mov	r0, r5
 80020aa:	f000 fdc9 	bl	8002c40 <pxPortInitialiseStack>
        if ( ( void* ) pxCreatedTask != NULL )
 80020ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020b0:	6020      	str	r0, [r4, #0]
        if ( ( void* ) pxCreatedTask != NULL )
 80020b2:	b103      	cbz	r3, 80020b6 <xTaskGenericCreate+0xce>
            *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020b4:	601c      	str	r4, [r3, #0]
            uxCurrentNumberOfTasks++;
 80020b6:	4d62      	ldr	r5, [pc, #392]	; (8002240 <xTaskGenericCreate+0x258>)
        taskENTER_CRITICAL();
 80020b8:	f000 fde4 	bl	8002c84 <vPortEnterCritical>
            uxCurrentNumberOfTasks++;
 80020bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80020be:	3301      	adds	r3, #1
 80020c0:	63eb      	str	r3, [r5, #60]	; 0x3c
            if ( pxCurrentTCB == NULL )
 80020c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020c4:	f105 0a40 	add.w	sl, r5, #64	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 80a0 	bne.w	800220e <xTaskGenericCreate+0x226>
                pxCurrentTCB =  pxNewTCB;
 80020ce:	632c      	str	r4, [r5, #48]	; 0x30
                if ( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020d0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80020d2:	2a01      	cmp	r2, #1
 80020d4:	d125      	bne.n	8002122 <xTaskGenericCreate+0x13a>
 80020d6:	46d3      	mov	fp, sl
    for ( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020d8:	4699      	mov	r9, r3
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020da:	4658      	mov	r0, fp
    for ( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020dc:	f109 0901 	add.w	r9, r9, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020e0:	f7ff f9a6 	bl	8001430 <vListInitialise>
    for ( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020e4:	f1b9 0f07 	cmp.w	r9, #7
 80020e8:	f10b 0b14 	add.w	fp, fp, #20
 80020ec:	d1f5      	bne.n	80020da <xTaskGenericCreate+0xf2>
    vListInitialise( &xDelayedTaskList1 );
 80020ee:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800224c <xTaskGenericCreate+0x264>
 80020f2:	4648      	mov	r0, r9
    vListInitialise( &xDelayedTaskList2 );
 80020f4:	f109 0b14 	add.w	fp, r9, #20
    vListInitialise( &xDelayedTaskList1 );
 80020f8:	f7ff f99a 	bl	8001430 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80020fc:	4658      	mov	r0, fp
 80020fe:	f7ff f997 	bl	8001430 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002102:	f1a9 00b8 	sub.w	r0, r9, #184	; 0xb8
 8002106:	f7ff f993 	bl	8001430 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 800210a:	f109 0028 	add.w	r0, r9, #40	; 0x28
 800210e:	f7ff f98f 	bl	8001430 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 8002112:	f1a9 00cc 	sub.w	r0, r9, #204	; 0xcc
 8002116:	f7ff f98b 	bl	8001430 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 800211a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800211e:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
            uxTaskNumber++;
 8002122:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8002126:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002128:	6463      	str	r3, [r4, #68]	; 0x44
            traceTASK_CREATE( pxNewTCB );
 800212a:	2003      	movs	r0, #3
            uxTaskNumber++;
 800212c:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
            traceTASK_CREATE( pxNewTCB );
 8002130:	f001 fe0a 	bl	8003d48 <prvTraceGetObjectHandle>
 8002134:	b281      	uxth	r1, r0
 8002136:	4620      	mov	r0, r4
 8002138:	f001 fbdb 	bl	80038f2 <prvTraceSetTaskNumberLow16>
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <xTaskGenericCreate+0x25c>)
 800213e:	4620      	mov	r0, r4
 8002140:	8819      	ldrh	r1, [r3, #0]
 8002142:	f001 fbe3 	bl	800390c <prvTraceSetTaskNumberHigh16>
 8002146:	4620      	mov	r0, r4
 8002148:	f001 fbc9 	bl	80038de <prvTraceGetTaskNumberLow16>
 800214c:	4642      	mov	r2, r8
 800214e:	b2c1      	uxtb	r1, r0
 8002150:	2003      	movs	r0, #3
 8002152:	f001 fe3b 	bl	8003dcc <prvTraceSetObjectName>
 8002156:	4620      	mov	r0, r4
 8002158:	f001 fbc1 	bl	80038de <prvTraceGetTaskNumberLow16>
 800215c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8002160:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002248 <xTaskGenericCreate+0x260>
 8002164:	b2c1      	uxtb	r1, r0
 8002166:	2003      	movs	r0, #3
 8002168:	f001 fd90 	bl	8003c8c <prvTraceSetPriorityProperty>
 800216c:	f001 fbff 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8002170:	f001 fbba 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8002174:	f8b8 3000 	ldrh.w	r3, [r8]
 8002178:	4218      	tst	r0, r3
 800217a:	d00e      	beq.n	800219a <xTaskGenericCreate+0x1b2>
 800217c:	4620      	mov	r0, r4
 800217e:	f001 fbb3 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8002182:	f8b8 3000 	ldrh.w	r3, [r8]
 8002186:	4218      	tst	r0, r3
 8002188:	d007      	beq.n	800219a <xTaskGenericCreate+0x1b2>
 800218a:	4620      	mov	r0, r4
 800218c:	f001 fba7 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002190:	2103      	movs	r1, #3
 8002192:	b2c2      	uxtb	r2, r0
 8002194:	201b      	movs	r0, #27
 8002196:	f002 f825 	bl	80041e4 <prvTraceStoreKernelCall>
 800219a:	4620      	mov	r0, r4
 800219c:	f002 f966 	bl	800446c <prvAddTaskToStackMonitor>
            prvAddTaskToReadyList( pxNewTCB );
 80021a0:	4620      	mov	r0, r4
 80021a2:	f001 fba1 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80021a6:	f8b8 3000 	ldrh.w	r3, [r8]
 80021aa:	4218      	tst	r0, r3
 80021ac:	d005      	beq.n	80021ba <xTaskGenericCreate+0x1d2>
 80021ae:	4620      	mov	r0, r4
 80021b0:	f001 fb95 	bl	80038de <prvTraceGetTaskNumberLow16>
 80021b4:	b2c0      	uxtb	r0, r0
 80021b6:	f001 ff89 	bl	80040cc <prvTraceStoreTaskReady>
 80021ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021bc:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
 80021c0:	2401      	movs	r4, #1
 80021c2:	fa04 f302 	lsl.w	r3, r4, r2
 80021c6:	2014      	movs	r0, #20
 80021c8:	430b      	orrs	r3, r1
 80021ca:	fb00 a002 	mla	r0, r0, r2, sl
 80021ce:	4631      	mov	r1, r6
 80021d0:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80021d4:	f7ff f93a 	bl	800144c <vListInsertEnd>
        taskEXIT_CRITICAL();
 80021d8:	f000 fd74 	bl	8002cc4 <vPortExitCritical>
        if ( xSchedulerRunning != pdFALSE )
 80021dc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80021e0:	b9fb      	cbnz	r3, 8002222 <xTaskGenericCreate+0x23a>
}
 80021e2:	4620      	mov	r0, r4
 80021e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                vPortFree( pxStack );
 80021e8:	4630      	mov	r0, r6
 80021ea:	f000 ff25 	bl	8003038 <vPortFree>
        traceTASK_CREATE_FAILED();
 80021ee:	f001 fbbe 	bl	800396e <prvTraceGetCurrentTaskHandle>
 80021f2:	f001 fb79 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <xTaskGenericCreate+0x260>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	4218      	tst	r0, r3
 80021fc:	d004      	beq.n	8002208 <xTaskGenericCreate+0x220>
 80021fe:	2200      	movs	r2, #0
 8002200:	2103      	movs	r1, #3
 8002202:	2043      	movs	r0, #67	; 0x43
 8002204:	f001 ffee 	bl	80041e4 <prvTraceStoreKernelCall>
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002208:	f04f 34ff 	mov.w	r4, #4294967295
 800220c:	e7e9      	b.n	80021e2 <xTaskGenericCreate+0x1fa>
                if ( xSchedulerRunning == pdFALSE )
 800220e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8002212:	2b00      	cmp	r3, #0
 8002214:	d185      	bne.n	8002122 <xTaskGenericCreate+0x13a>
                    if ( pxCurrentTCB->uxPriority <= uxPriority )
 8002216:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	42bb      	cmp	r3, r7
                        pxCurrentTCB = pxNewTCB;
 800221c:	bf98      	it	ls
 800221e:	632c      	strls	r4, [r5, #48]	; 0x30
 8002220:	e77f      	b.n	8002122 <xTaskGenericCreate+0x13a>
            if ( pxCurrentTCB->uxPriority < uxPriority )
 8002222:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	42bb      	cmp	r3, r7
 8002228:	d2db      	bcs.n	80021e2 <xTaskGenericCreate+0x1fa>
                taskYIELD_IF_USING_PREEMPTION();
 800222a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002232:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	e7d0      	b.n	80021e2 <xTaskGenericCreate+0x1fa>
 8002240:	20000034 	.word	0x20000034
 8002244:	20003f02 	.word	0x20003f02
 8002248:	20003f00 	.word	0x20003f00
 800224c:	20000100 	.word	0x20000100

08002250 <vTaskStartScheduler>:
{
 8002250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void* ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );   /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002252:	2400      	movs	r4, #0
 8002254:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002258:	e9cd 4400 	strd	r4, r4, [sp]
 800225c:	4913      	ldr	r1, [pc, #76]	; (80022ac <vTaskStartScheduler+0x5c>)
 800225e:	4814      	ldr	r0, [pc, #80]	; (80022b0 <vTaskStartScheduler+0x60>)
 8002260:	4623      	mov	r3, r4
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	f7ff fec0 	bl	8001fe8 <xTaskGenericCreate>
    if ( xReturn == pdPASS )
 8002268:	2801      	cmp	r0, #1
 800226a:	d113      	bne.n	8002294 <vTaskStartScheduler+0x44>
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <vTaskStartScheduler+0x64>)
 800227e:	f04f 32ff 	mov.w	r2, #4294967295
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
        xSchedulerRunning = pdTRUE;
 8002284:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        xTickCount = ( TickType_t ) 0U;
 8002288:	635c      	str	r4, [r3, #52]	; 0x34
}
 800228a:	b004      	add	sp, #16
 800228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if ( xPortStartScheduler() != pdFALSE )
 8002290:	f000 bd84 	b.w	8002d9c <xPortStartScheduler>
        configASSERT( xReturn );
 8002294:	b940      	cbnz	r0, 80022a8 <vTaskStartScheduler+0x58>
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	e7fe      	b.n	80022a6 <vTaskStartScheduler+0x56>
}
 80022a8:	b004      	add	sp, #16
 80022aa:	bd10      	pop	{r4, pc}
 80022ac:	0800462c 	.word	0x0800462c
 80022b0:	080026bd 	.word	0x080026bd
 80022b4:	20000034 	.word	0x20000034

080022b8 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 80022b8:	4a03      	ldr	r2, [pc, #12]	; (80022c8 <vTaskSuspendAll+0x10>)
 80022ba:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 80022be:	3301      	adds	r3, #1
 80022c0:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000034 	.word	0x20000034

080022cc <xTaskGetTickCount>:
        xTicks = xTickCount;
 80022cc:	4b01      	ldr	r3, [pc, #4]	; (80022d4 <xTaskGetTickCount+0x8>)
 80022ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000034 	.word	0x20000034

080022d8 <xTaskGetTickCountFromISR>:
{
 80022d8:	b508      	push	{r3, lr}
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022da:	f000 fdd5 	bl	8002e88 <vPortValidateInterruptPriority>
        xReturn = xTickCount;
 80022de:	4b01      	ldr	r3, [pc, #4]	; (80022e4 <xTaskGetTickCountFromISR+0xc>)
 80022e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
}
 80022e2:	bd08      	pop	{r3, pc}
 80022e4:	20000034 	.word	0x20000034

080022e8 <xTaskIncrementTick>:
{
 80022e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    traceTASK_INCREMENT_TICK( xTickCount );
 80022ec:	4c49      	ldr	r4, [pc, #292]	; (8002414 <xTaskIncrementTick+0x12c>)
 80022ee:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d002      	beq.n	80022fc <xTaskIncrementTick+0x14>
 80022f6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80022fa:	b933      	cbnz	r3, 800230a <xTaskIncrementTick+0x22>
 80022fc:	4a46      	ldr	r2, [pc, #280]	; (8002418 <xTaskIncrementTick+0x130>)
 80022fe:	6813      	ldr	r3, [r2, #0]
 8002300:	2000      	movs	r0, #0
 8002302:	3301      	adds	r3, #1
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	f001 fe59 	bl	8003fbc <prvTracePortGetTimeStamp>
 800230a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800230e:	b923      	cbnz	r3, 800231a <xTaskIncrementTick+0x32>
 8002310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002312:	2003      	movs	r0, #3
 8002314:	3101      	adds	r1, #1
 8002316:	f001 ffd3 	bl	80042c0 <prvTraceStoreKernelCallWithNumericParamOnly>
    if ( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800231a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800231e:	2b00      	cmp	r3, #0
 8002320:	d171      	bne.n	8002406 <xTaskIncrementTick+0x11e>
        ++xTickCount;
 8002322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002324:	3301      	adds	r3, #1
 8002326:	6363      	str	r3, [r4, #52]	; 0x34
            const TickType_t xConstTickCount = xTickCount;
 8002328:	6b67      	ldr	r7, [r4, #52]	; 0x34
            if ( xConstTickCount == ( TickType_t ) 0U )
 800232a:	b9b7      	cbnz	r7, 800235a <xTaskIncrementTick+0x72>
                taskSWITCH_DELAYED_LISTS();
 800232c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b143      	cbz	r3, 8002344 <xTaskIncrementTick+0x5c>
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	e7fe      	b.n	8002342 <xTaskIncrementTick+0x5a>
 8002344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002346:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002348:	62a2      	str	r2, [r4, #40]	; 0x28
 800234a:	63a3      	str	r3, [r4, #56]	; 0x38
 800234c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002350:	3301      	adds	r3, #1
 8002352:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002356:	f7ff fe1b 	bl	8001f90 <prvResetNextTaskUnblockTime>
            if ( xConstTickCount >= xNextTaskUnblockTime )
 800235a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800235c:	42bb      	cmp	r3, r7
    BaseType_t xSwitchRequired = pdFALSE;
 800235e:	f04f 0600 	mov.w	r6, #0
            if ( xConstTickCount >= xNextTaskUnblockTime )
 8002362:	d910      	bls.n	8002386 <xTaskIncrementTick+0x9e>
            if ( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002364:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	2214      	movs	r2, #20
 800236a:	fb02 4303 	mla	r3, r2, r3, r4
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                xSwitchRequired = pdTRUE;
 8002370:	2b02      	cmp	r3, #2
 8002372:	bf28      	it	cs
 8002374:	2601      	movcs	r6, #1
        if ( xYieldPending != pdFALSE )
 8002376:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            xSwitchRequired = pdTRUE;
 800237a:	2b00      	cmp	r3, #0
}
 800237c:	bf0c      	ite	eq
 800237e:	4630      	moveq	r0, r6
 8002380:	2001      	movne	r0, #1
 8002382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        prvAddTaskToReadyList( pxTCB );
 8002386:	f8df b094 	ldr.w	fp, [pc, #148]	; 800241c <xTaskIncrementTick+0x134>
 800238a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002420 <xTaskIncrementTick+0x138>
 800238e:	f04f 0a01 	mov.w	sl, #1
                    if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b91b      	cbnz	r3, 80023a0 <xTaskIncrementTick+0xb8>
                        xNextTaskUnblockTime = portMAX_DELAY;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
                            xNextTaskUnblockTime = xItemValue;
 800239c:	62e3      	str	r3, [r4, #44]	; 0x2c
                            break;
 800239e:	e7e1      	b.n	8002364 <xTaskIncrementTick+0x7c>
                        pxTCB = ( TCB_t* ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	68dd      	ldr	r5, [r3, #12]
                        xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80023a6:	686b      	ldr	r3, [r5, #4]
                        if ( xConstTickCount < xItemValue )
 80023a8:	429f      	cmp	r7, r3
 80023aa:	d3f7      	bcc.n	800239c <xTaskIncrementTick+0xb4>
                        ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80023ac:	f105 0804 	add.w	r8, r5, #4
 80023b0:	4640      	mov	r0, r8
 80023b2:	f7ff f86e 	bl	8001492 <uxListRemove>
                        if ( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023b8:	b11b      	cbz	r3, 80023c2 <xTaskIncrementTick+0xda>
                            ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023ba:	f105 0018 	add.w	r0, r5, #24
 80023be:	f7ff f868 	bl	8001492 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 80023c2:	4628      	mov	r0, r5
 80023c4:	f001 fa90 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80023c8:	f8bb 3000 	ldrh.w	r3, [fp]
 80023cc:	4218      	tst	r0, r3
 80023ce:	d005      	beq.n	80023dc <xTaskIncrementTick+0xf4>
 80023d0:	4628      	mov	r0, r5
 80023d2:	f001 fa84 	bl	80038de <prvTraceGetTaskNumberLow16>
 80023d6:	b2c0      	uxtb	r0, r0
 80023d8:	f001 fe78 	bl	80040cc <prvTraceStoreTaskReady>
 80023dc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80023de:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80023e2:	fa0a f302 	lsl.w	r3, sl, r2
 80023e6:	2014      	movs	r0, #20
 80023e8:	430b      	orrs	r3, r1
 80023ea:	fb00 9002 	mla	r0, r0, r2, r9
 80023ee:	4641      	mov	r1, r8
 80023f0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80023f4:	f7ff f82a 	bl	800144c <vListInsertEnd>
                            if ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023fa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 80023fe:	429a      	cmp	r2, r3
 8002400:	bf28      	it	cs
 8002402:	2601      	movcs	r6, #1
 8002404:	e7c5      	b.n	8002392 <xTaskIncrementTick+0xaa>
        ++uxPendedTicks;
 8002406:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800240a:	3301      	adds	r3, #1
 800240c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    BaseType_t xSwitchRequired = pdFALSE;
 8002410:	2600      	movs	r6, #0
 8002412:	e7b0      	b.n	8002376 <xTaskIncrementTick+0x8e>
 8002414:	20000034 	.word	0x20000034
 8002418:	20005890 	.word	0x20005890
 800241c:	20003f00 	.word	0x20003f00
 8002420:	20000074 	.word	0x20000074

08002424 <xTaskResumeAll>:
{
 8002424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( uxSchedulerSuspended );
 8002428:	4c3a      	ldr	r4, [pc, #232]	; (8002514 <xTaskResumeAll+0xf0>)
 800242a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800242e:	b943      	cbnz	r3, 8002442 <xTaskResumeAll+0x1e>
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	e7fe      	b.n	8002440 <xTaskResumeAll+0x1c>
    taskENTER_CRITICAL();
 8002442:	f000 fc1f 	bl	8002c84 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8002446:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800244a:	3b01      	subs	r3, #1
 800244c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
        if ( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002450:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8002454:	b12b      	cbz	r3, 8002462 <xTaskResumeAll+0x3e>
    BaseType_t xAlreadyYielded = pdFALSE;
 8002456:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8002458:	f000 fc34 	bl	8002cc4 <vPortExitCritical>
}
 800245c:	4620      	mov	r0, r4
 800245e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f6      	beq.n	8002456 <xTaskResumeAll+0x32>
                    prvAddTaskToReadyList( pxTCB );
 8002468:	4f2b      	ldr	r7, [pc, #172]	; (8002518 <xTaskResumeAll+0xf4>)
 800246a:	f104 0840 	add.w	r8, r4, #64	; 0x40
 800246e:	2601      	movs	r6, #1
                while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002470:	6963      	ldr	r3, [r4, #20]
 8002472:	b9b3      	cbnz	r3, 80024a2 <xTaskResumeAll+0x7e>
                if ( uxPendedTicks > ( UBaseType_t ) 0U )
 8002474:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002478:	b123      	cbz	r3, 8002484 <xTaskResumeAll+0x60>
                            xYieldPending = pdTRUE;
 800247a:	2501      	movs	r5, #1
                    while ( uxPendedTicks > ( UBaseType_t ) 0U )
 800247c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d13b      	bne.n	80024fc <xTaskResumeAll+0xd8>
                if ( xYieldPending == pdTRUE )
 8002484:	f8d4 4124 	ldr.w	r4, [r4, #292]	; 0x124
 8002488:	2c01      	cmp	r4, #1
 800248a:	d1e4      	bne.n	8002456 <xTaskResumeAll+0x32>
                    taskYIELD_IF_USING_PREEMPTION();
 800248c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002494:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	e7da      	b.n	8002458 <xTaskResumeAll+0x34>
                    pxTCB = ( TCB_t* ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80024a2:	6a23      	ldr	r3, [r4, #32]
 80024a4:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024a6:	f105 0018 	add.w	r0, r5, #24
                    ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80024aa:	f105 0904 	add.w	r9, r5, #4
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024ae:	f7fe fff0 	bl	8001492 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80024b2:	4648      	mov	r0, r9
 80024b4:	f7fe ffed 	bl	8001492 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80024b8:	4628      	mov	r0, r5
 80024ba:	f001 fa15 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80024be:	883b      	ldrh	r3, [r7, #0]
 80024c0:	4218      	tst	r0, r3
 80024c2:	d005      	beq.n	80024d0 <xTaskResumeAll+0xac>
 80024c4:	4628      	mov	r0, r5
 80024c6:	f001 fa0a 	bl	80038de <prvTraceGetTaskNumberLow16>
 80024ca:	b2c0      	uxtb	r0, r0
 80024cc:	f001 fdfe 	bl	80040cc <prvTraceStoreTaskReady>
 80024d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80024d2:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80024d6:	fa06 f302 	lsl.w	r3, r6, r2
 80024da:	2014      	movs	r0, #20
 80024dc:	430b      	orrs	r3, r1
 80024de:	fb00 8002 	mla	r0, r0, r2, r8
 80024e2:	4649      	mov	r1, r9
 80024e4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80024e8:	f7fe ffb0 	bl	800144c <vListInsertEnd>
                    if ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3bc      	bcc.n	8002470 <xTaskResumeAll+0x4c>
                        xYieldPending = pdTRUE;
 80024f6:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
 80024fa:	e7b8      	b.n	800246e <xTaskResumeAll+0x4a>
                        if ( xTaskIncrementTick() != pdFALSE )
 80024fc:	f7ff fef4 	bl	80022e8 <xTaskIncrementTick>
 8002500:	b108      	cbz	r0, 8002506 <xTaskResumeAll+0xe2>
                            xYieldPending = pdTRUE;
 8002502:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
                        --uxPendedTicks;
 8002506:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800250a:	3b01      	subs	r3, #1
 800250c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8002510:	e7b4      	b.n	800247c <xTaskResumeAll+0x58>
 8002512:	bf00      	nop
 8002514:	20000034 	.word	0x20000034
 8002518:	20003f00 	.word	0x20003f00

0800251c <vTaskDelayUntil>:
{
 800251c:	b570      	push	{r4, r5, r6, lr}
    configASSERT( pxPreviousWakeTime );
 800251e:	b940      	cbnz	r0, 8002532 <vTaskDelayUntil+0x16>
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	e7fe      	b.n	8002530 <vTaskDelayUntil+0x14>
    configASSERT( ( xTimeIncrement > 0U ) );
 8002532:	b941      	cbnz	r1, 8002546 <vTaskDelayUntil+0x2a>
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	e7fe      	b.n	8002544 <vTaskDelayUntil+0x28>
    configASSERT( uxSchedulerSuspended == 0 );
 8002546:	4d2e      	ldr	r5, [pc, #184]	; (8002600 <vTaskDelayUntil+0xe4>)
 8002548:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800254c:	b143      	cbz	r3, 8002560 <vTaskDelayUntil+0x44>
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	e7fe      	b.n	800255e <vTaskDelayUntil+0x42>
    vTaskSuspendAll();
 8002560:	f7ff feaa 	bl	80022b8 <vTaskSuspendAll>
        xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002564:	6803      	ldr	r3, [r0, #0]
        const TickType_t xConstTickCount = xTickCount;
 8002566:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002568:	185c      	adds	r4, r3, r1
 800256a:	bf2c      	ite	cs
 800256c:	2101      	movcs	r1, #1
 800256e:	2100      	movcc	r1, #0
        if ( xConstTickCount < *pxPreviousWakeTime )
 8002570:	4293      	cmp	r3, r2
        *pxPreviousWakeTime = xTimeToWake;
 8002572:	6004      	str	r4, [r0, #0]
        if ( xConstTickCount < *pxPreviousWakeTime )
 8002574:	d90e      	bls.n	8002594 <vTaskDelayUntil+0x78>
            if ( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002576:	b971      	cbnz	r1, 8002596 <vTaskDelayUntil+0x7a>
    xAlreadyYielded = xTaskResumeAll();
 8002578:	f7ff ff54 	bl	8002424 <xTaskResumeAll>
    if ( xAlreadyYielded == pdFALSE )
 800257c:	b948      	cbnz	r0, 8002592 <vTaskDelayUntil+0x76>
        portYIELD_WITHIN_API();
 800257e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002586:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	f3bf 8f6f 	isb	sy
}
 8002592:	bd70      	pop	{r4, r5, r6, pc}
            if ( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002594:	b909      	cbnz	r1, 800259a <vTaskDelayUntil+0x7e>
 8002596:	42a2      	cmp	r2, r4
 8002598:	d2ee      	bcs.n	8002578 <vTaskDelayUntil+0x5c>
            traceTASK_DELAY_UNTIL();
 800259a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800259c:	4e19      	ldr	r6, [pc, #100]	; (8002604 <vTaskDelayUntil+0xe8>)
 800259e:	f001 f9a3 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80025a2:	8833      	ldrh	r3, [r6, #0]
 80025a4:	4218      	tst	r0, r3
 80025a6:	d009      	beq.n	80025bc <vTaskDelayUntil+0xa0>
 80025a8:	4621      	mov	r1, r4
 80025aa:	2088      	movs	r0, #136	; 0x88
 80025ac:	f001 fe88 	bl	80042c0 <prvTraceStoreKernelCallWithNumericParamOnly>
 80025b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80025b2:	f001 f994 	bl	80038de <prvTraceGetTaskNumberLow16>
 80025b6:	b2c0      	uxtb	r0, r0
 80025b8:	f001 fba4 	bl	8003d04 <prvTraceSetTaskInstanceFinished>
 80025bc:	f001 f9d7 	bl	800396e <prvTraceGetCurrentTaskHandle>
 80025c0:	f001 f992 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 80025c4:	8833      	ldrh	r3, [r6, #0]
 80025c6:	4218      	tst	r0, r3
 80025c8:	d006      	beq.n	80025d8 <vTaskDelayUntil+0xbc>
 80025ca:	f001 f9d0 	bl	800396e <prvTraceGetCurrentTaskHandle>
 80025ce:	f001 f986 	bl	80038de <prvTraceGetTaskNumberLow16>
 80025d2:	b2c0      	uxtb	r0, r0
 80025d4:	f001 fb96 	bl	8003d04 <prvTraceSetTaskInstanceFinished>
            if ( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80025d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80025da:	3004      	adds	r0, #4
 80025dc:	f7fe ff59 	bl	8001492 <uxListRemove>
 80025e0:	b948      	cbnz	r0, 80025f6 <vTaskDelayUntil+0xda>
                portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80025e4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 80025e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025ea:	2201      	movs	r2, #1
 80025ec:	408a      	lsls	r2, r1
 80025ee:	ea23 0302 	bic.w	r3, r3, r2
 80025f2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
            prvAddCurrentTaskToDelayedList( xTimeToWake );
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff fcda 	bl	8001fb0 <prvAddCurrentTaskToDelayedList>
 80025fc:	e7bc      	b.n	8002578 <vTaskDelayUntil+0x5c>
 80025fe:	bf00      	nop
 8002600:	20000034 	.word	0x20000034
 8002604:	20003f00 	.word	0x20003f00

08002608 <vTaskDelay>:
{
 8002608:	b570      	push	{r4, r5, r6, lr}
    if ( xTicksToDelay > ( TickType_t ) 0U )
 800260a:	4605      	mov	r5, r0
 800260c:	b950      	cbnz	r0, 8002624 <vTaskDelay+0x1c>
        portYIELD_WITHIN_API();
 800260e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002616:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	f3bf 8f6f 	isb	sy
}
 8002622:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( uxSchedulerSuspended == 0 );
 8002624:	4c23      	ldr	r4, [pc, #140]	; (80026b4 <vTaskDelay+0xac>)
 8002626:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800262a:	b143      	cbz	r3, 800263e <vTaskDelay+0x36>
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	e7fe      	b.n	800263c <vTaskDelay+0x34>
        vTaskSuspendAll();
 800263e:	f7ff fe3b 	bl	80022b8 <vTaskSuspendAll>
            traceTASK_DELAY();
 8002642:	4e1d      	ldr	r6, [pc, #116]	; (80026b8 <vTaskDelay+0xb0>)
 8002644:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002646:	f001 f94f 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 800264a:	8833      	ldrh	r3, [r6, #0]
 800264c:	4218      	tst	r0, r3
 800264e:	d009      	beq.n	8002664 <vTaskDelay+0x5c>
 8002650:	4629      	mov	r1, r5
 8002652:	2089      	movs	r0, #137	; 0x89
 8002654:	f001 fe34 	bl	80042c0 <prvTraceStoreKernelCallWithNumericParamOnly>
 8002658:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800265a:	f001 f940 	bl	80038de <prvTraceGetTaskNumberLow16>
 800265e:	b2c0      	uxtb	r0, r0
 8002660:	f001 fb50 	bl	8003d04 <prvTraceSetTaskInstanceFinished>
 8002664:	f001 f983 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8002668:	f001 f93e 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 800266c:	8833      	ldrh	r3, [r6, #0]
 800266e:	4218      	tst	r0, r3
 8002670:	d006      	beq.n	8002680 <vTaskDelay+0x78>
 8002672:	f001 f97c 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8002676:	f001 f932 	bl	80038de <prvTraceGetTaskNumberLow16>
 800267a:	b2c0      	uxtb	r0, r0
 800267c:	f001 fb42 	bl	8003d04 <prvTraceSetTaskInstanceFinished>
            xTimeToWake = xTickCount + xTicksToDelay;
 8002680:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002682:	4405      	add	r5, r0
            if ( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002684:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002686:	3004      	adds	r0, #4
 8002688:	f7fe ff03 	bl	8001492 <uxListRemove>
 800268c:	b948      	cbnz	r0, 80026a2 <vTaskDelay+0x9a>
                portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800268e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002690:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002694:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002696:	2201      	movs	r2, #1
 8002698:	408a      	lsls	r2, r1
 800269a:	ea23 0302 	bic.w	r3, r3, r2
 800269e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            prvAddCurrentTaskToDelayedList( xTimeToWake );
 80026a2:	4628      	mov	r0, r5
 80026a4:	f7ff fc84 	bl	8001fb0 <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 80026a8:	f7ff febc 	bl	8002424 <xTaskResumeAll>
    if ( xAlreadyYielded == pdFALSE )
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d0ae      	beq.n	800260e <vTaskDelay+0x6>
 80026b0:	e7b7      	b.n	8002622 <vTaskDelay+0x1a>
 80026b2:	bf00      	nop
 80026b4:	20000034 	.word	0x20000034
 80026b8:	20003f00 	.word	0x20003f00

080026bc <prvIdleTask>:
        while ( uxTasksDeleted > ( UBaseType_t ) 0U )
 80026bc:	4c19      	ldr	r4, [pc, #100]	; (8002724 <prvIdleTask+0x68>)
{
 80026be:	b580      	push	{r7, lr}
                taskYIELD();
 80026c0:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 80026c4:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
        while ( uxTasksDeleted > ( UBaseType_t ) 0U )
 80026c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80026cc:	b94b      	cbnz	r3, 80026e2 <prvIdleTask+0x26>
            if ( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d9f9      	bls.n	80026c8 <prvIdleTask+0xc>
                taskYIELD();
 80026d4:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	e7f2      	b.n	80026c8 <prvIdleTask+0xc>
            vTaskSuspendAll();
 80026e2:	f7ff fde9 	bl	80022b8 <vTaskSuspendAll>
                xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80026e6:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
            ( void ) xTaskResumeAll();
 80026ea:	f7ff fe9b 	bl	8002424 <xTaskResumeAll>
            if ( xListIsEmpty == pdFALSE )
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	d0ea      	beq.n	80026c8 <prvIdleTask+0xc>
                taskENTER_CRITICAL();
 80026f2:	f000 fac7 	bl	8002c84 <vPortEnterCritical>
                    pxTCB = ( TCB_t* ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80026f6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80026fa:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80026fc:	1d28      	adds	r0, r5, #4
 80026fe:	f7fe fec8 	bl	8001492 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002704:	3b01      	subs	r3, #1
 8002706:	63e3      	str	r3, [r4, #60]	; 0x3c
                    --uxTasksDeleted;
 8002708:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800270c:	3b01      	subs	r3, #1
 800270e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                taskEXIT_CRITICAL();
 8002712:	f000 fad7 	bl	8002cc4 <vPortExitCritical>
        vPortFreeAligned( pxTCB->pxStack );
 8002716:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002718:	f000 fc8e 	bl	8003038 <vPortFree>
    vPortFree( pxTCB );
 800271c:	4628      	mov	r0, r5
 800271e:	f000 fc8b 	bl	8003038 <vPortFree>
}
 8002722:	e7d1      	b.n	80026c8 <prvIdleTask+0xc>
 8002724:	20000034 	.word	0x20000034

08002728 <vTaskSwitchContext>:
    if ( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <vTaskSwitchContext+0x88>)
 800272a:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
{
 800272e:	b510      	push	{r4, lr}
    if ( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002730:	b11b      	cbz	r3, 800273a <vTaskSwitchContext+0x12>
        xYieldPending = pdTRUE;
 8002732:	2301      	movs	r3, #1
 8002734:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
}
 8002738:	bd10      	pop	{r4, pc}
        xYieldPending = pdFALSE;
 800273a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
        taskSELECT_HIGHEST_PRIORITY_TASK();
 800273e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f1c3 031f 	rsb	r3, r3, #31
 800274c:	2114      	movs	r1, #20
 800274e:	4359      	muls	r1, r3
 8002750:	1850      	adds	r0, r2, r1
 8002752:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002754:	b944      	cbnz	r4, 8002768 <vTaskSwitchContext+0x40>
    __asm volatile
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	e7fe      	b.n	8002766 <vTaskSwitchContext+0x3e>
 8002768:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800276a:	4411      	add	r1, r2
 800276c:	6864      	ldr	r4, [r4, #4]
 800276e:	6444      	str	r4, [r0, #68]	; 0x44
 8002770:	3148      	adds	r1, #72	; 0x48
 8002772:	428c      	cmp	r4, r1
 8002774:	bf04      	itt	eq
 8002776:	6861      	ldreq	r1, [r4, #4]
 8002778:	6441      	streq	r1, [r0, #68]	; 0x44
 800277a:	2114      	movs	r1, #20
 800277c:	fb01 2303 	mla	r3, r1, r3, r2
        traceTASK_SWITCHED_IN();
 8002780:	4c0c      	ldr	r4, [pc, #48]	; (80027b4 <vTaskSwitchContext+0x8c>)
        taskSELECT_HIGHEST_PRIORITY_TASK();
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
        traceTASK_SWITCHED_IN();
 8002788:	2301      	movs	r3, #1
 800278a:	6023      	str	r3, [r4, #0]
 800278c:	f001 f8ef 	bl	800396e <prvTraceGetCurrentTaskHandle>
 8002790:	f001 f8aa 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <vTaskSwitchContext+0x90>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	4218      	tst	r0, r3
 800279a:	d006      	beq.n	80027aa <vTaskSwitchContext+0x82>
 800279c:	f001 f8e7 	bl	800396e <prvTraceGetCurrentTaskHandle>
 80027a0:	f001 f89d 	bl	80038de <prvTraceGetTaskNumberLow16>
 80027a4:	b2c0      	uxtb	r0, r0
 80027a6:	f001 fdc5 	bl	8004334 <prvTraceStoreTaskswitch>
 80027aa:	2302      	movs	r3, #2
 80027ac:	6023      	str	r3, [r4, #0]
}
 80027ae:	e7c3      	b.n	8002738 <vTaskSwitchContext+0x10>
 80027b0:	20000034 	.word	0x20000034
 80027b4:	2000588c 	.word	0x2000588c
 80027b8:	20003f00 	.word	0x20003f00

080027bc <vTaskPlaceOnEventList>:
{
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	460d      	mov	r5, r1
    configASSERT( pxEventList );
 80027c0:	b940      	cbnz	r0, 80027d4 <vTaskPlaceOnEventList+0x18>
 80027c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	e7fe      	b.n	80027d2 <vTaskPlaceOnEventList+0x16>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027d4:	4c11      	ldr	r4, [pc, #68]	; (800281c <vTaskPlaceOnEventList+0x60>)
 80027d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80027d8:	3118      	adds	r1, #24
 80027da:	f7fe fe43 	bl	8001464 <vListInsert>
    if ( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80027de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80027e0:	3004      	adds	r0, #4
 80027e2:	f7fe fe56 	bl	8001492 <uxListRemove>
 80027e6:	b948      	cbnz	r0, 80027fc <vTaskPlaceOnEventList+0x40>
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80027e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80027ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027f0:	2201      	movs	r2, #1
 80027f2:	408a      	lsls	r2, r1
 80027f4:	ea23 0302 	bic.w	r3, r3, r2
 80027f8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        if ( xTicksToWait == portMAX_DELAY )
 80027fc:	1c6b      	adds	r3, r5, #1
 80027fe:	d106      	bne.n	800280e <vTaskPlaceOnEventList+0x52>
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002800:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <vTaskPlaceOnEventList+0x60>)
}
 8002804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002808:	3104      	adds	r1, #4
 800280a:	f7fe be1f 	b.w	800144c <vListInsertEnd>
            xTimeToWake = xTickCount + xTicksToWait;
 800280e:	6b60      	ldr	r0, [r4, #52]	; 0x34
            prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002810:	4428      	add	r0, r5
}
 8002812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002816:	f7ff bbcb 	b.w	8001fb0 <prvAddCurrentTaskToDelayedList>
 800281a:	bf00      	nop
 800281c:	20000034 	.word	0x20000034

08002820 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = ( TCB_t* ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002820:	68c3      	ldr	r3, [r0, #12]
{
 8002822:	b573      	push	{r0, r1, r4, r5, r6, lr}
    pxUnblockedTCB = ( TCB_t* ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002824:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8002826:	b944      	cbnz	r4, 800283a <xTaskRemoveFromEventList+0x1a>
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	e7fe      	b.n	8002838 <xTaskRemoveFromEventList+0x18>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800283a:	f104 0118 	add.w	r1, r4, #24
    if ( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800283e:	4d1b      	ldr	r5, [pc, #108]	; (80028ac <xTaskRemoveFromEventList+0x8c>)
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002840:	9101      	str	r1, [sp, #4]
 8002842:	4608      	mov	r0, r1
 8002844:	f7fe fe25 	bl	8001492 <uxListRemove>
    if ( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002848:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800284c:	9901      	ldr	r1, [sp, #4]
 800284e:	bb53      	cbnz	r3, 80028a6 <xTaskRemoveFromEventList+0x86>
        ( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002850:	1d26      	adds	r6, r4, #4
 8002852:	4630      	mov	r0, r6
 8002854:	f7fe fe1d 	bl	8001492 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002858:	4620      	mov	r0, r4
 800285a:	f001 f845 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <xTaskRemoveFromEventList+0x90>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	4218      	tst	r0, r3
 8002864:	d005      	beq.n	8002872 <xTaskRemoveFromEventList+0x52>
 8002866:	4620      	mov	r0, r4
 8002868:	f001 f839 	bl	80038de <prvTraceGetTaskNumberLow16>
 800286c:	b2c0      	uxtb	r0, r0
 800286e:	f001 fc2d 	bl	80040cc <prvTraceStoreTaskReady>
 8002872:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002874:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
 8002878:	2301      	movs	r3, #1
 800287a:	4093      	lsls	r3, r2
 800287c:	430b      	orrs	r3, r1
 800287e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <xTaskRemoveFromEventList+0x94>)
 8002884:	2014      	movs	r0, #20
 8002886:	4631      	mov	r1, r6
 8002888:	fb00 3002 	mla	r0, r0, r2, r3
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800288c:	f7fe fdde 	bl	800144c <vListInsertEnd>
    if ( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002890:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002892:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	429a      	cmp	r2, r3
        xYieldPending = pdTRUE;
 8002898:	bf8a      	itet	hi
 800289a:	2001      	movhi	r0, #1
        xReturn = pdFALSE;
 800289c:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 800289e:	f8c5 0124 	strhi.w	r0, [r5, #292]	; 0x124
}
 80028a2:	b002      	add	sp, #8
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80028a6:	f105 0014 	add.w	r0, r5, #20
 80028aa:	e7ef      	b.n	800288c <xTaskRemoveFromEventList+0x6c>
 80028ac:	20000034 	.word	0x20000034
 80028b0:	20003f00 	.word	0x20003f00
 80028b4:	20000074 	.word	0x20000074

080028b8 <vTaskSetTimeOutState>:
    configASSERT( pxTimeOut );
 80028b8:	b940      	cbnz	r0, 80028cc <vTaskSetTimeOutState+0x14>
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	e7fe      	b.n	80028ca <vTaskSetTimeOutState+0x12>
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <vTaskSetTimeOutState+0x24>)
 80028ce:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    pxTimeOut->xTimeOnEntering = xTickCount;
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028d4:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80028d6:	6043      	str	r3, [r0, #4]
}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000034 	.word	0x20000034

080028e0 <xTaskCheckForTimeOut>:
{
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
 80028e4:	4604      	mov	r4, r0
 80028e6:	b940      	cbnz	r0, 80028fa <xTaskCheckForTimeOut+0x1a>
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	e7fe      	b.n	80028f8 <xTaskCheckForTimeOut+0x18>
    configASSERT( pxTicksToWait );
 80028fa:	b941      	cbnz	r1, 800290e <xTaskCheckForTimeOut+0x2e>
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	e7fe      	b.n	800290c <xTaskCheckForTimeOut+0x2c>
    taskENTER_CRITICAL();
 800290e:	f000 f9b9 	bl	8002c84 <vPortEnterCritical>
        if ( *pxTicksToWait == portMAX_DELAY )
 8002912:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <xTaskCheckForTimeOut+0x6c>)
        if ( *pxTicksToWait == portMAX_DELAY )
 8002916:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 8002918:	6b51      	ldr	r1, [r2, #52]	; 0x34
        if ( *pxTicksToWait == portMAX_DELAY )
 800291a:	d010      	beq.n	800293e <xTaskCheckForTimeOut+0x5e>
            if ( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800291c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
 8002920:	e9d4 6200 	ldrd	r6, r2, [r4]
 8002924:	4286      	cmp	r6, r0
 8002926:	d001      	beq.n	800292c <xTaskCheckForTimeOut+0x4c>
 8002928:	4291      	cmp	r1, r2
 800292a:	d20d      	bcs.n	8002948 <xTaskCheckForTimeOut+0x68>
            else if ( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800292c:	1a88      	subs	r0, r1, r2
 800292e:	4283      	cmp	r3, r0
 8002930:	d90a      	bls.n	8002948 <xTaskCheckForTimeOut+0x68>
                *pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002932:	1a5b      	subs	r3, r3, r1
 8002934:	4413      	add	r3, r2
 8002936:	602b      	str	r3, [r5, #0]
                vTaskSetTimeOutState( pxTimeOut );
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff ffbd 	bl	80028b8 <vTaskSetTimeOutState>
            xReturn = pdFALSE;
 800293e:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8002940:	f000 f9c0 	bl	8002cc4 <vPortExitCritical>
}
 8002944:	4620      	mov	r0, r4
 8002946:	bd70      	pop	{r4, r5, r6, pc}
                xReturn = pdTRUE;
 8002948:	2401      	movs	r4, #1
 800294a:	e7f9      	b.n	8002940 <xTaskCheckForTimeOut+0x60>
 800294c:	20000034 	.word	0x20000034

08002950 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8002950:	4b02      	ldr	r3, [pc, #8]	; (800295c <vTaskMissedYield+0xc>)
 8002952:	2201      	movs	r2, #1
 8002954:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000034 	.word	0x20000034

08002960 <uxTaskGetTaskNumber>:
    if ( xTask != NULL )
 8002960:	b100      	cbz	r0, 8002964 <uxTaskGetTaskNumber+0x4>
        uxReturn = pxTCB->uxTaskNumber;
 8002962:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
 8002964:	4770      	bx	lr

08002966 <vTaskSetTaskNumber>:
    if ( xTask != NULL )
 8002966:	b100      	cbz	r0, 800296a <vTaskSetTaskNumber+0x4>
        pxTCB->uxTaskNumber = uxHandle;
 8002968:	6481      	str	r1, [r0, #72]	; 0x48
}
 800296a:	4770      	bx	lr

0800296c <uxTaskGetStackHighWaterMark>:
    pxTCB = prvGetTCBFromHandle( xTask );
 800296c:	b908      	cbnz	r0, 8002972 <uxTaskGetStackHighWaterMark+0x6>
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <uxTaskGetStackHighWaterMark+0x1c>)
 8002970:	6b18      	ldr	r0, [r3, #48]	; 0x30
        pucEndOfStack = ( uint8_t* ) pxTCB->pxStack;
 8002972:	6b02      	ldr	r2, [r0, #48]	; 0x30
    uint32_t ulCount = 0U;
 8002974:	2000      	movs	r0, #0
    while ( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002976:	5c13      	ldrb	r3, [r2, r0]
 8002978:	2ba5      	cmp	r3, #165	; 0xa5
 800297a:	d002      	beq.n	8002982 <uxTaskGetStackHighWaterMark+0x16>
}
 800297c:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8002980:	4770      	bx	lr
        ulCount++;
 8002982:	3001      	adds	r0, #1
 8002984:	e7f7      	b.n	8002976 <uxTaskGetStackHighWaterMark+0xa>
 8002986:	bf00      	nop
 8002988:	20000034 	.word	0x20000034

0800298c <xTaskGetCurrentTaskHandle>:
{
    TaskHandle_t xReturn;
    /* A critical section is not required as this is not called from
    an interrupt and the current TCB will always be the same for any
    individual execution thread. */
    xReturn = pxCurrentTCB;
 800298c:	4b01      	ldr	r3, [pc, #4]	; (8002994 <xTaskGetCurrentTaskHandle+0x8>)
 800298e:	6b18      	ldr	r0, [r3, #48]	; 0x30
    return xReturn;
}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000034 	.word	0x20000034

08002998 <xTaskGetSchedulerState>:

BaseType_t xTaskGetSchedulerState( void )
{
    BaseType_t xReturn;

    if ( xSchedulerRunning == pdFALSE )
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <xTaskGetSchedulerState+0x1c>)
 800299a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800299e:	b132      	cbz	r2, 80029ae <xTaskGetSchedulerState+0x16>
    {
        xReturn = taskSCHEDULER_NOT_STARTED;
    }
    else
    {
        if ( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029a0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        {
            xReturn = taskSCHEDULER_RUNNING;
        }
        else
        {
            xReturn = taskSCHEDULER_SUSPENDED;
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2002      	moveq	r0, #2
 80029aa:	2000      	movne	r0, #0
 80029ac:	4770      	bx	lr
        xReturn = taskSCHEDULER_NOT_STARTED;
 80029ae:	2001      	movs	r0, #1
        }
    }

    return xReturn;
}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000034 	.word	0x20000034

080029b8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
{
 80029b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TCB_t* const pxTCB = ( TCB_t* ) pxMutexHolder;

    /* If the mutex was given back by an interrupt while the queue was
    locked then the mutex holder might now be NULL. */
    if ( pxMutexHolder != NULL )
 80029bc:	4604      	mov	r4, r0
 80029be:	2800      	cmp	r0, #0
 80029c0:	d070      	beq.n	8002aa4 <vTaskPriorityInherit+0xec>
    {
        /* If the holder of the mutex has a priority below the priority of
        the task attempting to obtain the mutex then it will temporarily
        inherit the priority of the task attempting to obtain the mutex. */
        if ( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80029c2:	4d39      	ldr	r5, [pc, #228]	; (8002aa8 <vTaskPriorityInherit+0xf0>)
 80029c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80029c6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80029c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d26a      	bcs.n	8002aa4 <vTaskPriorityInherit+0xec>
        {
            /* Adjust the mutex holder state to account for its new
            priority.  Only reset the event list item value if the value is
            not	being used for anything else. */
            if ( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80029ce:	6982      	ldr	r2, [r0, #24]
                mtCOVERAGE_TEST_MARKER();
            }

            /* If the task being modified is in the ready state it will need
            to be moved into a new list. */
            if ( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80029d0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002ab0 <vTaskPriorityInherit+0xf8>
 80029d4:	4f35      	ldr	r7, [pc, #212]	; (8002aac <vTaskPriorityInherit+0xf4>)
            if ( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80029d6:	2a00      	cmp	r2, #0
                listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d8:	bfa1      	itttt	ge
 80029da:	6b2a      	ldrge	r2, [r5, #48]	; 0x30
 80029dc:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80029de:	f1c2 0207 	rsbge	r2, r2, #7
 80029e2:	6182      	strge	r2, [r0, #24]
            if ( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80029e4:	2614      	movs	r6, #20
 80029e6:	6942      	ldr	r2, [r0, #20]
 80029e8:	fb06 8303 	mla	r3, r6, r3, r8
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d124      	bne.n	8002a3a <vTaskPriorityInherit+0x82>
            {
                if ( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80029f0:	f100 0904 	add.w	r9, r0, #4
 80029f4:	4648      	mov	r0, r9
 80029f6:	f7fe fd4c 	bl	8001492 <uxListRemove>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d043      	beq.n	8002a86 <vTaskPriorityInherit+0xce>
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                /* Inherit the priority before being moved into the new list. */
                pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80029fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	62e3      	str	r3, [r4, #44]	; 0x2c
                prvAddTaskToReadyList( pxTCB );
 8002a04:	4620      	mov	r0, r4
 8002a06:	f000 ff6f 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8002a0a:	883b      	ldrh	r3, [r7, #0]
 8002a0c:	4218      	tst	r0, r3
 8002a0e:	d005      	beq.n	8002a1c <vTaskPriorityInherit+0x64>
 8002a10:	4620      	mov	r0, r4
 8002a12:	f000 ff64 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002a16:	b2c0      	uxtb	r0, r0
 8002a18:	f001 fb58 	bl	80040cc <prvTraceStoreTaskReady>
 8002a1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a1e:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
 8002a22:	2301      	movs	r3, #1
 8002a24:	4093      	lsls	r3, r2
 8002a26:	2014      	movs	r0, #20
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	fb00 8002 	mla	r0, r0, r2, r8
 8002a2e:	4649      	mov	r1, r9
 8002a30:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8002a34:	f7fe fd0a 	bl	800144c <vListInsertEnd>
 8002a38:	e002      	b.n	8002a40 <vTaskPriorityInherit+0x88>
            }
            else
            {
                /* Just inherit the priority. */
                pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002a3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
            }

            traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
 8002a40:	4620      	mov	r0, r4
 8002a42:	f000 ff51 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8002a46:	883b      	ldrh	r3, [r7, #0]
 8002a48:	4218      	tst	r0, r3
 8002a4a:	d02b      	beq.n	8002aa4 <vTaskPriorityInherit+0xec>
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f000 ff46 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002a52:	4606      	mov	r6, r0
 8002a54:	4620      	mov	r0, r4
 8002a56:	f000 ff42 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002a5a:	b2c1      	uxtb	r1, r0
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f001 f929 	bl	8003cb4 <prvTraceGetPriorityProperty>
 8002a62:	b2f2      	uxtb	r2, r6
 8002a64:	4603      	mov	r3, r0
 8002a66:	2103      	movs	r1, #3
 8002a68:	208e      	movs	r0, #142	; 0x8e
 8002a6a:	f001 fbed 	bl	8004248 <prvTraceStoreKernelCallWithParam>
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f000 ff35 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002a74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a76:	b2c1      	uxtb	r1, r0
 8002a78:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002a7c:	2003      	movs	r0, #3
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
 8002a82:	f001 b903 	b.w	8003c8c <prvTraceSetPriorityProperty>
                    taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002a86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a88:	fb06 5601 	mla	r6, r6, r1, r5
 8002a8c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1b5      	bne.n	80029fe <vTaskPriorityInherit+0x46>
 8002a92:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8002a96:	2201      	movs	r2, #1
 8002a98:	408a      	lsls	r2, r1
 8002a9a:	ea23 0302 	bic.w	r3, r3, r2
 8002a9e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8002aa2:	e7ac      	b.n	80029fe <vTaskPriorityInherit+0x46>
}
 8002aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aa8:	20000034 	.word	0x20000034
 8002aac:	20003f00 	.word	0x20003f00
 8002ab0:	20000074 	.word	0x20000074

08002ab4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
{
 8002ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TCB_t* const pxTCB = ( TCB_t* ) pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

    if ( pxMutexHolder != NULL )
 8002ab8:	4604      	mov	r4, r0
 8002aba:	b910      	cbnz	r0, 8002ac2 <xTaskPriorityDisinherit+0xe>
    BaseType_t xReturn = pdFALSE;
 8002abc:	2000      	movs	r0, #0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
 8002abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( pxTCB == pxCurrentTCB );
 8002ac2:	4d3d      	ldr	r5, [pc, #244]	; (8002bb8 <xTaskPriorityDisinherit+0x104>)
 8002ac4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002ac6:	4283      	cmp	r3, r0
 8002ac8:	d008      	beq.n	8002adc <xTaskPriorityDisinherit+0x28>
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	e7fe      	b.n	8002ada <xTaskPriorityDisinherit+0x26>
        configASSERT( pxTCB->uxMutexesHeld );
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	b943      	cbnz	r3, 8002af2 <xTaskPriorityDisinherit+0x3e>
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	e7fe      	b.n	8002af0 <xTaskPriorityDisinherit+0x3c>
        if ( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002af2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002af4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
        ( pxTCB->uxMutexesHeld )--;
 8002af6:	3b01      	subs	r3, #1
        if ( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002af8:	4291      	cmp	r1, r2
        ( pxTCB->uxMutexesHeld )--;
 8002afa:	6503      	str	r3, [r0, #80]	; 0x50
        if ( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002afc:	d0de      	beq.n	8002abc <xTaskPriorityDisinherit+0x8>
            if ( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1dc      	bne.n	8002abc <xTaskPriorityDisinherit+0x8>
                if ( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002b02:	1d06      	adds	r6, r0, #4
 8002b04:	4630      	mov	r0, r6
 8002b06:	f7fe fcc4 	bl	8001492 <uxListRemove>
 8002b0a:	b968      	cbnz	r0, 8002b28 <xTaskPriorityDisinherit+0x74>
                    taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b0e:	2114      	movs	r1, #20
 8002b10:	fb01 5100 	mla	r1, r1, r0, r5
 8002b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b16:	b93b      	cbnz	r3, 8002b28 <xTaskPriorityDisinherit+0x74>
 8002b18:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4082      	lsls	r2, r0
 8002b20:	ea23 0302 	bic.w	r3, r3, r2
 8002b24:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
                traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002b28:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002bc0 <xTaskPriorityDisinherit+0x10c>
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 fedb 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8002b32:	f8b8 3000 	ldrh.w	r3, [r8]
 8002b36:	4218      	tst	r0, r3
 8002b38:	d019      	beq.n	8002b6e <xTaskPriorityDisinherit+0xba>
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 fecf 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002b40:	4607      	mov	r7, r0
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 fecb 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002b48:	b2c1      	uxtb	r1, r0
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	f001 f8b2 	bl	8003cb4 <prvTraceGetPriorityProperty>
 8002b50:	b2fa      	uxtb	r2, r7
 8002b52:	4603      	mov	r3, r0
 8002b54:	2103      	movs	r1, #3
 8002b56:	208f      	movs	r0, #143	; 0x8f
 8002b58:	f001 fb76 	bl	8004248 <prvTraceStoreKernelCallWithParam>
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f000 febe 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002b62:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8002b66:	b2c1      	uxtb	r1, r0
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f001 f88f 	bl	8003c8c <prvTraceSetPriorityProperty>
                pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002b6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b70:	62e3      	str	r3, [r4, #44]	; 0x2c
                listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b72:	f1c3 0307 	rsb	r3, r3, #7
 8002b76:	61a3      	str	r3, [r4, #24]
                prvAddTaskToReadyList( pxTCB );
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f000 feb5 	bl	80038e8 <prvTraceGetTaskNumberHigh16>
 8002b7e:	f8b8 3000 	ldrh.w	r3, [r8]
 8002b82:	4218      	tst	r0, r3
 8002b84:	d005      	beq.n	8002b92 <xTaskPriorityDisinherit+0xde>
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 fea9 	bl	80038de <prvTraceGetTaskNumberLow16>
 8002b8c:	b2c0      	uxtb	r0, r0
 8002b8e:	f001 fa9d 	bl	80040cc <prvTraceStoreTaskReady>
 8002b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b94:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
 8002b98:	2401      	movs	r4, #1
 8002b9a:	fa04 f302 	lsl.w	r3, r4, r2
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <xTaskPriorityDisinherit+0x108>)
 8002ba6:	2014      	movs	r0, #20
 8002ba8:	fb00 3002 	mla	r0, r0, r2, r3
 8002bac:	4631      	mov	r1, r6
 8002bae:	f7fe fc4d 	bl	800144c <vListInsertEnd>
                xReturn = pdTRUE;
 8002bb2:	4620      	mov	r0, r4
    return xReturn;
 8002bb4:	e783      	b.n	8002abe <xTaskPriorityDisinherit+0xa>
 8002bb6:	bf00      	nop
 8002bb8:	20000034 	.word	0x20000034
 8002bbc:	20000074 	.word	0x20000074
 8002bc0:	20003f00 	.word	0x20003f00

08002bc4 <pvTaskIncrementMutexHeldCount>:

void* pvTaskIncrementMutexHeldCount( void )
{
    /* If xSemaphoreCreateMutex() is called before any tasks have been created
    then pxCurrentTCB will be NULL. */
    if ( pxCurrentTCB != NULL )
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <pvTaskIncrementMutexHeldCount+0x14>)
 8002bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc8:	b11a      	cbz	r2, 8002bd2 <pvTaskIncrementMutexHeldCount+0xe>
    {
        ( pxCurrentTCB->uxMutexesHeld )++;
 8002bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bcc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002bce:	3201      	adds	r2, #1
 8002bd0:	650a      	str	r2, [r1, #80]	; 0x50
    }

    return pxCurrentTCB;
 8002bd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000034 	.word	0x20000034

08002bdc <prvTaskExitError>:
    its caller as there is nothing to return to.  If a task wants to exit it
    should instead call vTaskDelete( NULL ).

    Artificially force an assert() to be triggered if configASSERT() is
    defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <prvTaskExitError+0x2c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	d008      	beq.n	8002bf6 <prvTaskExitError+0x1a>
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	e7fe      	b.n	8002bf4 <prvTaskExitError+0x18>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
    portDISABLE_INTERRUPTS();

    for ( ;; );
 8002c06:	e7fe      	b.n	8002c06 <prvTaskExitError+0x2a>
 8002c08:	20000004 	.word	0x20000004

08002c0c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile(
 8002c0c:	4806      	ldr	r0, [pc, #24]	; (8002c28 <prvPortStartFirstTask+0x1c>)
 8002c0e:	6800      	ldr	r0, [r0, #0]
 8002c10:	6800      	ldr	r0, [r0, #0]
 8002c12:	f380 8808 	msr	MSP, r0
 8002c16:	b662      	cpsie	i
 8002c18:	b661      	cpsie	f
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	df00      	svc	0
 8002c24:	bf00      	nop
        " dsb					\n"
        " isb					\n"
        " svc 0					\n" /* System call to start first task. */
        " nop					\n"
    );
}
 8002c26:	0000      	.short	0x0000
 8002c28:	e000ed08 	.word	0xe000ed08

08002c2c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002c2c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002c3c <vPortEnableVFP+0x10>
 8002c30:	6801      	ldr	r1, [r0, #0]
 8002c32:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c36:	6001      	str	r1, [r0, #0]
 8002c38:	4770      	bx	lr
        "								\n"
        "	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						"
    );
}
 8002c3a:	0000      	.short	0x0000
 8002c3c:	e000ed88 	.word	0xe000ed88

08002c40 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    *pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002c44:	e940 1302 	strd	r1, r3, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <pxPortInitialiseStack+0x20>)
 8002c4a:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002c4e:	f06f 0302 	mvn.w	r3, #2
    *pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c52:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002c56:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002c5a:	3844      	subs	r0, #68	; 0x44
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	08002bdd 	.word	0x08002bdd

08002c64 <SVC_Handler>:
    __asm volatile (
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <pxCurrentTCBConst2>)
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	6808      	ldr	r0, [r1, #0]
 8002c6a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6e:	f380 8809 	msr	PSP, r0
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f04f 0000 	mov.w	r0, #0
 8002c7a:	f380 8811 	msr	BASEPRI, r0
 8002c7e:	4770      	bx	lr

08002c80 <pxCurrentTCBConst2>:
 8002c80:	20000064 	.word	0x20000064

08002c84 <vPortEnterCritical>:
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8002c94:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <vPortEnterCritical+0x3c>)
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	3301      	adds	r3, #1
    if ( uxCriticalNesting == 1 )
 8002c9a:	2b01      	cmp	r3, #1
    uxCriticalNesting++;
 8002c9c:	6013      	str	r3, [r2, #0]
    if ( uxCriticalNesting == 1 )
 8002c9e:	d10e      	bne.n	8002cbe <vPortEnterCritical+0x3a>
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ca0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ca4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	b143      	cbz	r3, 8002cbe <vPortEnterCritical+0x3a>
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	e7fe      	b.n	8002cbc <vPortEnterCritical+0x38>
}
 8002cbe:	4770      	bx	lr
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 8002cc4:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <vPortExitCritical+0x24>)
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	b943      	cbnz	r3, 8002cdc <vPortExitCritical+0x18>
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	e7fe      	b.n	8002cda <vPortExitCritical+0x16>
    uxCriticalNesting--;
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	6013      	str	r3, [r2, #0]
    if ( uxCriticalNesting == 0 )
 8002ce0:	b90b      	cbnz	r3, 8002ce6 <vPortExitCritical+0x22>
    __asm volatile
 8002ce2:	f383 8811 	msr	BASEPRI, r3
}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000004 	.word	0x20000004

08002cec <PendSV_Handler>:
    __asm volatile
 8002cec:	f3ef 8009 	mrs	r0, PSP
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <pxCurrentTCBConst>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	f01e 0f10 	tst.w	lr, #16
 8002cfc:	bf08      	it	eq
 8002cfe:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d02:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d06:	6010      	str	r0, [r2, #0]
 8002d08:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002d0c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d10:	f380 8811 	msr	BASEPRI, r0
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f7ff fd04 	bl	8002728 <vTaskSwitchContext>
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	f380 8811 	msr	BASEPRI, r0
 8002d28:	bc08      	pop	{r3}
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	6808      	ldr	r0, [r1, #0]
 8002d2e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d32:	f01e 0f10 	tst.w	lr, #16
 8002d36:	bf08      	it	eq
 8002d38:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d3c:	f380 8809 	msr	PSP, r0
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop

08002d48 <pxCurrentTCBConst>:
 8002d48:	20000064 	.word	0x20000064

08002d4c <xPortSysTickHandler>:
{
 8002d4c:	b508      	push	{r3, lr}
    __asm volatile
 8002d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d52:	f04f 0250 	mov.w	r2, #80	; 0x50
 8002d56:	f382 8811 	msr	BASEPRI, r2
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
        if ( xTaskIncrementTick() != pdFALSE )
 8002d62:	f7ff fac1 	bl	80022e8 <xTaskIncrementTick>
 8002d66:	b128      	cbz	r0, 8002d74 <xPortSysTickHandler+0x28>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
    __asm volatile
 8002d74:	2300      	movs	r3, #0
 8002d76:	f383 8811 	msr	BASEPRI, r3
}
 8002d7a:	bd08      	pop	{r3, pc}

08002d7c <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <vPortSetupTimerInterrupt+0x1c>)
 8002d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d88:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d90:	2307      	movs	r3, #7
 8002d92:	6113      	str	r3, [r2, #16]
}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000000 	.word	0x20000000

08002d9c <xPortStartScheduler>:
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8002da0:	b513      	push	{r0, r1, r4, lr}
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <xPortStartScheduler+0xd8>)
 8002da4:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8002da8:	4291      	cmp	r1, r2
 8002daa:	d108      	bne.n	8002dbe <xPortStartScheduler+0x22>
    __asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	e7fe      	b.n	8002dbc <xPortStartScheduler+0x20>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dbe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <xPortStartScheduler+0xdc>)
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d108      	bne.n	8002dda <xPortStartScheduler+0x3e>
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	e7fe      	b.n	8002dd8 <xPortStartScheduler+0x3c>
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <xPortStartScheduler+0xe0>)
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	9201      	str	r2, [sp, #4]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002de2:	22ff      	movs	r2, #255	; 0xff
 8002de4:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002de6:	781b      	ldrb	r3, [r3, #0]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002de8:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <xPortStartScheduler+0xe4>)
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002df0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002df8:	7013      	strb	r3, [r2, #0]
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	6053      	str	r3, [r2, #4]
        while ( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002e04:	0600      	lsls	r0, r0, #24
 8002e06:	f103 34ff 	add.w	r4, r3, #4294967295
 8002e0a:	d429      	bmi.n	8002e60 <xPortStartScheduler+0xc4>
 8002e0c:	b101      	cbz	r1, 8002e10 <xPortStartScheduler+0x74>
 8002e0e:	6053      	str	r3, [r2, #4]
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e10:	6853      	ldr	r3, [r2, #4]
 8002e12:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e18:	6053      	str	r3, [r2, #4]
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e1a:	9b01      	ldr	r3, [sp, #4]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <xPortStartScheduler+0xe0>)
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e1e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	7013      	strb	r3, [r2, #0]
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e26:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002e2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e2e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e32:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002e36:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e3a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 8002e3e:	f7ff ff9d 	bl	8002d7c <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <xPortStartScheduler+0xe8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
    vPortEnableVFP();
 8002e48:	f7ff fef0 	bl	8002c2c <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e4c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8002e50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e54:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
    prvPortStartFirstTask();
 8002e58:	f7ff fed8 	bl	8002c0c <prvPortStartFirstTask>
    prvTaskExitError();
 8002e5c:	f7ff febe 	bl	8002bdc <prvTaskExitError>
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f88d 3003 	strb.w	r3, [sp, #3]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	4623      	mov	r3, r4
 8002e70:	e7c6      	b.n	8002e00 <xPortStartScheduler+0x64>
 8002e72:	bf00      	nop
 8002e74:	410fc271 	.word	0x410fc271
 8002e78:	410fc270 	.word	0x410fc270
 8002e7c:	e000e400 	.word	0xe000e400
 8002e80:	2000015c 	.word	0x2000015c
 8002e84:	20000004 	.word	0x20000004

08002e88 <vPortValidateInterruptPriority>:
void vPortValidateInterruptPriority( void )
{
    uint32_t ulCurrentInterrupt;
    uint8_t ucCurrentPriority;
    /* Obtain the number of the currently executing interrupt. */
    __asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002e88:	f3ef 8305 	mrs	r3, IPSR

    /* Is the interrupt number a user defined interrupt? */
    if ( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <vPortValidateInterruptPriority+0x4c>)
 8002e90:	d90d      	bls.n	8002eae <vPortValidateInterruptPriority+0x26>
    {
        /* Look up the interrupt's priority. */
        ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e92:	4911      	ldr	r1, [pc, #68]	; (8002ed8 <vPortValidateInterruptPriority+0x50>)
 8002e94:	5c5b      	ldrb	r3, [r3, r1]
        interrupt entry is as fast and simple as possible.

        The following links provide detailed information:
        http://www.freertos.org/RTOS-Cortex-M3-M4.html
        http://www.freertos.org/FAQHelp.html */
        configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e96:	7811      	ldrb	r1, [r2, #0]
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	d908      	bls.n	8002eae <vPortValidateInterruptPriority+0x26>
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	e7fe      	b.n	8002eac <vPortValidateInterruptPriority+0x24>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredicable behaviour. */
    configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002eae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002eb2:	6852      	ldr	r2, [r2, #4]
 8002eb4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8002eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d908      	bls.n	8002ed2 <vPortValidateInterruptPriority+0x4a>
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	e7fe      	b.n	8002ed0 <vPortValidateInterruptPriority+0x48>
}
 8002ed2:	4770      	bx	lr
 8002ed4:	2000015c 	.word	0x2000015c
 8002ed8:	e000e3f0 	.word	0xe000e3f0

08002edc <prvInsertBlockIntoFreeList>:
    BlockLink_t* pxIterator;
    uint8_t* puc;

    /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
    for ( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <prvInsertBlockIntoFreeList+0x40>)
{
 8002ede:	b530      	push	{r4, r5, lr}
 8002ee0:	461d      	mov	r5, r3
    for ( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4283      	cmp	r3, r0
 8002ee8:	d3fb      	bcc.n	8002ee2 <prvInsertBlockIntoFreeList+0x6>

    /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
    puc = ( uint8_t* ) pxIterator;

    if ( ( puc + pxIterator->xBlockSize ) == ( uint8_t* ) pxBlockToInsert )
 8002eea:	6854      	ldr	r4, [r2, #4]
 8002eec:	1911      	adds	r1, r2, r4
 8002eee:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ef0:	bf01      	itttt	eq
 8002ef2:	6841      	ldreq	r1, [r0, #4]
 8002ef4:	4610      	moveq	r0, r2
 8002ef6:	1909      	addeq	r1, r1, r4
 8002ef8:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
    puc = ( uint8_t* ) pxBlockToInsert;

    if ( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t* ) pxIterator->pxNextFreeBlock )
 8002efa:	6844      	ldr	r4, [r0, #4]
 8002efc:	1901      	adds	r1, r0, r4
 8002efe:	428b      	cmp	r3, r1
 8002f00:	d106      	bne.n	8002f10 <prvInsertBlockIntoFreeList+0x34>
    {
        if ( pxIterator->pxNextFreeBlock != pxEnd )
 8002f02:	68a9      	ldr	r1, [r5, #8]
 8002f04:	428b      	cmp	r3, r1
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f06:	bf1f      	itttt	ne
 8002f08:	6859      	ldrne	r1, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f0a:	681b      	ldrne	r3, [r3, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f0c:	1909      	addne	r1, r1, r4
 8002f0e:	6041      	strne	r1, [r0, #4]

    /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's pxNextFreeBlock pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
    if ( pxIterator != pxBlockToInsert )
 8002f10:	4290      	cmp	r0, r2
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f12:	6003      	str	r3, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f14:	bf18      	it	ne
 8002f16:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f18:	bd30      	pop	{r4, r5, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000164 	.word	0x20000164

08002f20 <pvPortMalloc>:
{
 8002f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if ( pxEnd == NULL )
 8002f24:	4d42      	ldr	r5, [pc, #264]	; (8003030 <pvPortMalloc+0x110>)
{
 8002f26:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8002f28:	f7ff f9c6 	bl	80022b8 <vTaskSuspendAll>
        if ( pxEnd == NULL )
 8002f2c:	68ab      	ldr	r3, [r5, #8]
 8002f2e:	b9f3      	cbnz	r3, 8002f6e <pvPortMalloc+0x4e>
    uxAddress = ( size_t ) ucHeap;
 8002f30:	4a40      	ldr	r2, [pc, #256]	; (8003034 <pvPortMalloc+0x114>)
    if ( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f32:	0750      	lsls	r0, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f34:	bf1f      	itttt	ne
 8002f36:	1dd1      	addne	r1, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f38:	f021 0107 	bicne.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f3c:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002f40:	1a5b      	subne	r3, r3, r1
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f42:	bf14      	ite	ne
 8002f44:	460a      	movne	r2, r1
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f46:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f4a:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8002f4c:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f4e:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8002f52:	2100      	movs	r1, #0
 8002f54:	6069      	str	r1, [r5, #4]
    xStart.pxNextFreeBlock = ( void* ) pucAlignedHeap;
 8002f56:	602a      	str	r2, [r5, #0]
    pxEnd->pxNextFreeBlock = NULL;
 8002f58:	e9c3 1100 	strd	r1, r1, [r3]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f5c:	1a99      	subs	r1, r3, r2
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f5e:	e9c5 1103 	strd	r1, r1, [r5, #12]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f62:	e9c2 3100 	strd	r3, r1, [r2]
    pxEnd = ( void* ) uxAddress;
 8002f66:	60ab      	str	r3, [r5, #8]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f6c:	616b      	str	r3, [r5, #20]
        if ( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f6e:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8002f72:	ea19 0f04 	tst.w	r9, r4
 8002f76:	d150      	bne.n	800301a <pvPortMalloc+0xfa>
            if ( xWantedSize > 0 )
 8002f78:	2c00      	cmp	r4, #0
 8002f7a:	d04e      	beq.n	800301a <pvPortMalloc+0xfa>
                xWantedSize += xHeapStructSize;
 8002f7c:	3408      	adds	r4, #8
                if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f7e:	0761      	lsls	r1, r4, #29
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f80:	bf1c      	itt	ne
 8002f82:	f024 0407 	bicne.w	r4, r4, #7
 8002f86:	3408      	addne	r4, #8
            if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f88:	2c00      	cmp	r4, #0
 8002f8a:	d046      	beq.n	800301a <pvPortMalloc+0xfa>
 8002f8c:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8002f90:	45a0      	cmp	r8, r4
 8002f92:	d342      	bcc.n	800301a <pvPortMalloc+0xfa>
                pxBlock = xStart.pxNextFreeBlock;
 8002f94:	682e      	ldr	r6, [r5, #0]
                pxPreviousBlock = &xStart;
 8002f96:	4926      	ldr	r1, [pc, #152]	; (8003030 <pvPortMalloc+0x110>)
                while ( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f98:	6873      	ldr	r3, [r6, #4]
 8002f9a:	42a3      	cmp	r3, r4
 8002f9c:	d201      	bcs.n	8002fa2 <pvPortMalloc+0x82>
 8002f9e:	6832      	ldr	r2, [r6, #0]
 8002fa0:	b9a2      	cbnz	r2, 8002fcc <pvPortMalloc+0xac>
                if ( pxBlock != pxEnd )
 8002fa2:	68aa      	ldr	r2, [r5, #8]
 8002fa4:	42b2      	cmp	r2, r6
 8002fa6:	d038      	beq.n	800301a <pvPortMalloc+0xfa>
                    if ( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fa8:	1b1b      	subs	r3, r3, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002faa:	6832      	ldr	r2, [r6, #0]
                    pvReturn = ( void* ) ( ( ( uint8_t* ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fac:	680f      	ldr	r7, [r1, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fae:	600a      	str	r2, [r1, #0]
                    if ( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d912      	bls.n	8002fda <pvPortMalloc+0xba>
                        pxNewBlockLink = ( void* ) ( ( ( uint8_t* ) pxBlock ) + xWantedSize );
 8002fb4:	1930      	adds	r0, r6, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fb6:	0742      	lsls	r2, r0, #29
 8002fb8:	d00b      	beq.n	8002fd2 <pvPortMalloc+0xb2>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	e7fe      	b.n	8002fca <pvPortMalloc+0xaa>
 8002fcc:	4631      	mov	r1, r6
 8002fce:	4616      	mov	r6, r2
 8002fd0:	e7e2      	b.n	8002f98 <pvPortMalloc+0x78>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fd2:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002fd4:	6074      	str	r4, [r6, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fd6:	f7ff ff81 	bl	8002edc <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fda:	6872      	ldr	r2, [r6, #4]
                    if ( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fdc:	68e9      	ldr	r1, [r5, #12]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fde:	eba8 0302 	sub.w	r3, r8, r2
                    if ( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fe2:	428b      	cmp	r3, r1
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fe4:	ea49 0202 	orr.w	r2, r9, r2
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fe8:	612b      	str	r3, [r5, #16]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fea:	bf38      	it	cc
 8002fec:	60eb      	strcc	r3, [r5, #12]
                    pvReturn = ( void* ) ( ( ( uint8_t* ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fee:	3708      	adds	r7, #8
                    pxBlock->pxNextFreeBlock = NULL;
 8002ff0:	2300      	movs	r3, #0
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ff2:	6072      	str	r2, [r6, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002ff4:	6033      	str	r3, [r6, #0]
        traceMALLOC( pvReturn, xWantedSize );
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	2094      	movs	r0, #148	; 0x94
 8002ffc:	f001 f89a 	bl	8004134 <vTraceStoreMemMangEvent>
    ( void ) xTaskResumeAll();
 8003000:	f7ff fa10 	bl	8002424 <xTaskResumeAll>
    configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003004:	077b      	lsls	r3, r7, #29
 8003006:	d00f      	beq.n	8003028 <pvPortMalloc+0x108>
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	e7fe      	b.n	8003018 <pvPortMalloc+0xf8>
        traceMALLOC( pvReturn, xWantedSize );
 800301a:	4622      	mov	r2, r4
 800301c:	2100      	movs	r1, #0
 800301e:	20e8      	movs	r0, #232	; 0xe8
 8003020:	f001 f888 	bl	8004134 <vTraceStoreMemMangEvent>
 8003024:	2700      	movs	r7, #0
 8003026:	e7eb      	b.n	8003000 <pvPortMalloc+0xe0>
}
 8003028:	4638      	mov	r0, r7
 800302a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800302e:	bf00      	nop
 8003030:	20000164 	.word	0x20000164
 8003034:	2000017c 	.word	0x2000017c

08003038 <vPortFree>:
{
 8003038:	b538      	push	{r3, r4, r5, lr}
    if ( pv != NULL )
 800303a:	4604      	mov	r4, r0
 800303c:	b390      	cbz	r0, 80030a4 <vPortFree+0x6c>
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800303e:	4d1a      	ldr	r5, [pc, #104]	; (80030a8 <vPortFree+0x70>)
 8003040:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003044:	696a      	ldr	r2, [r5, #20]
 8003046:	4213      	tst	r3, r2
 8003048:	d108      	bne.n	800305c <vPortFree+0x24>
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	e7fe      	b.n	800305a <vPortFree+0x22>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800305c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003060:	b141      	cbz	r1, 8003074 <vPortFree+0x3c>
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	e7fe      	b.n	8003072 <vPortFree+0x3a>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003074:	ea23 0302 	bic.w	r3, r3, r2
 8003078:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 800307c:	f7ff f91c 	bl	80022b8 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003080:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8003084:	692b      	ldr	r3, [r5, #16]
                    traceFREE( pv, pxLink->xBlockSize );
 8003086:	4621      	mov	r1, r4
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003088:	4413      	add	r3, r2
                    traceFREE( pv, pxLink->xBlockSize );
 800308a:	2096      	movs	r0, #150	; 0x96
 800308c:	4252      	negs	r2, r2
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800308e:	612b      	str	r3, [r5, #16]
                    traceFREE( pv, pxLink->xBlockSize );
 8003090:	f001 f850 	bl	8004134 <vTraceStoreMemMangEvent>
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t* ) pxLink ) );
 8003094:	f1a4 0008 	sub.w	r0, r4, #8
 8003098:	f7ff ff20 	bl	8002edc <prvInsertBlockIntoFreeList>
}
 800309c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ( void ) xTaskResumeAll();
 80030a0:	f7ff b9c0 	b.w	8002424 <xTaskResumeAll>
}
 80030a4:	bd38      	pop	{r3, r4, r5, pc}
 80030a6:	bf00      	nop
 80030a8:	20000164 	.word	0x20000164

080030ac <updateLights>:
        updateLights(&lightsInfo, &prevWakeTime, &regenBrakeInfo);
    }
}

void updateLights(LightsInfo* lightsInfo, uint32_t* prevWakeTime, RegenBrakeInfo* regenBrakeInfo)
{
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	4615      	mov	r5, r2
    regenBrakeInfo->regenBrakeInt = 0;
    regenBrakeInfo->regenBrakeFloat = 0;
 80030b0:	2300      	movs	r3, #0
    regenBrakeInfo->regenBrakeInt = 0;
 80030b2:	2200      	movs	r2, #0
{
 80030b4:	4604      	mov	r4, r0
    regenBrakeInfo->regenBrakeInt = 0;
 80030b6:	602a      	str	r2, [r5, #0]
{
 80030b8:	4608      	mov	r0, r1
    regenBrakeInfo->regenBrakeFloat = 0;
 80030ba:	606b      	str	r3, [r5, #4]

    osDelayUntil(prevWakeTime, LIGHTS_UPDATE_FREQ);
 80030bc:	210a      	movs	r1, #10
 80030be:	f7fe f9af 	bl	8001420 <osDelayUntil>
    lightsInfo->headlightsOff = (lightsInputs >> HOFF_INPUT_INDEX) & 1;
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <updateLights+0xf0>)
    lightsInfo->headlightsHigh = (lightsInputs >> HHIGH_INPUT_INDEX) & 1;
    lightsInfo->rightSignal = (lightsInputs >> RSIGNAL_INPUT_INDEX) & 1;
    lightsInfo->leftSignal = (lightsInputs >> LSIGNAL_INPUT_INDEX) & 1;
    lightsInfo->hazards = (lightsInputs >> HAZARDS_INPUT_INDEX) & 1;
    lightsInfo->bmsStrobe = ((auxBmsInputs[1] >> 0) & STROBE_FAULT_MASK) & 1;
    regenBrakeInfo->regenBrakeInt |= (driversInputs[1] & REGEN_BRAKE_MASK_1) >> 4;
 80030c4:	4e36      	ldr	r6, [pc, #216]	; (80031a0 <updateLights+0xf4>)
    lightsInfo->headlightsOff = (lightsInputs >> HOFF_INPUT_INDEX) & 1;
 80030c6:	7818      	ldrb	r0, [r3, #0]
 80030c8:	f000 0001 	and.w	r0, r0, #1
 80030cc:	7020      	strb	r0, [r4, #0]
    lightsInfo->headlightsLow = (lightsInputs >> HLOW_INPUT_INDEX) & 1;
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f3c3 0140 	ubfx	r1, r3, #1, #1
 80030d4:	7061      	strb	r1, [r4, #1]
    lightsInfo->rightSignal = (lightsInputs >> RSIGNAL_INPUT_INDEX) & 1;
 80030d6:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 80030da:	70e1      	strb	r1, [r4, #3]
    lightsInfo->leftSignal = (lightsInputs >> LSIGNAL_INPUT_INDEX) & 1;
 80030dc:	f3c3 1100 	ubfx	r1, r3, #4, #1
 80030e0:	7121      	strb	r1, [r4, #4]
    lightsInfo->hazards = (lightsInputs >> HAZARDS_INPUT_INDEX) & 1;
 80030e2:	f3c3 1140 	ubfx	r1, r3, #5, #1
 80030e6:	7161      	strb	r1, [r4, #5]
    lightsInfo->bmsStrobe = ((auxBmsInputs[1] >> 0) & STROBE_FAULT_MASK) & 1;
 80030e8:	492e      	ldr	r1, [pc, #184]	; (80031a4 <updateLights+0xf8>)
    regenBrakeInfo->regenBrakeInt |= (driversInputs[1] & REGEN_BRAKE_MASK_1) >> 4;
 80030ea:	f896 c001 	ldrb.w	ip, [r6, #1]
    lightsInfo->bmsStrobe = ((auxBmsInputs[1] >> 0) & STROBE_FAULT_MASK) & 1;
 80030ee:	7849      	ldrb	r1, [r1, #1]
    lightsInfo->headlightsHigh = (lightsInputs >> HHIGH_INPUT_INDEX) & 1;
 80030f0:	f3c3 0780 	ubfx	r7, r3, #2, #1
    lightsInfo->bmsStrobe = ((auxBmsInputs[1] >> 0) & STROBE_FAULT_MASK) & 1;
 80030f4:	f001 0101 	and.w	r1, r1, #1
    lightsInfo->headlightsHigh = (lightsInputs >> HHIGH_INPUT_INDEX) & 1;
 80030f8:	70a7      	strb	r7, [r4, #2]
    lightsInfo->bmsStrobe = ((auxBmsInputs[1] >> 0) & STROBE_FAULT_MASK) & 1;
 80030fa:	71e1      	strb	r1, [r4, #7]
    regenBrakeInfo->regenBrakeInt |= (driversInputs[1] & REGEN_BRAKE_MASK_1) >> 4;
 80030fc:	6829      	ldr	r1, [r5, #0]
 80030fe:	ea41 111c 	orr.w	r1, r1, ip, lsr #4
 8003102:	6029      	str	r1, [r5, #0]
    regenBrakeInfo->regenBrakeInt |= (driversInputs[2] & REGEN_BRAKE_MASK_2) << 4;
 8003104:	f896 c002 	ldrb.w	ip, [r6, #2]
 8003108:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 800310c:	6029      	str	r1, [r5, #0]

    /* UPDATE HEADLIGHTS */
    if (lightsInfo->headlightsOff)
 800310e:	2200      	movs	r2, #0
 8003110:	b370      	cbz	r0, 8003170 <updateLights+0xc4>
    {
        HAL_GPIO_WritePin(HHIGH_GPIO_Port, HHIGH_Pin, LIGHT_OFF);
 8003112:	4825      	ldr	r0, [pc, #148]	; (80031a8 <updateLights+0xfc>)
 8003114:	2108      	movs	r1, #8
 8003116:	f7fd fd3d 	bl	8000b94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(HLOW_GPIO_Port, HLOW_Pin, LIGHT_OFF);
 800311a:	2200      	movs	r2, #0
        HAL_GPIO_WritePin(HLOW_GPIO_Port, HLOW_Pin, LIGHT_ON);
    }
    else
    {
        HAL_GPIO_WritePin(HHIGH_GPIO_Port, HHIGH_Pin, lightsInfo->headlightsHigh);
        HAL_GPIO_WritePin(HLOW_GPIO_Port, HLOW_Pin, lightsInfo->headlightsLow);
 800311c:	4822      	ldr	r0, [pc, #136]	; (80031a8 <updateLights+0xfc>)
 800311e:	2110      	movs	r1, #16
 8003120:	f7fd fd38 	bl	8000b94 <HAL_GPIO_WritePin>
    }

    /* UPDATE BRAKE LIGHTS */
    lightsInfo->brakes = (driversInputs[BRAKES_INPUT_INDEX_P1] >> BRAKES_INPUT_INDEX_P2) & 1;
 8003124:	78f2      	ldrb	r2, [r6, #3]
 8003126:	f002 0201 	and.w	r2, r2, #1
 800312a:	71a2      	strb	r2, [r4, #6]
    regenBrakeInfo->regenBrakeFloat = (float) regenBrakeInfo->regenBrakeInt;
 800312c:	edd5 7a00 	vldr	s15, [r5]
 8003130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003134:	edc5 7a01 	vstr	s15, [r5, #4]

    if (lightsInfo->brakes || regenBrakeInfo->regenBrakeFloat > NON_ZERO_THRESHOLD)
 8003138:	b932      	cbnz	r2, 8003148 <updateLights+0x9c>
 800313a:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800313e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	dd00      	ble.n	800314a <updateLights+0x9e>
    {
        HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, LIGHT_ON);
 8003148:	2201      	movs	r2, #1
    }
    else
    {
        HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, LIGHT_OFF);
 800314a:	4817      	ldr	r0, [pc, #92]	; (80031a8 <updateLights+0xfc>)
 800314c:	2104      	movs	r1, #4
 800314e:	f7fd fd21 	bl	8000b94 <HAL_GPIO_WritePin>
    }

    /* UPDATE SIGNAL LIGHTS */

    if (lightsInfo->hazards)
 8003152:	7962      	ldrb	r2, [r4, #5]
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <updateLights+0x100>)
 8003156:	b1ea      	cbz	r2, 8003194 <updateLights+0xe8>
    {
        sigLightsHandle.left = LIGHT_ON;
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
        sigLightsHandle.right = LIGHT_ON;
    }
    else
    {
        sigLightsHandle.left = lightsInfo->leftSignal;
        sigLightsHandle.right = lightsInfo->rightSignal;
 800315c:	705a      	strb	r2, [r3, #1]
    }

    /* UPDATE BMS STROBE */
    if (lightsInfo->bmsStrobe)
 800315e:	79e2      	ldrb	r2, [r4, #7]
 8003160:	b102      	cbz	r2, 8003164 <updateLights+0xb8>
    {
        HAL_GPIO_WritePin(ESTROBE_GPIO_Port, ESTROBE_Pin, LIGHT_ON);
 8003162:	2201      	movs	r2, #1
    }
    else
    {
        HAL_GPIO_WritePin(ESTROBE_GPIO_Port, ESTROBE_Pin, LIGHT_OFF);
    }
}
 8003164:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(ESTROBE_GPIO_Port, ESTROBE_Pin, LIGHT_OFF);
 8003168:	480f      	ldr	r0, [pc, #60]	; (80031a8 <updateLights+0xfc>)
 800316a:	2120      	movs	r1, #32
 800316c:	f7fd bd12 	b.w	8000b94 <HAL_GPIO_WritePin>
    else if (lightsInfo->headlightsLow && lightsInfo->headlightsHigh)
 8003170:	f003 0306 	and.w	r3, r3, #6
 8003174:	2b06      	cmp	r3, #6
 8003176:	d106      	bne.n	8003186 <updateLights+0xda>
        HAL_GPIO_WritePin(HHIGH_GPIO_Port, HHIGH_Pin, LIGHT_OFF);
 8003178:	4602      	mov	r2, r0
 800317a:	2108      	movs	r1, #8
 800317c:	480a      	ldr	r0, [pc, #40]	; (80031a8 <updateLights+0xfc>)
 800317e:	f7fd fd09 	bl	8000b94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(HLOW_GPIO_Port, HLOW_Pin, LIGHT_ON);
 8003182:	2201      	movs	r2, #1
 8003184:	e7ca      	b.n	800311c <updateLights+0x70>
        HAL_GPIO_WritePin(HHIGH_GPIO_Port, HHIGH_Pin, lightsInfo->headlightsHigh);
 8003186:	463a      	mov	r2, r7
 8003188:	4807      	ldr	r0, [pc, #28]	; (80031a8 <updateLights+0xfc>)
 800318a:	2108      	movs	r1, #8
 800318c:	f7fd fd02 	bl	8000b94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(HLOW_GPIO_Port, HLOW_Pin, lightsInfo->headlightsLow);
 8003190:	7862      	ldrb	r2, [r4, #1]
 8003192:	e7c3      	b.n	800311c <updateLights+0x70>
        sigLightsHandle.left = lightsInfo->leftSignal;
 8003194:	7922      	ldrb	r2, [r4, #4]
 8003196:	701a      	strb	r2, [r3, #0]
        sigLightsHandle.right = lightsInfo->rightSignal;
 8003198:	78e2      	ldrb	r2, [r4, #3]
 800319a:	e7df      	b.n	800315c <updateLights+0xb0>
 800319c:	20003e0b 	.word	0x20003e0b
 80031a0:	20003e02 	.word	0x20003e02
 80031a4:	20003e00 	.word	0x20003e00
 80031a8:	40020c00 	.word	0x40020c00
 80031ac:	20003dfc 	.word	0x20003dfc

080031b0 <updateLightsTask>:
{
 80031b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t prevWakeTime = osKernelSysTick();
 80031b2:	f7fe f8bc 	bl	800132e <osKernelSysTick>
 80031b6:	9001      	str	r0, [sp, #4]
        updateLights(&lightsInfo, &prevWakeTime, &regenBrakeInfo);
 80031b8:	aa04      	add	r2, sp, #16
 80031ba:	a901      	add	r1, sp, #4
 80031bc:	a802      	add	r0, sp, #8
 80031be:	f7ff ff75 	bl	80030ac <updateLights>
    for (;;)
 80031c2:	e7f9      	b.n	80031b8 <updateLightsTask+0x8>

080031c4 <blinkSignalLights>:
        blinkSignalLights(&prevWakeTime, &blinkerTimer, &prevSigState);
    }
}

void blinkSignalLights( uint32_t* prevWakeTime, uint32_t* blinkerTimer, uint8_t* prevSigState)
{
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    osDelayUntil(prevWakeTime, LIGHTS_UPDATE_FREQ);

    // Check if both signal lights inputs are DISABLED
    if (!sigLightsHandle.left && !sigLightsHandle.right) // Going to DISABLED
 80031c6:	4f21      	ldr	r7, [pc, #132]	; (800324c <blinkSignalLights+0x88>)
{
 80031c8:	460c      	mov	r4, r1
    osDelayUntil(prevWakeTime, LIGHTS_UPDATE_FREQ);
 80031ca:	210a      	movs	r1, #10
{
 80031cc:	4616      	mov	r6, r2
    osDelayUntil(prevWakeTime, LIGHTS_UPDATE_FREQ);
 80031ce:	f7fe f927 	bl	8001420 <osDelayUntil>
    if (!sigLightsHandle.left && !sigLightsHandle.right) // Going to DISABLED
 80031d2:	787a      	ldrb	r2, [r7, #1]
 80031d4:	783d      	ldrb	r5, [r7, #0]
 80031d6:	4315      	orrs	r5, r2
 80031d8:	d10b      	bne.n	80031f2 <blinkSignalLights+0x2e>
    {
        // Reset blinker state and turn blinkers off
        HAL_GPIO_WritePin(RSIGNAL_GPIO_Port, RSIGNAL_Pin, LIGHT_OFF);
 80031da:	481d      	ldr	r0, [pc, #116]	; (8003250 <blinkSignalLights+0x8c>)
 80031dc:	462a      	mov	r2, r5
 80031de:	2101      	movs	r1, #1
 80031e0:	f7fd fcd8 	bl	8000b94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LSIGNAL_GPIO_Port, LSIGNAL_Pin, LIGHT_OFF);
 80031e4:	481a      	ldr	r0, [pc, #104]	; (8003250 <blinkSignalLights+0x8c>)
 80031e6:	462a      	mov	r2, r5
 80031e8:	2102      	movs	r1, #2
 80031ea:	f7fd fcd3 	bl	8000b94 <HAL_GPIO_WritePin>
        // blinkerTimer will be reset to 0 on ENABLE
        *prevSigState = 0;
 80031ee:	7035      	strb	r5, [r6, #0]
            *blinkerTimer += LIGHTS_UPDATE_FREQ;
        }

        // Keep prevSigState = 1
    }
}
 80031f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (!*prevSigState) // Going from DISABLED to ENABLED
 80031f2:	7835      	ldrb	r5, [r6, #0]
 80031f4:	b965      	cbnz	r5, 8003210 <blinkSignalLights+0x4c>
        HAL_GPIO_WritePin(RSIGNAL_GPIO_Port, RSIGNAL_Pin, sigLightsHandle.right);
 80031f6:	4816      	ldr	r0, [pc, #88]	; (8003250 <blinkSignalLights+0x8c>)
 80031f8:	2101      	movs	r1, #1
 80031fa:	f7fd fccb 	bl	8000b94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LSIGNAL_GPIO_Port, LSIGNAL_Pin, sigLightsHandle.left);
 80031fe:	783a      	ldrb	r2, [r7, #0]
 8003200:	4813      	ldr	r0, [pc, #76]	; (8003250 <blinkSignalLights+0x8c>)
 8003202:	2102      	movs	r1, #2
 8003204:	f7fd fcc6 	bl	8000b94 <HAL_GPIO_WritePin>
        *prevSigState = 1;
 8003208:	2301      	movs	r3, #1
        *blinkerTimer = 0;
 800320a:	6025      	str	r5, [r4, #0]
        *prevSigState = 1;
 800320c:	7033      	strb	r3, [r6, #0]
 800320e:	e7ef      	b.n	80031f0 <blinkSignalLights+0x2c>
        if (*blinkerTimer >= BLINKER_FREQ)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003216:	d912      	bls.n	800323e <blinkSignalLights+0x7a>
            HAL_GPIO_WritePin(RSIGNAL_GPIO_Port, RSIGNAL_Pin, LIGHT_OFF);
 8003218:	2200      	movs	r2, #0
 800321a:	480d      	ldr	r0, [pc, #52]	; (8003250 <blinkSignalLights+0x8c>)
 800321c:	2101      	movs	r1, #1
 800321e:	f7fd fcb9 	bl	8000b94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LSIGNAL_GPIO_Port, LSIGNAL_Pin, LIGHT_OFF);
 8003222:	2200      	movs	r2, #0
            HAL_GPIO_WritePin(LSIGNAL_GPIO_Port, LSIGNAL_Pin, sigLightsHandle.left);
 8003224:	480a      	ldr	r0, [pc, #40]	; (8003250 <blinkSignalLights+0x8c>)
 8003226:	2102      	movs	r1, #2
 8003228:	f7fd fcb4 	bl	8000b94 <HAL_GPIO_WritePin>
        if (*blinkerTimer > BLINKER_FREQ * 2)
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	f240 3202 	movw	r2, #770	; 0x302
 8003232:	4293      	cmp	r3, r2
            *blinkerTimer = 0;
 8003234:	bf8c      	ite	hi
 8003236:	2300      	movhi	r3, #0
            *blinkerTimer += LIGHTS_UPDATE_FREQ;
 8003238:	330a      	addls	r3, #10
 800323a:	6023      	str	r3, [r4, #0]
}
 800323c:	e7d8      	b.n	80031f0 <blinkSignalLights+0x2c>
            HAL_GPIO_WritePin(RSIGNAL_GPIO_Port, RSIGNAL_Pin, sigLightsHandle.right);
 800323e:	4804      	ldr	r0, [pc, #16]	; (8003250 <blinkSignalLights+0x8c>)
 8003240:	2101      	movs	r1, #1
 8003242:	f7fd fca7 	bl	8000b94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LSIGNAL_GPIO_Port, LSIGNAL_Pin, sigLightsHandle.left);
 8003246:	783a      	ldrb	r2, [r7, #0]
 8003248:	e7ec      	b.n	8003224 <blinkSignalLights+0x60>
 800324a:	bf00      	nop
 800324c:	20003dfc 	.word	0x20003dfc
 8003250:	40020c00 	.word	0x40020c00

08003254 <blinkSignalLightsTask>:
{
 8003254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint32_t prevWakeTime = osKernelSysTick();
 8003256:	f7fe f86a 	bl	800132e <osKernelSysTick>
    uint32_t blinkerTimer = 0;
 800325a:	2300      	movs	r3, #0
    uint32_t prevWakeTime = osKernelSysTick();
 800325c:	9002      	str	r0, [sp, #8]
    uint32_t blinkerTimer = 0;
 800325e:	9303      	str	r3, [sp, #12]
    uint8_t prevSigState = 0;
 8003260:	f88d 3007 	strb.w	r3, [sp, #7]
        blinkSignalLights(&prevWakeTime, &blinkerTimer, &prevSigState);
 8003264:	f10d 0207 	add.w	r2, sp, #7
 8003268:	a903      	add	r1, sp, #12
 800326a:	a802      	add	r0, sp, #8
 800326c:	f7ff ffaa 	bl	80031c4 <blinkSignalLights>
    for (;;)
 8003270:	e7f8      	b.n	8003264 <blinkSignalLightsTask+0x10>
	...

08003274 <reportLightsToCan>:
        reportLightsToCan(&prevWakeTime, canHandleMutex);
    }
}

void reportLightsToCan(uint32_t* prevWakeTime, osMutexId* canHandleMutex)
{
 8003274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	460d      	mov	r5, r1
    osDelayUntil(prevWakeTime, LIGHTS_STATUS_FREQ);
 800327a:	21c8      	movs	r1, #200	; 0xc8
 800327c:	f7fe f8d0 	bl	8001420 <osDelayUntil>

    if (osMutexWait(canHandleMutex, 0) != osOK)
 8003280:	2100      	movs	r1, #0
 8003282:	4628      	mov	r0, r5
 8003284:	f7fe f878 	bl	8001378 <osMutexWait>
 8003288:	2800      	cmp	r0, #0
 800328a:	d145      	bne.n	8003318 <reportLightsToCan+0xa4>


    // Toggle blue LED for every CAN message sent
    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
    // Set CAN msg address
    hcan2.pTxMsg->StdId = LIGHTS_STATUS_STDID;
 800328c:	4e23      	ldr	r6, [pc, #140]	; (800331c <reportLightsToCan+0xa8>)
    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800328e:	4824      	ldr	r0, [pc, #144]	; (8003320 <reportLightsToCan+0xac>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	f7fd fc84 	bl	8000b9e <HAL_GPIO_TogglePin>
    hcan2.pTxMsg->StdId = LIGHTS_STATUS_STDID;
 8003296:	6b33      	ldr	r3, [r6, #48]	; 0x30
    // Initalize to avoid garbage values in [6] anad [7]
    LightsStatus stat = {0};
    // Read lights gpios
    stat.lowBeams = HAL_GPIO_ReadPin(HLOW_GPIO_Port, HLOW_Pin);
 8003298:	4822      	ldr	r0, [pc, #136]	; (8003324 <reportLightsToCan+0xb0>)
    hcan2.pTxMsg->StdId = LIGHTS_STATUS_STDID;
 800329a:	f240 7211 	movw	r2, #1809	; 0x711
 800329e:	601a      	str	r2, [r3, #0]
    stat.lowBeams = HAL_GPIO_ReadPin(HLOW_GPIO_Port, HLOW_Pin);
 80032a0:	2110      	movs	r1, #16
 80032a2:	f7fd fc71 	bl	8000b88 <HAL_GPIO_ReadPin>
    stat.highBeams = HAL_GPIO_ReadPin(HHIGH_GPIO_Port, HHIGH_Pin);
 80032a6:	2108      	movs	r1, #8
    stat.lowBeams = HAL_GPIO_ReadPin(HLOW_GPIO_Port, HLOW_Pin);
 80032a8:	4681      	mov	r9, r0
    stat.highBeams = HAL_GPIO_ReadPin(HHIGH_GPIO_Port, HHIGH_Pin);
 80032aa:	481e      	ldr	r0, [pc, #120]	; (8003324 <reportLightsToCan+0xb0>)
 80032ac:	f7fd fc6c 	bl	8000b88 <HAL_GPIO_ReadPin>
    stat.brakes = HAL_GPIO_ReadPin(BRAKE_GPIO_Port, BRAKE_Pin);
 80032b0:	2104      	movs	r1, #4
    stat.highBeams = HAL_GPIO_ReadPin(HHIGH_GPIO_Port, HHIGH_Pin);
 80032b2:	4682      	mov	sl, r0
    stat.brakes = HAL_GPIO_ReadPin(BRAKE_GPIO_Port, BRAKE_Pin);
 80032b4:	481b      	ldr	r0, [pc, #108]	; (8003324 <reportLightsToCan+0xb0>)
 80032b6:	f7fd fc67 	bl	8000b88 <HAL_GPIO_ReadPin>
    stat.leftSignal = HAL_GPIO_ReadPin(LSIGNAL_GPIO_Port, LSIGNAL_Pin);
 80032ba:	2102      	movs	r1, #2
    stat.brakes = HAL_GPIO_ReadPin(BRAKE_GPIO_Port, BRAKE_Pin);
 80032bc:	4604      	mov	r4, r0
    stat.leftSignal = HAL_GPIO_ReadPin(LSIGNAL_GPIO_Port, LSIGNAL_Pin);
 80032be:	4819      	ldr	r0, [pc, #100]	; (8003324 <reportLightsToCan+0xb0>)
 80032c0:	f7fd fc62 	bl	8000b88 <HAL_GPIO_ReadPin>
    stat.rightSignal = HAL_GPIO_ReadPin(RSIGNAL_GPIO_Port, RSIGNAL_Pin);
 80032c4:	2101      	movs	r1, #1
    stat.leftSignal = HAL_GPIO_ReadPin(LSIGNAL_GPIO_Port, LSIGNAL_Pin);
 80032c6:	4680      	mov	r8, r0
    stat.rightSignal = HAL_GPIO_ReadPin(RSIGNAL_GPIO_Port, RSIGNAL_Pin);
 80032c8:	4816      	ldr	r0, [pc, #88]	; (8003324 <reportLightsToCan+0xb0>)
 80032ca:	f7fd fc5d 	bl	8000b88 <HAL_GPIO_ReadPin>
    stat.bmsStrobeLight = HAL_GPIO_ReadPin(ESTROBE_GPIO_Port, ESTROBE_Pin);
    hcan2.pTxMsg->Data[0] = 0;
    hcan2.pTxMsg->Data[0] += stat.lowBeams * 0x01;
    hcan2.pTxMsg->Data[0] += stat.highBeams * 0x02;
    hcan2.pTxMsg->Data[0] += stat.brakes * 0x04;
 80032ce:	f004 0401 	and.w	r4, r4, #1
    stat.rightSignal = HAL_GPIO_ReadPin(RSIGNAL_GPIO_Port, RSIGNAL_Pin);
 80032d2:	4607      	mov	r7, r0
    stat.bmsStrobeLight = HAL_GPIO_ReadPin(ESTROBE_GPIO_Port, ESTROBE_Pin);
 80032d4:	2120      	movs	r1, #32
    hcan2.pTxMsg->Data[0] += stat.highBeams * 0x02;
 80032d6:	f00a 0a01 	and.w	sl, sl, #1
    stat.bmsStrobeLight = HAL_GPIO_ReadPin(ESTROBE_GPIO_Port, ESTROBE_Pin);
 80032da:	4812      	ldr	r0, [pc, #72]	; (8003324 <reportLightsToCan+0xb0>)
    hcan2.pTxMsg->Data[0] += stat.brakes * 0x04;
 80032dc:	00a4      	lsls	r4, r4, #2
    stat.bmsStrobeLight = HAL_GPIO_ReadPin(ESTROBE_GPIO_Port, ESTROBE_Pin);
 80032de:	f7fd fc53 	bl	8000b88 <HAL_GPIO_ReadPin>
    hcan2.pTxMsg->Data[0] += stat.brakes * 0x04;
 80032e2:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 80032e6:	f009 0301 	and.w	r3, r9, #1
 80032ea:	441c      	add	r4, r3
    hcan2.pTxMsg->Data[0] += stat.leftSignal * 0x08;
 80032ec:	f008 0301 	and.w	r3, r8, #1
 80032f0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hcan2.pTxMsg->Data[0] += stat.rightSignal * 0x10;
 80032f4:	f007 0701 	and.w	r7, r7, #1
    hcan2.pTxMsg->Data[0] += stat.bmsStrobeLight * 0x20;
 80032f8:	6b32      	ldr	r2, [r6, #48]	; 0x30
    hcan2.pTxMsg->Data[0] += stat.rightSignal * 0x10;
 80032fa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    hcan2.pTxMsg->Data[0] += stat.bmsStrobeLight * 0x20;
 80032fe:	f000 0001 	and.w	r0, r0, #1
 8003302:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8003306:	7513      	strb	r3, [r2, #20]
    // Send CAN msg
    HAL_CAN_Transmit_IT(&hcan2);
 8003308:	4630      	mov	r0, r6
 800330a:	f7fd f8e7 	bl	80004dc <HAL_CAN_Transmit_IT>
    osMutexRelease(canHandleMutex);
 800330e:	4628      	mov	r0, r5
}
 8003310:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osMutexRelease(canHandleMutex);
 8003314:	f7fe b857 	b.w	80013c6 <osMutexRelease>
}
 8003318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331c:	20003d7c 	.word	0x20003d7c
 8003320:	40020000 	.word	0x40020000
 8003324:	40020c00 	.word	0x40020c00

08003328 <reportLightsToCanTask>:
{
 8003328:	b513      	push	{r0, r1, r4, lr}
 800332a:	4604      	mov	r4, r0
    uint32_t prevWakeTime = osKernelSysTick();
 800332c:	f7fd ffff 	bl	800132e <osKernelSysTick>
 8003330:	9001      	str	r0, [sp, #4]
        reportLightsToCan(&prevWakeTime, canHandleMutex);
 8003332:	4621      	mov	r1, r4
 8003334:	a801      	add	r0, sp, #4
 8003336:	f7ff ff9d 	bl	8003274 <reportLightsToCan>
    for (;;)
 800333a:	e7fa      	b.n	8003332 <reportLightsToCanTask+0xa>

0800333c <sendHeartbeat>:
        sendHeartbeat(canHandleMutex, &prevWakeTime);
    }
}

void sendHeartbeat(osMutexId* canHandleMutex, uint32_t* prevWakeTime)
{
 800333c:	b510      	push	{r4, lr}
 800333e:	4604      	mov	r4, r0
 8003340:	4608      	mov	r0, r1
    osDelayUntil(prevWakeTime, LIGHTS_HEARTBEAT_FREQ);
 8003342:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003346:	f7fe f86b 	bl	8001420 <osDelayUntil>

    if (osMutexWait(canHandleMutex, 0) != osOK)
 800334a:	2100      	movs	r1, #0
 800334c:	4620      	mov	r0, r4
 800334e:	f7fe f813 	bl	8001378 <osMutexWait>
 8003352:	b988      	cbnz	r0, 8003378 <sendHeartbeat+0x3c>
    {
        return;
    }

    // Toggle green LED for every heartbeat sent
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8003354:	4809      	ldr	r0, [pc, #36]	; (800337c <sendHeartbeat+0x40>)
 8003356:	2140      	movs	r1, #64	; 0x40
 8003358:	f7fd fc21 	bl	8000b9e <HAL_GPIO_TogglePin>
    // Set CAN msg address
    hcan2.pTxMsg->StdId = LIGHTS_HEARTBEAT_STDID;
 800335c:	4808      	ldr	r0, [pc, #32]	; (8003380 <sendHeartbeat+0x44>)
 800335e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003360:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 8003364:	601a      	str	r2, [r3, #0]
    // Always 1
    hcan2.pTxMsg->Data[0] = 1;
 8003366:	2201      	movs	r2, #1
 8003368:	751a      	strb	r2, [r3, #20]
    // Send CAN msg
    HAL_CAN_Transmit_IT(&hcan2);
 800336a:	f7fd f8b7 	bl	80004dc <HAL_CAN_Transmit_IT>
    osMutexRelease(canHandleMutex);
 800336e:	4620      	mov	r0, r4
}
 8003370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osMutexRelease(canHandleMutex);
 8003374:	f7fe b827 	b.w	80013c6 <osMutexRelease>
}
 8003378:	bd10      	pop	{r4, pc}
 800337a:	bf00      	nop
 800337c:	40020000 	.word	0x40020000
 8003380:	20003d7c 	.word	0x20003d7c

08003384 <sendHeartbeatTask>:
{
 8003384:	b513      	push	{r0, r1, r4, lr}
 8003386:	4604      	mov	r4, r0
    uint32_t prevWakeTime = osKernelSysTick();
 8003388:	f7fd ffd1 	bl	800132e <osKernelSysTick>
 800338c:	9001      	str	r0, [sp, #4]
        sendHeartbeat(canHandleMutex, &prevWakeTime);
 800338e:	a901      	add	r1, sp, #4
 8003390:	4620      	mov	r0, r4
 8003392:	f7ff ffd3 	bl	800333c <sendHeartbeat>
    for (;;)
 8003396:	e7fa      	b.n	800338e <sendHeartbeatTask+0xa>

08003398 <HAL_CAN_RxCpltCallback>:

// Reimplement weak definition in stm32f4xx_hal_can.c
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8003398:	b508      	push	{r3, lr}
    CanRxMsgTypeDef* msg = hcan->pRxMsg;
 800339a:	6b43      	ldr	r3, [r0, #52]	; 0x34

    if (msg->StdId == LIGHTS_INPUT_STDID && msg->DLC == 1)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f240 7101 	movw	r1, #1793	; 0x701
 80033a2:	428a      	cmp	r2, r1
 80033a4:	d113      	bne.n	80033ce <HAL_CAN_RxCpltCallback+0x36>
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	2a01      	cmp	r2, #1
 80033aa:	d102      	bne.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
    {
        lightsInputs = msg->Data[0];
 80033ac:	7d1a      	ldrb	r2, [r3, #20]
 80033ae:	4b21      	ldr	r3, [pc, #132]	; (8003434 <HAL_CAN_RxCpltCallback+0x9c>)
 80033b0:	701a      	strb	r2, [r3, #0]
        auxBmsInputs[0] = msg->Data[0];
        auxBmsInputs[1] = msg->Data[1];
    }


    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FMP0);
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	2208      	movs	r2, #8
 80033b6:	605a      	str	r2, [r3, #4]

    if (HAL_CAN_Receive_IT(hcan, CAN_FIFO0) != HAL_OK)
 80033b8:	2100      	movs	r1, #0
 80033ba:	f7fd f910 	bl	80005de <HAL_CAN_Receive_IT>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d036      	beq.n	8003430 <HAL_CAN_RxCpltCallback+0x98>
    {
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
    }
}
 80033c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80033c6:	481c      	ldr	r0, [pc, #112]	; (8003438 <HAL_CAN_RxCpltCallback+0xa0>)
 80033c8:	2120      	movs	r1, #32
 80033ca:	f7fd bbe8 	b.w	8000b9e <HAL_GPIO_TogglePin>
    else if (msg->StdId == BATTERY_STAT_ERRORS_STDID && msg->DLC == 5)
 80033ce:	f240 3103 	movw	r1, #771	; 0x303
 80033d2:	428a      	cmp	r2, r1
 80033d4:	d10e      	bne.n	80033f4 <HAL_CAN_RxCpltCallback+0x5c>
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	2a05      	cmp	r2, #5
 80033da:	d1ea      	bne.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
        batteryErrors[0] = msg->Data[0];
 80033dc:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_CAN_RxCpltCallback+0xa4>)
 80033de:	7d19      	ldrb	r1, [r3, #20]
 80033e0:	7011      	strb	r1, [r2, #0]
        batteryErrors[1] = msg->Data[1];
 80033e2:	7d59      	ldrb	r1, [r3, #21]
 80033e4:	7051      	strb	r1, [r2, #1]
        batteryErrors[2] = msg->Data[2];
 80033e6:	7d99      	ldrb	r1, [r3, #22]
 80033e8:	7091      	strb	r1, [r2, #2]
        batteryErrors[3] = msg->Data[3];
 80033ea:	7dd9      	ldrb	r1, [r3, #23]
        batteryErrors[4] = msg->Data[4];
 80033ec:	7e1b      	ldrb	r3, [r3, #24]
        batteryErrors[3] = msg->Data[3];
 80033ee:	70d1      	strb	r1, [r2, #3]
        batteryErrors[4] = msg->Data[4];
 80033f0:	7113      	strb	r3, [r2, #4]
 80033f2:	e7de      	b.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
    else if (msg->StdId == DRIVERS_INPUTS_STDID && msg->DLC == 4)
 80033f4:	f240 7103 	movw	r1, #1795	; 0x703
 80033f8:	428a      	cmp	r2, r1
 80033fa:	d10c      	bne.n	8003416 <HAL_CAN_RxCpltCallback+0x7e>
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	2a04      	cmp	r2, #4
 8003400:	d1d7      	bne.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
        driversInputs[0] = msg->Data[0];
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_CAN_RxCpltCallback+0xa8>)
 8003404:	7d19      	ldrb	r1, [r3, #20]
 8003406:	7011      	strb	r1, [r2, #0]
        driversInputs[1] = msg->Data[1];
 8003408:	7d59      	ldrb	r1, [r3, #21]
 800340a:	7051      	strb	r1, [r2, #1]
        driversInputs[2] = msg->Data[2];
 800340c:	7d99      	ldrb	r1, [r3, #22]
        driversInputs[3] = msg->Data[3];
 800340e:	7ddb      	ldrb	r3, [r3, #23]
        driversInputs[2] = msg->Data[2];
 8003410:	7091      	strb	r1, [r2, #2]
        driversInputs[3] = msg->Data[3];
 8003412:	70d3      	strb	r3, [r2, #3]
 8003414:	e7cd      	b.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
    else if (msg->StdId == AUXBMS_INPUT_STDID && msg->DLC == 2)
 8003416:	f240 7121 	movw	r1, #1825	; 0x721
 800341a:	428a      	cmp	r2, r1
 800341c:	d1c9      	bne.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	2a02      	cmp	r2, #2
 8003422:	d1c6      	bne.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
        auxBmsInputs[0] = msg->Data[0];
 8003424:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_CAN_RxCpltCallback+0xac>)
 8003426:	7d19      	ldrb	r1, [r3, #20]
        auxBmsInputs[1] = msg->Data[1];
 8003428:	7d5b      	ldrb	r3, [r3, #21]
        auxBmsInputs[0] = msg->Data[0];
 800342a:	7011      	strb	r1, [r2, #0]
        auxBmsInputs[1] = msg->Data[1];
 800342c:	7053      	strb	r3, [r2, #1]
 800342e:	e7c0      	b.n	80033b2 <HAL_CAN_RxCpltCallback+0x1a>
}
 8003430:	bd08      	pop	{r3, pc}
 8003432:	bf00      	nop
 8003434:	20003e0b 	.word	0x20003e0b
 8003438:	40020000 	.word	0x40020000
 800343c:	20003e06 	.word	0x20003e06
 8003440:	20003e02 	.word	0x20003e02
 8003444:	20003e00 	.word	0x20003e00

08003448 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003448:	b530      	push	{r4, r5, lr}
 800344a:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <SystemClock_Config+0xa4>)
 800344e:	2100      	movs	r1, #0
 8003450:	9101      	str	r1, [sp, #4]
 8003452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003454:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <SystemClock_Config+0xa8>)
 8003466:	9102      	str	r1, [sp, #8]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	9302      	str	r3, [sp, #8]
 8003478:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800347a:	2301      	movs	r3, #1
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800347c:	2402      	movs	r4, #2
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800347e:	e9cd 3308 	strd	r3, r3, [sp, #32]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003486:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 320;
 800348a:	2108      	movs	r1, #8
 800348c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003490:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 7;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003494:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8003496:	2307      	movs	r3, #7
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003498:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800349a:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800349c:	f7fd fb84 	bl	8000ba8 <HAL_RCC_OscConfig>
 80034a0:	b100      	cbz	r0, 80034a4 <SystemClock_Config+0x5c>
{
    /* USER CODE BEGIN Error_Handler */
    /* User can add his own implementation to report the HAL error return state */
    // Turn on red LED when error
    // HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
    while (1)
 80034a2:	e7fe      	b.n	80034a2 <SystemClock_Config+0x5a>
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034a4:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80034a6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80034aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80034ae:	250f      	movs	r5, #15
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034b0:	2105      	movs	r1, #5
 80034b2:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b4:	e9cd 5403 	strd	r5, r4, [sp, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80034b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034bc:	f7fd fd12 	bl	8000ee4 <HAL_RCC_ClockConfig>
 80034c0:	4604      	mov	r4, r0
 80034c2:	b100      	cbz	r0, 80034c6 <SystemClock_Config+0x7e>
    while (1)
 80034c4:	e7fe      	b.n	80034c4 <SystemClock_Config+0x7c>
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80034c6:	f7fd fdc1 	bl	800104c <HAL_RCC_GetHCLKFreq>
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80034d2:	f7fd fa4b 	bl	800096c <HAL_SYSTICK_Config>
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80034d6:	2004      	movs	r0, #4
 80034d8:	f7fd fa5c 	bl	8000994 <HAL_SYSTICK_CLKSourceConfig>
    HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80034dc:	4622      	mov	r2, r4
 80034de:	4629      	mov	r1, r5
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	f7fd fa04 	bl	80008f0 <HAL_NVIC_SetPriority>
}
 80034e8:	b015      	add	sp, #84	; 0x54
 80034ea:	bd30      	pop	{r4, r5, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000

080034f4 <main>:
{
 80034f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f8:	b0a6      	sub	sp, #152	; 0x98
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80034fa:	2400      	movs	r4, #0
    HAL_Init();
 80034fc:	f7fc feb4 	bl	8000268 <HAL_Init>
    SystemClock_Config();
 8003500:	f7ff ffa2 	bl	8003448 <SystemClock_Config>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003504:	4b82      	ldr	r3, [pc, #520]	; (8003710 <main+0x21c>)
 8003506:	9402      	str	r4, [sp, #8]
 8003508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800350a:	4882      	ldr	r0, [pc, #520]	; (8003714 <main+0x220>)
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800350c:	4d82      	ldr	r5, [pc, #520]	; (8003718 <main+0x224>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800350e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
 8003514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003516:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800351a:	9202      	str	r2, [sp, #8]
 800351c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800351e:	9403      	str	r4, [sp, #12]
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	f042 0204 	orr.w	r2, r2, #4
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
 8003528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352a:	f002 0204 	and.w	r2, r2, #4
 800352e:	9203      	str	r2, [sp, #12]
 8003530:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003532:	9404      	str	r4, [sp, #16]
 8003534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
 800353c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353e:	f002 0201 	and.w	r2, r2, #1
 8003542:	9204      	str	r2, [sp, #16]
 8003544:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003546:	9405      	str	r4, [sp, #20]
 8003548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354a:	f042 0202 	orr.w	r2, r2, #2
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	f002 0202 	and.w	r2, r2, #2
 8003556:	9205      	str	r2, [sp, #20]
 8003558:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800355a:	9406      	str	r4, [sp, #24]
 800355c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355e:	f042 0208 	orr.w	r2, r2, #8
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
 8003564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003566:	f002 0208 	and.w	r2, r2, #8
 800356a:	9206      	str	r2, [sp, #24]
 800356c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800356e:	9407      	str	r4, [sp, #28]
 8003570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003572:	f042 0210 	orr.w	r2, r2, #16
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800357e:	4622      	mov	r2, r4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003580:	9307      	str	r3, [sp, #28]
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003582:	2101      	movs	r1, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003584:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003586:	f7fd fb05 	bl	8000b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_Pin | LED_BLUE_Pin, GPIO_PIN_RESET);
 800358a:	4622      	mov	r2, r4
 800358c:	4863      	ldr	r0, [pc, #396]	; (800371c <main+0x228>)
 800358e:	21e0      	movs	r1, #224	; 0xe0
 8003590:	f7fd fb00 	bl	8000b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, RSIGNAL_Pin | LSIGNAL_Pin | BRAKE_Pin | HHIGH_Pin
 8003594:	4622      	mov	r2, r4
 8003596:	4862      	ldr	r0, [pc, #392]	; (8003720 <main+0x22c>)
 8003598:	213f      	movs	r1, #63	; 0x3f
 800359a:	f7fd fafb 	bl	8000b94 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800359e:	2601      	movs	r6, #1
    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035a0:	485c      	ldr	r0, [pc, #368]	; (8003714 <main+0x220>)
 80035a2:	a91c      	add	r1, sp, #112	; 0x70
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a8:	e9cd 661c 	strd	r6, r6, [sp, #112]	; 0x70
    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f7fd f9fe 	bl	80009ac <HAL_GPIO_Init>
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035b0:	485a      	ldr	r0, [pc, #360]	; (800371c <main+0x228>)
    GPIO_InitStruct.Pin = B1_Pin;
 80035b2:	961c      	str	r6, [sp, #112]	; 0x70
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035b4:	a91c      	add	r1, sp, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	e9cd 541d 	strd	r5, r4, [sp, #116]	; 0x74
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f7fd f9f7 	bl	80009ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_RED_Pin | LED_GREEN_Pin | LED_BLUE_Pin;
 80035be:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c0:	4856      	ldr	r0, [pc, #344]	; (800371c <main+0x228>)
 80035c2:	a91c      	add	r1, sp, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c4:	e9cd 361c 	strd	r3, r6, [sp, #112]	; 0x70
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c8:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
    GPIO_InitStruct.Pin = BOOT1_Pin;
 80035cc:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	f7fd f9ed 	bl	80009ac <HAL_GPIO_Init>
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80035d2:	4854      	ldr	r0, [pc, #336]	; (8003724 <main+0x230>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	941e      	str	r4, [sp, #120]	; 0x78
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80035d6:	a91c      	add	r1, sp, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d8:	e9cd 741c 	strd	r7, r4, [sp, #112]	; 0x70
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f7fd f9e6 	bl	80009ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RSIGNAL_Pin | LSIGNAL_Pin | BRAKE_Pin | HHIGH_Pin
 80035e0:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e2:	484f      	ldr	r0, [pc, #316]	; (8003720 <main+0x22c>)
 80035e4:	a91c      	add	r1, sp, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	e9cd 361c 	strd	r3, r6, [sp, #112]	; 0x70
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ee:	f7fd f9dd 	bl	80009ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80035f2:	2302      	movs	r3, #2
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80035f4:	484c      	ldr	r0, [pc, #304]	; (8003728 <main+0x234>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	941e      	str	r4, [sp, #120]	; 0x78
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80035f8:	a91c      	add	r1, sp, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035fa:	e9cd 351c 	strd	r3, r5, [sp, #112]	; 0x70
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f7fd f9d5 	bl	80009ac <HAL_GPIO_Init>
    hcan2.Instance = CAN2;
 8003602:	4d4a      	ldr	r5, [pc, #296]	; (800372c <main+0x238>)
 8003604:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <main+0x23c>)
    hcan2.Init.BS2 = CAN_BS2_4TQ;
 8003606:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    hcan2.Init.Prescaler = 4;
 800360a:	e9c5 3700 	strd	r3, r7, [r5]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800360e:	4628      	mov	r0, r5
    hcan2.Init.BS2 = CAN_BS2_4TQ;
 8003610:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    hcan2.Init.SJW = CAN_SJW_1TQ;
 8003614:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hcan2.Init.ABOM = DISABLE;
 8003618:	e9c5 4406 	strd	r4, r4, [r5, #24]
    hcan2.Init.NART = DISABLE;
 800361c:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hcan2.Init.TXFP = DISABLE;
 8003620:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
    hcan2.Init.BS2 = CAN_BS2_4TQ;
 8003624:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003628:	f7fc fec2 	bl	80003b0 <HAL_CAN_Init>
 800362c:	4604      	mov	r4, r0
 800362e:	b100      	cbz	r0, 8003632 <main+0x13e>
    while (1)
 8003630:	e7fe      	b.n	8003630 <main+0x13c>
    vTraceEnable(TRC_START);
 8003632:	4630      	mov	r0, r6
 8003634:	f000 fec2 	bl	80043bc <xTraceEnable>
    sFilterConfig.FilterIdHigh = LIGHTS_INPUT_STDID << 5; // Filter registers need to be shifted left 5 bits
 8003638:	f24e 0320 	movw	r3, #57376	; 0xe020
    sFilterConfig.FilterIdLow = 0; // Filter registers need to be shifted left 5 bits
 800363c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    batteryFilterConfig.FilterIdHigh = AUXBMS_INPUT_STDID << 5; // Filter registers need to be shifted left 5 bits
 8003640:	f24e 4220 	movw	r2, #58400	; 0xe420
    sFilterConfig.FilterMaskIdHigh = DRIVERS_INPUTS_STDID << 5;
 8003644:	f24e 0360 	movw	r3, #57440	; 0xe060
    if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8003648:	a912      	add	r1, sp, #72	; 0x48
 800364a:	4628      	mov	r0, r5
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST; // Look for specific can messages
 800364c:	e9cd 4617 	strd	r4, r6, [sp, #92]	; 0x5c
    sFilterConfig.FilterMaskIdLow = 0; // Unused
 8003650:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    sFilterConfig.BankNumber = 0; // Set all filter banks for CAN2
 8003654:	e9cd 641a 	strd	r6, r4, [sp, #104]	; 0x68
    batteryFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST; // Look for specific can messages
 8003658:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
    batteryFilterConfig.FilterIdLow = 0; // Filter registers need to be shifted left 5 bits
 800365c:	e9cd 241c 	strd	r2, r4, [sp, #112]	; 0x70
    batteryFilterConfig.FilterMaskIdLow = 0; //unused
 8003660:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    batteryFilterConfig.BankNumber = 0; // Set all filter banks for CAN2
 8003664:	e9cd 6424 	strd	r6, r4, [sp, #144]	; 0x90
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003668:	9619      	str	r6, [sp, #100]	; 0x64
    sFilterConfig.FilterFIFOAssignment = 0;
 800366a:	9416      	str	r4, [sp, #88]	; 0x58
    batteryFilterConfig.FilterNumber = 1; // Use secondary filter bank
 800366c:	9621      	str	r6, [sp, #132]	; 0x84
    batteryFilterConfig.FilterFIFOAssignment = 0;
 800366e:	9420      	str	r4, [sp, #128]	; 0x80
    if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8003670:	f7fc fe22 	bl	80002b8 <HAL_CAN_ConfigFilter>
 8003674:	b100      	cbz	r0, 8003678 <main+0x184>
    while (1)
 8003676:	e7fe      	b.n	8003676 <main+0x182>
    if (HAL_CAN_ConfigFilter(&hcan2, &batteryFilterConfig) != HAL_OK)
 8003678:	a91c      	add	r1, sp, #112	; 0x70
 800367a:	4628      	mov	r0, r5
 800367c:	f7fc fe1c 	bl	80002b8 <HAL_CAN_ConfigFilter>
 8003680:	4601      	mov	r1, r0
 8003682:	b100      	cbz	r0, 8003686 <main+0x192>
    while (1)
 8003684:	e7fe      	b.n	8003684 <main+0x190>
    hcan2.pTxMsg = &txMessage;
 8003686:	f105 0340 	add.w	r3, r5, #64	; 0x40
    hcan2.pTxMsg->IDE = CAN_ID_STD; // Standard CAN, not Extended
 800368a:	e9c5 0012 	strd	r0, r0, [r5, #72]	; 0x48
    hcan2.pTxMsg = &txMessage;
 800368e:	632b      	str	r3, [r5, #48]	; 0x30
    hcan2.pTxMsg->ExtId = 0x0; // Only used if (hcan2.pTxMsg->IDE == CAN_ID_EXT)
 8003690:	6468      	str	r0, [r5, #68]	; 0x44
    hcan2.pRxMsg = &rxMessage;
 8003692:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    if (HAL_CAN_Receive_IT(&hcan2, CAN_FIFO0) != HAL_OK)
 8003696:	4628      	mov	r0, r5
    hcan2.pRxMsg = &rxMessage;
 8003698:	636b      	str	r3, [r5, #52]	; 0x34
    hcan2.pTxMsg->DLC = 1; // Data size in bytes
 800369a:	652e      	str	r6, [r5, #80]	; 0x50
    if (HAL_CAN_Receive_IT(&hcan2, CAN_FIFO0) != HAL_OK)
 800369c:	f7fc ff9f 	bl	80005de <HAL_CAN_Receive_IT>
 80036a0:	4607      	mov	r7, r0
 80036a2:	b100      	cbz	r0, 80036a6 <main+0x1b2>
    while (1)
 80036a4:	e7fe      	b.n	80036a4 <main+0x1b0>
    osMutexDef(canHandleMutex);
 80036a6:	9001      	str	r0, [sp, #4]
    canHandleMutex = osMutexCreate(osMutex(canHandleMutex));
 80036a8:	a801      	add	r0, sp, #4
 80036aa:	f7fd fe62 	bl	8001372 <osMutexCreate>
    if (canHandleMutex == NULL)
 80036ae:	4680      	mov	r8, r0
 80036b0:	b900      	cbnz	r0, 80036b4 <main+0x1c0>
    while (1)
 80036b2:	e7fe      	b.n	80036b2 <main+0x1be>
    osThreadDef(lightsTask, updateLightsTask, osPriorityNormal, 1, configMINIMAL_STACK_SIZE);
 80036b4:	4c1f      	ldr	r4, [pc, #124]	; (8003734 <main+0x240>)
 80036b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b8:	ae08      	add	r6, sp, #32
 80036ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036bc:	4625      	mov	r5, r4
    lightsTaskHandle = osThreadCreate(osThread(lightsTask), NULL);
 80036be:	4639      	mov	r1, r7
    osThreadDef(lightsTask, updateLightsTask, osPriorityNormal, 1, configMINIMAL_STACK_SIZE);
 80036c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c4:	6033      	str	r3, [r6, #0]
    lightsTaskHandle = osThreadCreate(osThread(lightsTask), NULL);
 80036c6:	a808      	add	r0, sp, #32
 80036c8:	f7fd fe38 	bl	800133c <osThreadCreate>
    osThreadDef(lightsCanTask, reportLightsToCanTask, osPriorityNormal, 1, configMINIMAL_STACK_SIZE);
 80036cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ce:	ae0d      	add	r6, sp, #52	; 0x34
 80036d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	6033      	str	r3, [r6, #0]
    lightsCanTaskHandle = osThreadCreate(osThread(lightsCanTask), canHandleMutex);
 80036d6:	4641      	mov	r1, r8
    osThreadDef(heartbeatTask, sendHeartbeatTask, osPriorityNormal, 1, configMINIMAL_STACK_SIZE);
 80036d8:	f104 0618 	add.w	r6, r4, #24
    lightsCanTaskHandle = osThreadCreate(osThread(lightsCanTask), canHandleMutex);
 80036dc:	a80d      	add	r0, sp, #52	; 0x34
 80036de:	f7fd fe2d 	bl	800133c <osThreadCreate>
    osThreadDef(heartbeatTask, sendHeartbeatTask, osPriorityNormal, 1, configMINIMAL_STACK_SIZE);
 80036e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036e4:	ad12      	add	r5, sp, #72	; 0x48
 80036e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e8:	6833      	ldr	r3, [r6, #0]
 80036ea:	602b      	str	r3, [r5, #0]
    heartbeatHandle = osThreadCreate(osThread(heartbeatTask), canHandleMutex);
 80036ec:	4641      	mov	r1, r8
 80036ee:	a812      	add	r0, sp, #72	; 0x48
    osThreadDef(blinkLightsTask, blinkSignalLightsTask, osPriorityNormal, 1, configMINIMAL_STACK_SIZE);
 80036f0:	342c      	adds	r4, #44	; 0x2c
    heartbeatHandle = osThreadCreate(osThread(heartbeatTask), canHandleMutex);
 80036f2:	f7fd fe23 	bl	800133c <osThreadCreate>
    osThreadDef(blinkLightsTask, blinkSignalLightsTask, osPriorityNormal, 1, configMINIMAL_STACK_SIZE);
 80036f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f8:	ad1c      	add	r5, sp, #112	; 0x70
 80036fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	602b      	str	r3, [r5, #0]
    blinkLightsHandle = osThreadCreate(osThread(blinkLightsTask), NULL);
 8003700:	4639      	mov	r1, r7
 8003702:	a81c      	add	r0, sp, #112	; 0x70
 8003704:	f7fd fe1a 	bl	800133c <osThreadCreate>
    osKernelStart();
 8003708:	f7fd fe0c 	bl	8001324 <osKernelStart>
    while (1)
 800370c:	e7fe      	b.n	800370c <main+0x218>
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	40020800 	.word	0x40020800
 8003718:	10120000 	.word	0x10120000
 800371c:	40020000 	.word	0x40020000
 8003720:	40020c00 	.word	0x40020c00
 8003724:	40020400 	.word	0x40020400
 8003728:	40021000 	.word	0x40021000
 800372c:	20003d7c 	.word	0x20003d7c
 8003730:	40006800 	.word	0x40006800
 8003734:	080045b8 	.word	0x080045b8

08003738 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003738:	b508      	push	{r3, lr}
    /* USER CODE BEGIN MspInit 0 */
    /* USER CODE END MspInit 0 */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373a:	2003      	movs	r0, #3
 800373c:	f7fd f8c6 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>
    /* System interrupt init*/
    /* MemoryManagement_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	4611      	mov	r1, r2
 8003744:	f06f 000b 	mvn.w	r0, #11
 8003748:	f7fd f8d2 	bl	80008f0 <HAL_NVIC_SetPriority>
    /* BusFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	4611      	mov	r1, r2
 8003750:	f06f 000a 	mvn.w	r0, #10
 8003754:	f7fd f8cc 	bl	80008f0 <HAL_NVIC_SetPriority>
    /* UsageFault_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	4611      	mov	r1, r2
 800375c:	f06f 0009 	mvn.w	r0, #9
 8003760:	f7fd f8c6 	bl	80008f0 <HAL_NVIC_SetPriority>
    /* SVCall_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003764:	2200      	movs	r2, #0
 8003766:	4611      	mov	r1, r2
 8003768:	f06f 0004 	mvn.w	r0, #4
 800376c:	f7fd f8c0 	bl	80008f0 <HAL_NVIC_SetPriority>
    /* DebugMonitor_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	4611      	mov	r1, r2
 8003774:	f06f 0003 	mvn.w	r0, #3
 8003778:	f7fd f8ba 	bl	80008f0 <HAL_NVIC_SetPriority>
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	210f      	movs	r1, #15
 8003780:	f06f 0001 	mvn.w	r0, #1
 8003784:	f7fd f8b4 	bl	80008f0 <HAL_NVIC_SetPriority>
    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
    /* USER CODE BEGIN MspInit 1 */
    /* USER CODE END MspInit 1 */
}
 8003788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	210f      	movs	r1, #15
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f7fd b8ac 	b.w	80008f0 <HAL_NVIC_SetPriority>

08003798 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003798:	b510      	push	{r4, lr}
    GPIO_InitTypeDef GPIO_InitStruct;

    if (hcan->Instance == CAN2)
 800379a:	6802      	ldr	r2, [r0, #0]
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_CAN_MspInit+0x7c>)
 800379e:	429a      	cmp	r2, r3
{
 80037a0:	b088      	sub	sp, #32
    if (hcan->Instance == CAN2)
 80037a2:	d134      	bne.n	800380e <HAL_CAN_MspInit+0x76>
    {
        /* USER CODE BEGIN CAN2_MspInit 0 */
        /* USER CODE END CAN2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_CAN2_CLK_ENABLE();
 80037a4:	2400      	movs	r4, #0
 80037a6:	f503 33e8 	add.w	r3, r3, #118784	; 0x1d000
 80037aa:	9401      	str	r4, [sp, #4]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ae:	481a      	ldr	r0, [pc, #104]	; (8003818 <HAL_CAN_MspInit+0x80>)
        __HAL_RCC_CAN2_CLK_ENABLE();
 80037b0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
 80037b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80037bc:	9201      	str	r2, [sp, #4]
 80037be:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_CAN1_CLK_ENABLE();
 80037c0:	9402      	str	r4, [sp, #8]
 80037c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	9405      	str	r4, [sp, #20]
        __HAL_RCC_CAN1_CLK_ENABLE();
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
        __HAL_RCC_CAN1_CLK_ENABLE();
 80037d8:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	e9cd 2303 	strd	r2, r3, [sp, #12]
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80037e0:	2103      	movs	r1, #3
 80037e2:	2309      	movs	r3, #9
 80037e4:	e9cd 1306 	strd	r1, r3, [sp, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e8:	a903      	add	r1, sp, #12
 80037ea:	f7fd f8df 	bl	80009ac <HAL_GPIO_Init>
        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80037ee:	4622      	mov	r2, r4
 80037f0:	4621      	mov	r1, r4
 80037f2:	203f      	movs	r0, #63	; 0x3f
 80037f4:	f7fd f87c 	bl	80008f0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80037f8:	203f      	movs	r0, #63	; 0x3f
 80037fa:	f7fd f8ab 	bl	8000954 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80037fe:	2040      	movs	r0, #64	; 0x40
 8003800:	4622      	mov	r2, r4
 8003802:	4621      	mov	r1, r4
 8003804:	f7fd f874 	bl	80008f0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003808:	2040      	movs	r0, #64	; 0x40
 800380a:	f7fd f8a3 	bl	8000954 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN CAN2_MspInit 1 */
        /* USER CODE END CAN2_MspInit 1 */
    }
}
 800380e:	b008      	add	sp, #32
 8003810:	bd10      	pop	{r4, pc}
 8003812:	bf00      	nop
 8003814:	40006800 	.word	0x40006800
 8003818:	40020400 	.word	0x40020400

0800381c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800381c:	b530      	push	{r4, r5, lr}
 800381e:	4601      	mov	r1, r0
 8003820:	b089      	sub	sp, #36	; 0x24
    RCC_ClkInitTypeDef    clkconfig;
    uint32_t              uwTimclock = 0;
    uint32_t              uwPrescalerValue = 0;
    uint32_t              pFLatency;
    /*Configure the TIM2 IRQ priority */
    HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	201c      	movs	r0, #28
 8003826:	f7fd f863 	bl	80008f0 <HAL_NVIC_SetPriority>
    /* Enable the TIM2 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800382a:	201c      	movs	r0, #28
 800382c:	f7fd f892 	bl	8000954 <HAL_NVIC_EnableIRQ>
    /* Enable TIM2 clock */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003830:	2500      	movs	r5, #0
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <HAL_InitTick+0x6c>)
 8003834:	9502      	str	r5, [sp, #8]
 8003836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    /* Compute TIM2 clock */
    uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
    /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
    /* Initialize TIM2 */
    htim2.Instance = TIM2;
 8003838:	4c14      	ldr	r4, [pc, #80]	; (800388c <HAL_InitTick+0x70>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	9302      	str	r3, [sp, #8]
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003848:	a901      	add	r1, sp, #4
 800384a:	a803      	add	r0, sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 800384c:	9b02      	ldr	r3, [sp, #8]
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800384e:	f7fd fc1b 	bl	8001088 <HAL_RCC_GetClockConfig>
    uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8003852:	f7fd fc01 	bl	8001058 <HAL_RCC_GetPCLK1Freq>
    htim2.Instance = TIM2;
 8003856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800385a:	6023      	str	r3, [r4, #0]
    + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
    + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
    + ClockDivision = 0
    + Counter direction = Up
    */
    htim2.Init.Period = (1000000 / 1000) - 1;
 800385c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003860:	60e3      	str	r3, [r4, #12]
    uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8003862:	0040      	lsls	r0, r0, #1
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_InitTick+0x74>)
 8003866:	fbb0 f0f3 	udiv	r0, r0, r3
 800386a:	3801      	subs	r0, #1
    htim2.Init.Prescaler = uwPrescalerValue;
 800386c:	6060      	str	r0, [r4, #4]
    htim2.Init.ClockDivision = 0;
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;

    if (HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800386e:	4620      	mov	r0, r4
    htim2.Init.ClockDivision = 0;
 8003870:	6125      	str	r5, [r4, #16]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003872:	60a5      	str	r5, [r4, #8]
    if (HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003874:	f7fd fd3a 	bl	80012ec <HAL_TIM_Base_Init>
 8003878:	b920      	cbnz	r0, 8003884 <HAL_InitTick+0x68>
    {
        /* Start the TIM time Base generation in interrupt mode */
        return HAL_TIM_Base_Start_IT(&htim2);
 800387a:	4620      	mov	r0, r4
 800387c:	f7fd fc23 	bl	80010c6 <HAL_TIM_Base_Start_IT>
    }

    /* Return function status */
    return HAL_ERROR;
}
 8003880:	b009      	add	sp, #36	; 0x24
 8003882:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e7fb      	b.n	8003880 <HAL_InitTick+0x64>
 8003888:	40023800 	.word	0x40023800
 800388c:	20003e0c 	.word	0x20003e0c
 8003890:	000f4240 	.word	0x000f4240

08003894 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
    HAL_IncTick();
 8003894:	f7fc bd02 	b.w	800029c <HAL_IncTick>

08003898 <SysTick_Handler>:
*/
void SysTick_Handler(void)
{
    /* USER CODE BEGIN SysTick_IRQn 0 */
    /* USER CODE END SysTick_IRQn 0 */
    osSystickHandler();
 8003898:	f7fd bdb8 	b.w	800140c <osSystickHandler>

0800389c <TIM2_IRQHandler>:
*/
void TIM2_IRQHandler(void)
{
    /* USER CODE BEGIN TIM2_IRQn 0 */
    /* USER CODE END TIM2_IRQn 0 */
    HAL_TIM_IRQHandler(&htim2);
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <TIM2_IRQHandler+0x8>)
 800389e:	f7fd bc21 	b.w	80010e4 <HAL_TIM_IRQHandler>
 80038a2:	bf00      	nop
 80038a4:	20003e0c 	.word	0x20003e0c

080038a8 <CAN2_TX_IRQHandler>:
*/
void CAN2_TX_IRQHandler(void)
{
    /* USER CODE BEGIN CAN2_TX_IRQn 0 */
    /* USER CODE END CAN2_TX_IRQn 0 */
    HAL_CAN_IRQHandler(&hcan2);
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <CAN2_TX_IRQHandler+0x8>)
 80038aa:	f7fc bf4d 	b.w	8000748 <HAL_CAN_IRQHandler>
 80038ae:	bf00      	nop
 80038b0:	20003d7c 	.word	0x20003d7c

080038b4 <CAN2_RX0_IRQHandler>:
 80038b4:	f7ff bff8 	b.w	80038a8 <CAN2_TX_IRQHandler>

080038b8 <TzCtrl>:
}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 80038b8:	b508      	push	{r3, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecorderEnabled())
 80038ba:	f000 f973 	bl	8003ba4 <xTraceIsRecorderEnabled>
 80038be:	b108      	cbz	r0, 80038c4 <TzCtrl+0xc>
		{
			prvReportStackUsage();
 80038c0:	f000 fdf0 	bl	80044a4 <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80038c4:	2002      	movs	r0, #2
 80038c6:	f7fe fe9f 	bl	8002608 <vTaskDelay>
		if (xTraceIsRecorderEnabled())
 80038ca:	e7f6      	b.n	80038ba <TzCtrl+0x2>

080038cc <xTraceKernelPortGetUnusedStack>:
{
 80038cc:	b510      	push	{r4, lr}
 80038ce:	460c      	mov	r4, r1
	*puxUnusedStack = uxTaskGetStackHighWaterMark(pvTask);
 80038d0:	f7ff f84c 	bl	800296c <uxTaskGetStackHighWaterMark>
 80038d4:	6020      	str	r0, [r4, #0]
}
 80038d6:	2000      	movs	r0, #0
 80038d8:	bd10      	pop	{r4, pc}

080038da <prvTraceGetQueueType>:
	return ucQueueGetQueueType(pvQueue);
 80038da:	f7fe bb55 	b.w	8001f88 <ucQueueGetQueueType>

080038de <prvTraceGetTaskNumberLow16>:
{
 80038de:	b508      	push	{r3, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(pvTask));
 80038e0:	f7ff f83e 	bl	8002960 <uxTaskGetTaskNumber>
}
 80038e4:	b280      	uxth	r0, r0
 80038e6:	bd08      	pop	{r3, pc}

080038e8 <prvTraceGetTaskNumberHigh16>:
{
 80038e8:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(pvTask));
 80038ea:	f7ff f839 	bl	8002960 <uxTaskGetTaskNumber>
}
 80038ee:	0c00      	lsrs	r0, r0, #16
 80038f0:	bd08      	pop	{r3, pc}

080038f2 <prvTraceSetTaskNumberLow16>:
{
 80038f2:	b538      	push	{r3, r4, r5, lr}
 80038f4:	460d      	mov	r5, r1
 80038f6:	4604      	mov	r4, r0
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 80038f8:	f7ff f832 	bl	8002960 <uxTaskGetTaskNumber>
 80038fc:	0c01      	lsrs	r1, r0, #16
 80038fe:	0409      	lsls	r1, r1, #16
 8003900:	4329      	orrs	r1, r5
 8003902:	4620      	mov	r0, r4
}
 8003904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber(pvTask), uiValue));
 8003908:	f7ff b82d 	b.w	8002966 <vTaskSetTaskNumber>

0800390c <prvTraceSetTaskNumberHigh16>:
{
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4604      	mov	r4, r0
 8003910:	460d      	mov	r5, r1
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 8003912:	f7ff f825 	bl	8002960 <uxTaskGetTaskNumber>
 8003916:	b280      	uxth	r0, r0
 8003918:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 800391c:	4620      	mov	r0, r4
}
 800391e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber(pvTask), uiValue));
 8003922:	f7ff b820 	b.w	8002966 <vTaskSetTaskNumber>

08003926 <prvTraceGetQueueNumberLow16>:
{
 8003926:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8003928:	f7fe fb2a 	bl	8001f80 <uxQueueGetQueueNumber>
}
 800392c:	b280      	uxth	r0, r0
 800392e:	bd08      	pop	{r3, pc}

08003930 <prvTraceGetQueueNumberHigh16>:
{
 8003930:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8003932:	f7fe fb25 	bl	8001f80 <uxQueueGetQueueNumber>
}
 8003936:	0c00      	lsrs	r0, r0, #16
 8003938:	bd08      	pop	{r3, pc}

0800393a <prvTraceSetQueueNumberLow16>:
{
 800393a:	b538      	push	{r3, r4, r5, lr}
 800393c:	460d      	mov	r5, r1
 800393e:	4604      	mov	r4, r0
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8003940:	f7fe fb1e 	bl	8001f80 <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8003944:	0c01      	lsrs	r1, r0, #16
 8003946:	0409      	lsls	r1, r1, #16
 8003948:	4329      	orrs	r1, r5
 800394a:	4620      	mov	r0, r4
}
 800394c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8003950:	f7fe bb18 	b.w	8001f84 <vQueueSetQueueNumber>

08003954 <prvTraceSetQueueNumberHigh16>:
{
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4604      	mov	r4, r0
 8003958:	460d      	mov	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 800395a:	f7fe fb11 	bl	8001f80 <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 800395e:	b280      	uxth	r0, r0
 8003960:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 8003964:	4620      	mov	r0, r4
}
 8003966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 800396a:	f7fe bb0b 	b.w	8001f84 <vQueueSetQueueNumber>

0800396e <prvTraceGetCurrentTaskHandle>:
	return xTaskGetCurrentTaskHandle();
 800396e:	f7ff b80d 	b.w	800298c <xTaskGetCurrentTaskHandle>

08003972 <xTraceKernelPortInitialize>:
}
 8003972:	2000      	movs	r0, #0
 8003974:	4770      	bx	lr
	...

08003978 <xTraceKernelPortEnable>:
{
 8003978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (xTzCtrlHandle == 0)
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <xTraceKernelPortEnable+0x28>)
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	b953      	cbnz	r3, 8003996 <xTraceKernelPortEnable+0x1e>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &xTzCtrlHandle);
 8003980:	9201      	str	r2, [sp, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	9200      	str	r2, [sp, #0]
 8003986:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800398a:	4906      	ldr	r1, [pc, #24]	; (80039a4 <xTraceKernelPortEnable+0x2c>)
 800398c:	4806      	ldr	r0, [pc, #24]	; (80039a8 <xTraceKernelPortEnable+0x30>)
 800398e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003992:	f7fe fb29 	bl	8001fe8 <xTaskGenericCreate>
}
 8003996:	2000      	movs	r0, #0
 8003998:	b005      	add	sp, #20
 800399a:	f85d fb04 	ldr.w	pc, [sp], #4
 800399e:	bf00      	nop
 80039a0:	20003e4c 	.word	0x20003e4c
 80039a4:	08004668 	.word	0x08004668
 80039a8:	080038b9 	.word	0x080038b9

080039ac <xTraceKernelPortInitObjectPropertyTable>:

#endif

traceResult xTraceKernelPortInitObjectPropertyTable()
{
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <xTraceKernelPortInitObjectPropertyTable+0x68>)
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 80039ae:	491a      	ldr	r1, [pc, #104]	; (8003a18 <xTraceKernelPortInitObjectPropertyTable+0x6c>)
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80039b0:	681b      	ldr	r3, [r3, #0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80039b2:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80039b6:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 80039ba:	220f      	movs	r2, #15
 80039bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 80039c0:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <xTraceKernelPortInitObjectPropertyTable+0x70>)
 80039c2:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80039c6:	2213      	movs	r2, #19
 80039c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <xTraceKernelPortInitObjectPropertyTable+0x74>)
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80039ce:	4915      	ldr	r1, [pc, #84]	; (8003a24 <xTraceKernelPortInitObjectPropertyTable+0x78>)
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80039d0:	f44f 0020 	mov.w	r0, #10485760	; 0xa00000
 80039d4:	e9c3 021d 	strd	r0, r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80039d8:	f102 72b9 	add.w	r2, r2, #24248320	; 0x1720000
 80039dc:	f202 12bd 	addw	r2, r2, #445	; 0x1bd
 80039e0:	67da      	str	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80039e2:	f502 022f 	add.w	r2, r2, #11468800	; 0xaf0000
 80039e6:	32a5      	adds	r2, #165	; 0xa5
 80039e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80039ec:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80039f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80039f4:	f04f 0c09 	mov.w	ip, #9
 80039f8:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80039fc:	e9c3 c212 	strd	ip, r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8003a00:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8003a04:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8003a08:	2205      	movs	r2, #5
 8003a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	return TRC_SUCCESS;
}
 8003a0e:	2000      	movs	r0, #0
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20003e54 	.word	0x20003e54
 8003a18:	13101010 	.word	0x13101010
 8003a1c:	13131011 	.word	0x13131011
 8003a20:	01e00140 	.word	0x01e00140
 8003a24:	0f0a0a0a 	.word	0x0f0a0a0a

08003a28 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack()
{
 8003a28:	b538      	push	{r3, r4, r5, lr}
	uint32_t i = 0;

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8003a2a:	4c1e      	ldr	r4, [pc, #120]	; (8003aa4 <xTraceKernelPortInitObjectHandleStack+0x7c>)
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	82a3      	strh	r3, [r4, #20]
 8003a30:	8063      	strh	r3, [r4, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8003a32:	2314      	movs	r3, #20
 8003a34:	82e3      	strh	r3, [r4, #22]
 8003a36:	80a3      	strh	r3, [r4, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8003a38:	231e      	movs	r3, #30
 8003a3a:	8323      	strh	r3, [r4, #24]
 8003a3c:	80e3      	strh	r3, [r4, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8003a3e:	232d      	movs	r3, #45	; 0x2d
 8003a40:	8363      	strh	r3, [r4, #26]
 8003a42:	8123      	strh	r3, [r4, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8003a44:	2332      	movs	r3, #50	; 0x32
 8003a46:	83a3      	strh	r3, [r4, #28]
 8003a48:	8163      	strh	r3, [r4, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8003a4a:	2337      	movs	r3, #55	; 0x37
 8003a4c:	83e3      	strh	r3, [r4, #30]
 8003a4e:	81a3      	strh	r3, [r4, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8003a50:	233c      	movs	r3, #60	; 0x3c
 8003a52:	8423      	strh	r3, [r4, #32]
 8003a54:	81e3      	strh	r3, [r4, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8003a56:	2341      	movs	r3, #65	; 0x41
 8003a58:	8463      	strh	r3, [r4, #34]	; 0x22
 8003a5a:	8223      	strh	r3, [r4, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8003a5c:	2309      	movs	r3, #9
 8003a5e:	84a3      	strh	r3, [r4, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8003a60:	2313      	movs	r3, #19
 8003a62:	84e3      	strh	r3, [r4, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8003a64:	231d      	movs	r3, #29
 8003a66:	8523      	strh	r3, [r4, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8003a68:	232c      	movs	r3, #44	; 0x2c
 8003a6a:	8563      	strh	r3, [r4, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8003a6c:	2331      	movs	r3, #49	; 0x31
 8003a6e:	85a3      	strh	r3, [r4, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8003a70:	2336      	movs	r3, #54	; 0x36
 8003a72:	85e3      	strh	r3, [r4, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8003a74:	233b      	movs	r3, #59	; 0x3b
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8003a76:	2500      	movs	r5, #0
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8003a78:	8623      	strh	r3, [r4, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8003a7a:	2340      	movs	r3, #64	; 0x40
 8003a7c:	8663      	strh	r3, [r4, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;

	for (i = 0; i < TRACE_NCLASSES; i++)
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003a7e:	4629      	mov	r1, r5
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8003a80:	2345      	movs	r3, #69	; 0x45
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003a82:	2212      	movs	r2, #18
 8003a84:	f104 0036 	add.w	r0, r4, #54	; 0x36
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8003a88:	86a3      	strh	r3, [r4, #52]	; 0x34
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8003a8a:	8265      	strh	r5, [r4, #18]
 8003a8c:	8025      	strh	r5, [r4, #0]
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003a8e:	f000 fd77 	bl	8004580 <memset>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
	{
		objectHandleStacks.objectHandles[i] = 0;
 8003a92:	2246      	movs	r2, #70	; 0x46
 8003a94:	4629      	mov	r1, r5
 8003a96:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003a9a:	f000 fd71 	bl	8004580 <memset>
	}

	return TRC_SUCCESS;
}
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	bd38      	pop	{r3, r4, r5, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20003e70 	.word	0x20003e70

08003aa8 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
 8003aa8:	2808      	cmp	r0, #8
 8003aaa:	bf9a      	itte	ls
 8003aac:	4b02      	ldrls	r3, [pc, #8]	; (8003ab8 <pszTraceGetErrorNotEnoughHandles+0x10>)
 8003aae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 8003ab2:	4802      	ldrhi	r0, [pc, #8]	; (8003abc <pszTraceGetErrorNotEnoughHandles+0x14>)
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	08004608 	.word	0x08004608
 8003abc:	0800466f 	.word	0x0800466f

08003ac0 <prvTraceStop>:
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
	if (RecorderDataPtr != 0)
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <prvTraceStop+0x14>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	b10a      	cbz	r2, 8003aca <prvTraceStop+0xa>
	{
		RecorderDataPtr->recorderActive = 0;
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6311      	str	r1, [r2, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	b103      	cbz	r3, 8003ad0 <prvTraceStop+0x10>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8003ace:	4718      	bx	r3
	}
}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20003e54 	.word	0x20003e54

08003ad8 <prvStrncpy>:
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8003ad8:	3801      	subs	r0, #1
 8003ada:	440a      	add	r2, r1
 8003adc:	4291      	cmp	r1, r2
 8003ade:	d006      	beq.n	8003aee <prvStrncpy+0x16>
	{
		dst[i] = src[i];
 8003ae0:	780b      	ldrb	r3, [r1, #0]
 8003ae2:	f800 3f01 	strb.w	r3, [r0, #1]!
		if (src[i] == 0)
 8003ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f6      	bne.n	8003adc <prvStrncpy+0x4>
			break;
	}
}
 8003aee:	4770      	bx	lr

08003af0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8003af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8003af4:	2400      	movs	r4, #0
	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8003af6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003b70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x80>
{
 8003afa:	4606      	mov	r6, r0
 8003afc:	4625      	mov	r5, r4
	while (i < nofEntriesToCheck)
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d801      	bhi.n	8003b06 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
 8003b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		e = RecorderDataPtr->nextFreeIndex + i;
 8003b06:	f8d8 3000 	ldr.w	r3, [r8]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	4422      	add	r2, r4
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003b0e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8003b12:	0090      	lsls	r0, r2, #2
 8003b14:	f891 1954 	ldrb.w	r1, [r1, #2388]	; 0x954
 8003b18:	f101 0c67 	add.w	ip, r1, #103	; 0x67
 8003b1c:	fa5f fc8c 	uxtb.w	ip, ip
 8003b20:	f1bc 0f0e 	cmp.w	ip, #14
 8003b24:	d812      	bhi.n	8003b4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x5c>
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8003b26:	699f      	ldr	r7, [r3, #24]
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8003b28:	f101 0c68 	add.w	ip, r1, #104	; 0x68
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8003b2c:	fa52 f28c 	uxtab	r2, r2, ip
 8003b30:	42ba      	cmp	r2, r7
 8003b32:	d209      	bcs.n	8003b48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x58>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8003b34:	f101 0269 	add.w	r2, r1, #105	; 0x69
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f600 1054 	addw	r0, r0, #2388	; 0x954
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	2100      	movs	r1, #0
 8003b42:	4418      	add	r0, r3
 8003b44:	f000 fd1c 	bl	8004580 <memset>
		i++;
 8003b48:	3401      	adds	r4, #1
 8003b4a:	e7d8      	b.n	8003afe <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xe>
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8003b4c:	2901      	cmp	r1, #1
 8003b4e:	d1fb      	bne.n	8003b48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x58>
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8003b50:	6999      	ldr	r1, [r3, #24]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8003b52:	f600 1054 	addw	r0, r0, #2388	; 0x954
 8003b56:	eb03 0c00 	add.w	ip, r3, r0
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8003b5a:	3201      	adds	r2, #1
 8003b5c:	428a      	cmp	r2, r1
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8003b5e:	bf35      	itete	cc
 8003b60:	501d      	strcc	r5, [r3, r0]
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8003b62:	f8c3 5954 	strcs.w	r5, [r3, #2388]	; 0x954
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8003b66:	f8cc 5004 	strcc.w	r5, [ip, #4]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8003b6a:	501d      	strcs	r5, [r3, r0]
 8003b6c:	e7ec      	b.n	8003b48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x58>
 8003b6e:	bf00      	nop
 8003b70:	20003e54 	.word	0x20003e54

08003b74 <prvTraceUpdateCounters>:
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
	if (RecorderDataPtr->recorderActive == 0)
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <prvTraceUpdateCounters+0x2c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7a:	b17a      	cbz	r2, 8003b9c <prvTraceUpdateCounters+0x28>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	3201      	adds	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	3201      	adds	r2, #1

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003b86:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
	RecorderDataPtr->nextFreeIndex++;
 8003b8a:	61da      	str	r2, [r3, #28]
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
		RecorderDataPtr->nextFreeIndex = 0;
 8003b8c:	bf22      	ittt	cs
 8003b8e:	2101      	movcs	r1, #1
 8003b90:	2200      	movcs	r2, #0
 8003b92:	e9c3 2107 	strdcs	r2, r1, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8003b96:	2001      	movs	r0, #1
 8003b98:	f7ff bfaa 	b.w	8003af0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
#endif
}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20003e54 	.word	0x20003e54

08003ba4 <xTraceIsRecorderEnabled>:
	if (RecorderInitialized == 1 && RecorderDataPtr != 0)
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <xTraceIsRecorderEnabled+0x14>)
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	2a01      	cmp	r2, #1
 8003baa:	d103      	bne.n	8003bb4 <xTraceIsRecorderEnabled+0x10>
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	b110      	cbz	r0, 8003bb6 <xTraceIsRecorderEnabled+0x12>
		return RecorderDataPtr->recorderActive;
 8003bb0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003bb2:	4770      	bx	lr
		return 0;
 8003bb4:	2000      	movs	r0, #0
}
 8003bb6:	4770      	bx	lr
 8003bb8:	20003e54 	.word	0x20003e54

08003bbc <prvTraceError>:
{
 8003bbc:	b538      	push	{r3, r4, r5, lr}
	if (RecorderDataPtr != 0)
 8003bbe:	4c0b      	ldr	r4, [pc, #44]	; (8003bec <prvTraceError+0x30>)
 8003bc0:	6823      	ldr	r3, [r4, #0]
{
 8003bc2:	4605      	mov	r5, r0
	if (RecorderDataPtr != 0)
 8003bc4:	b10b      	cbz	r3, 8003bca <prvTraceError+0xe>
	prvTraceStop();
 8003bc6:	f7ff ff7b 	bl	8003ac0 <prvTraceStop>
	if (traceErrorMessage == 0)
 8003bca:	68e3      	ldr	r3, [r4, #12]
 8003bcc:	b963      	cbnz	r3, 8003be8 <prvTraceError+0x2c>
		if (RecorderDataPtr != 0)
 8003bce:	6820      	ldr	r0, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8003bd0:	60e5      	str	r5, [r4, #12]
		if (RecorderDataPtr != 0)
 8003bd2:	b148      	cbz	r0, 8003be8 <prvTraceError+0x2c>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003bd4:	2250      	movs	r2, #80	; 0x50
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003bdc:	f7ff ff7c 	bl	8003ad8 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
}
 8003be8:	bd38      	pop	{r3, r4, r5, pc}
 8003bea:	bf00      	nop
 8003bec:	20003e54 	.word	0x20003e54

08003bf0 <prvTraceNextFreeEventBufferSlot>:
{
 8003bf0:	b508      	push	{r3, lr}
	if (! RecorderDataPtr->recorderActive)
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <prvTraceNextFreeEventBufferSlot+0x28>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bf8:	b138      	cbz	r0, 8003c0a <prvTraceNextFreeEventBufferSlot+0x1a>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003bfa:	69d8      	ldr	r0, [r3, #28]
 8003bfc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c00:	d304      	bcc.n	8003c0c <prvTraceNextFreeEventBufferSlot+0x1c>
		prvTraceError("Attempt to index outside event buffer!");
 8003c02:	4806      	ldr	r0, [pc, #24]	; (8003c1c <prvTraceNextFreeEventBufferSlot+0x2c>)
 8003c04:	f7ff ffda 	bl	8003bbc <prvTraceError>
		return 0;
 8003c08:	2000      	movs	r0, #0
}
 8003c0a:	bd08      	pop	{r3, pc}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8003c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003c10:	f600 1054 	addw	r0, r0, #2388	; 0x954
 8003c14:	e7f9      	b.n	8003c0a <prvTraceNextFreeEventBufferSlot+0x1a>
 8003c16:	bf00      	nop
 8003c18:	20003e54 	.word	0x20003e54
 8003c1c:	08004961 	.word	0x08004961

08003c20 <prvTraceGetParam>:
	if (param <= param_max)
 8003c20:	4281      	cmp	r1, r0
{
 8003c22:	b538      	push	{r3, r4, r5, lr}
 8003c24:	4605      	mov	r5, r0
 8003c26:	460c      	mov	r4, r1
	if (param <= param_max)
 8003c28:	d90d      	bls.n	8003c46 <prvTraceGetParam+0x26>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8003c2a:	f7ff ffe1 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (xps != 0)
 8003c2e:	b148      	cbz	r0, 8003c44 <prvTraceGetParam+0x24>
			xps->type = DIV_XPS;
 8003c30:	2301      	movs	r3, #1
 8003c32:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8003c34:	ea24 0305 	bic.w	r3, r4, r5
 8003c38:	0a1a      	lsrs	r2, r3, #8
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8003c3a:	0c1b      	lsrs	r3, r3, #16
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8003c3c:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8003c3e:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
 8003c40:	f7ff ff98 	bl	8003b74 <prvTraceUpdateCounters>
		return param & param_max;
 8003c44:	402c      	ands	r4, r5
}
 8003c46:	4620      	mov	r0, r4
 8003c48:	bd38      	pop	{r3, r4, r5, pc}
	...

08003c4c <uiIndexOfObject>:
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003c4c:	2908      	cmp	r1, #8
{
 8003c4e:	b510      	push	{r4, lr}
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003c50:	d812      	bhi.n	8003c78 <uiIndexOfObject+0x2c>
 8003c52:	b188      	cbz	r0, 8003c78 <uiIndexOfObject+0x2c>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <uiIndexOfObject+0x38>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	185a      	adds	r2, r3, r1
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003c5a:	f892 4050 	ldrb.w	r4, [r2, #80]	; 0x50
 8003c5e:	4284      	cmp	r4, r0
 8003c60:	d30a      	bcc.n	8003c78 <uiIndexOfObject+0x2c>
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003c62:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003c66:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8003c6a:	f8b1 3074 	ldrh.w	r3, [r1, #116]	; 0x74
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003c6e:	3801      	subs	r0, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003c70:	fb02 3000 	mla	r0, r2, r0, r3
 8003c74:	b280      	uxth	r0, r0
}
 8003c76:	bd10      	pop	{r4, pc}
	prvTraceError("Object table lookup with invalid object handle or object class!");
 8003c78:	4803      	ldr	r0, [pc, #12]	; (8003c88 <uiIndexOfObject+0x3c>)
 8003c7a:	f7ff ff9f 	bl	8003bbc <prvTraceError>
	return 0;
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e7f9      	b.n	8003c76 <uiIndexOfObject+0x2a>
 8003c82:	bf00      	nop
 8003c84:	20003e54 	.word	0x20003e54
 8003c88:	080049cd 	.word	0x080049cd

08003c8c <prvTraceSetPriorityProperty>:
{
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	4605      	mov	r5, r0
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003c90:	4f07      	ldr	r7, [pc, #28]	; (8003cb0 <prvTraceSetPriorityProperty+0x24>)
{
 8003c92:	4608      	mov	r0, r1
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003c94:	4629      	mov	r1, r5
 8003c96:	683c      	ldr	r4, [r7, #0]
{
 8003c98:	4616      	mov	r6, r2
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003c9a:	f7ff ffd7 	bl	8003c4c <uiIndexOfObject>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	441d      	add	r5, r3
 8003ca2:	4420      	add	r0, r4
 8003ca4:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8003ca8:	4418      	add	r0, r3
 8003caa:	f880 6089 	strb.w	r6, [r0, #137]	; 0x89
}
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb0:	20003e54 	.word	0x20003e54

08003cb4 <prvTraceGetPriorityProperty>:
{
 8003cb4:	b570      	push	{r4, r5, r6, lr}
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8003cb6:	4e08      	ldr	r6, [pc, #32]	; (8003cd8 <prvTraceGetPriorityProperty+0x24>)
{
 8003cb8:	4605      	mov	r5, r0
 8003cba:	4608      	mov	r0, r1
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	6834      	ldr	r4, [r6, #0]
 8003cc0:	f7ff ffc4 	bl	8003c4c <uiIndexOfObject>
 8003cc4:	6833      	ldr	r3, [r6, #0]
 8003cc6:	441d      	add	r5, r3
 8003cc8:	4420      	add	r0, r4
 8003cca:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8003cce:	4418      	add	r0, r3
}
 8003cd0:	f890 0089 	ldrb.w	r0, [r0, #137]	; 0x89
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20003e54 	.word	0x20003e54

08003cdc <prvTraceSetObjectState>:
{
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	4605      	mov	r5, r0
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8003ce0:	4f07      	ldr	r7, [pc, #28]	; (8003d00 <prvTraceSetObjectState+0x24>)
{
 8003ce2:	4608      	mov	r0, r1
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	683c      	ldr	r4, [r7, #0]
{
 8003ce8:	4616      	mov	r6, r2
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8003cea:	f7ff ffaf 	bl	8003c4c <uiIndexOfObject>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	441d      	add	r5, r3
 8003cf2:	4420      	add	r0, r4
 8003cf4:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8003cf8:	4418      	add	r0, r3
 8003cfa:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
}
 8003cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d00:	20003e54 	.word	0x20003e54

08003d04 <prvTraceSetTaskInstanceFinished>:
{
 8003d04:	b538      	push	{r3, r4, r5, lr}
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8003d06:	4d07      	ldr	r5, [pc, #28]	; (8003d24 <prvTraceSetTaskInstanceFinished+0x20>)
 8003d08:	2103      	movs	r1, #3
 8003d0a:	682c      	ldr	r4, [r5, #0]
 8003d0c:	f7ff ff9e 	bl	8003c4c <uiIndexOfObject>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003d16:	4420      	add	r0, r4
 8003d18:	4418      	add	r0, r3
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
}
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20003e54 	.word	0x20003e54

08003d28 <prvMarkObjectAsUsed>:
{
 8003d28:	b508      	push	{r3, lr}
 8003d2a:	460b      	mov	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8003d2c:	4601      	mov	r1, r0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff8c 	bl	8003c4c <uiIndexOfObject>
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <prvMarkObjectAsUsed+0x1c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4418      	add	r0, r3
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
}
 8003d40:	bd08      	pop	{r3, pc}
 8003d42:	bf00      	nop
 8003d44:	20003e54 	.word	0x20003e54

08003d48 <prvTraceGetObjectHandle>:
{
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d4a:	f3ef 8510 	mrs	r5, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8003d54:	4c1c      	ldr	r4, [pc, #112]	; (8003dc8 <prvTraceGetObjectHandle+0x80>)
 8003d56:	68a3      	ldr	r3, [r4, #8]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	60a3      	str	r3, [r4, #8]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8003d5c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 8003d60:	0046      	lsls	r6, r0, #1
 8003d62:	8b9b      	ldrh	r3, [r3, #28]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8003d64:	18e1      	adds	r1, r4, r3
 8003d66:	f891 2064 	ldrb.w	r2, [r1, #100]	; 0x64
 8003d6a:	b932      	cbnz	r2, 8003d7a <prvTraceGetObjectHandle+0x32>
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8003d6c:	eb04 0740 	add.w	r7, r4, r0, lsl #1
			(traceHandle)(1 + indexOfHandle -
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	8dff      	ldrh	r7, [r7, #46]	; 0x2e
 8003d74:	1bd2      	subs	r2, r2, r7
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003d76:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8003d7a:	eb04 0240 	add.w	r2, r4, r0, lsl #1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003d7e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20b      	bcs.n	8003d9e <prvTraceGetObjectHandle+0x56>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003d86:	f7ff fe8f 	bl	8003aa8 <pszTraceGetErrorNotEnoughHandles>
 8003d8a:	f7ff ff17 	bl	8003bbc <prvTraceError>
		handle = 0;
 8003d8e:	2100      	movs	r1, #0
	trcCRITICAL_SECTION_END();
 8003d90:	68a3      	ldr	r3, [r4, #8]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60a3      	str	r3, [r4, #8]
 8003d96:	f385 8810 	msr	PRIMASK, r5
}
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003d9e:	18e2      	adds	r2, r4, r3
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8003da0:	3301      	adds	r3, #1
	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003da2:	f892 1064 	ldrb.w	r1, [r2, #100]	; 0x64
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8003da6:	19a2      	adds	r2, r4, r6
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	8393      	strh	r3, [r2, #28]
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8003dac:	eb04 0240 	add.w	r2, r4, r0, lsl #1
 8003db0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003db2:	1a9b      	subs	r3, r3, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8003db4:	f100 0218 	add.w	r2, r0, #24
 8003db8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003dbc:	8c50      	ldrh	r0, [r2, #34]	; 0x22
		if (hndCount >
 8003dbe:	4298      	cmp	r0, r3
				(traceHandle)hndCount;
 8003dc0:	bfbc      	itt	lt
 8003dc2:	b2db      	uxtblt	r3, r3
 8003dc4:	8453      	strhlt	r3, [r2, #34]	; 0x22
 8003dc6:	e7e3      	b.n	8003d90 <prvTraceGetObjectHandle+0x48>
 8003dc8:	20003e54 	.word	0x20003e54

08003dcc <prvTraceSetObjectName>:
{
 8003dcc:	b570      	push	{r4, r5, r6, lr}
		name = "";
 8003dce:	4d16      	ldr	r5, [pc, #88]	; (8003e28 <prvTraceSetObjectName+0x5c>)
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	bf18      	it	ne
 8003dd4:	4615      	movne	r5, r2
	if (objectclass >= TRACE_NCLASSES)
 8003dd6:	2808      	cmp	r0, #8
{
 8003dd8:	4604      	mov	r4, r0
 8003dda:	460b      	mov	r3, r1
	if (objectclass >= TRACE_NCLASSES)
 8003ddc:	d904      	bls.n	8003de8 <prvTraceSetObjectName+0x1c>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8003dde:	4813      	ldr	r0, [pc, #76]	; (8003e2c <prvTraceSetObjectName+0x60>)
}
 8003de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8003de4:	f7ff beea 	b.w	8003bbc <prvTraceError>
	if (handle == 0)
 8003de8:	b909      	cbnz	r1, 8003dee <prvTraceSetObjectName+0x22>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8003dea:	4811      	ldr	r0, [pc, #68]	; (8003e30 <prvTraceSetObjectName+0x64>)
 8003dec:	e7f8      	b.n	8003de0 <prvTraceSetObjectName+0x14>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8003dee:	4e11      	ldr	r6, [pc, #68]	; (8003e34 <prvTraceSetObjectName+0x68>)
 8003df0:	6832      	ldr	r2, [r6, #0]
 8003df2:	4402      	add	r2, r0
 8003df4:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8003df8:	428a      	cmp	r2, r1
 8003dfa:	d202      	bcs.n	8003e02 <prvTraceSetObjectName+0x36>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003dfc:	f7ff fe54 	bl	8003aa8 <pszTraceGetErrorNotEnoughHandles>
 8003e00:	e7ee      	b.n	8003de0 <prvTraceSetObjectName+0x14>
		idx = uiIndexOfObject(handle, objectclass);
 8003e02:	4601      	mov	r1, r0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff21 	bl	8003c4c <uiIndexOfObject>
		if (traceErrorMessage == 0)
 8003e0a:	68f3      	ldr	r3, [r6, #12]
 8003e0c:	b953      	cbnz	r3, 8003e24 <prvTraceSetObjectName+0x58>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8003e0e:	6833      	ldr	r3, [r6, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8003e10:	441c      	add	r4, r3
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8003e12:	3088      	adds	r0, #136	; 0x88
 8003e14:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4418      	add	r0, r3
}
 8003e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8003e20:	f7ff be5a 	b.w	8003ad8 <prvStrncpy>
}
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
 8003e26:	bf00      	nop
 8003e28:	08004a39 	.word	0x08004a39
 8003e2c:	08004a3a 	.word	0x08004a3a
 8003e30:	08004a68 	.word	0x08004a68
 8003e34:	20003e54 	.word	0x20003e54

08003e38 <xTraceHardwarePortInitCortexM>:
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void xTraceHardwarePortInitCortexM()
{
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <xTraceHardwarePortInitCortexM+0x3c>)
 8003e3a:	4a0f      	ldr	r2, [pc, #60]	; (8003e78 <xTraceHardwarePortInitCortexM+0x40>)
 8003e3c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8003e40:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003e44:	f8d2 1dfc 	ldr.w	r1, [r2, #3580]	; 0xdfc
 8003e48:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003e4c:	f8c2 1dfc 	str.w	r1, [r2, #3580]	; 0xdfc

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8003e50:	f8d2 2dfc 	ldr.w	r2, [r2, #3580]	; 0xdfc
 8003e54:	b912      	cbnz	r2, 8003e5c <xTraceHardwarePortInitCortexM+0x24>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8003e56:	4809      	ldr	r0, [pc, #36]	; (8003e7c <xTraceHardwarePortInitCortexM+0x44>)
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8003e58:	f7ff beb0 	b.w	8003bbc <prvTraceError>
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
 8003e62:	d001      	beq.n	8003e68 <xTraceHardwarePortInitCortexM+0x30>
			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8003e64:	4806      	ldr	r0, [pc, #24]	; (8003e80 <xTraceHardwarePortInitCortexM+0x48>)
 8003e66:	e7f7      	b.n	8003e58 <xTraceHardwarePortInitCortexM+0x20>
			break;
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8003e68:	605a      	str	r2, [r3, #4]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

	}while(0);	/* breaks above jump here */
}
 8003e72:	4770      	bx	lr
 8003e74:	e0001000 	.word	0xe0001000
 8003e78:	c5acce55 	.word	0xc5acce55
 8003e7c:	08004a95 	.word	0x08004a95
 8003e80:	08004abf 	.word	0x08004abf

08003e84 <xTraceInitialize>:
{
 8003e84:	b570      	push	{r4, r5, r6, lr}
	if (RecorderInitialized != 0)
 8003e86:	4c46      	ldr	r4, [pc, #280]	; (8003fa0 <xTraceInitialize+0x11c>)
 8003e88:	6963      	ldr	r3, [r4, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8086 	bne.w	8003f9c <xTraceInitialize+0x118>
	CurrentFilterMask = 0xFFFF;
 8003e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e94:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	CurrentFilterGroup = FilterGroup0;
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	traceErrorMessage = 0;
 8003e9e:	60e3      	str	r3, [r4, #12]
	tasksNotIncluded = 0;
 8003ea0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8003ea4:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
		tasksInStackMonitor[i].tcb = 0;
 8003ea8:	461d      	mov	r5, r3
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8003eaa:	3301      	adds	r3, #1
 8003eac:	2b0a      	cmp	r3, #10
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
 8003eae:	e9c2 5500 	strd	r5, r5, [r2]
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8003eb2:	f102 0208 	add.w	r2, r2, #8
 8003eb6:	d1f8      	bne.n	8003eaa <xTraceInitialize+0x26>
	RecorderDataPtr = &RecorderData;
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <xTraceInitialize+0x120>)
 8003eba:	6023      	str	r3, [r4, #0]
	init_hwtc_count = TRC_HWTC_COUNT;
 8003ebc:	4b3a      	ldr	r3, [pc, #232]	; (8003fa8 <xTraceInitialize+0x124>)
	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8003ebe:	483b      	ldr	r0, [pc, #236]	; (8003fac <xTraceInitialize+0x128>)
	init_hwtc_count = TRC_HWTC_COUNT;
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8003ec6:	f7ff fd54 	bl	8003972 <xTraceKernelPortInitialize>
 8003eca:	2801      	cmp	r0, #1
 8003ecc:	d067      	beq.n	8003f9e <xTraceInitialize+0x11a>
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8003ece:	f641 1604 	movw	r6, #6404	; 0x1904
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4632      	mov	r2, r6
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	f000 fb52 	bl	8004580 <memset>
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <xTraceInitialize+0x12c>)
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8003ee0:	635d      	str	r5, [r3, #52]	; 0x34
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8003ee2:	e9c3 2603 	strd	r2, r6, [r3, #12]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8003ee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eea:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8003eec:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8003ef0:	e9c3 2510 	strd	r2, r5, [r3, #64]	; 0x40
	xTraceKernelPortInitObjectPropertyTable();
 8003ef4:	f7ff fd5a 	bl	80039ac <xTraceKernelPortInitObjectPropertyTable>
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8003ef8:	6820      	ldr	r0, [r4, #0]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8003efa:	492e      	ldr	r1, [pc, #184]	; (8003fb4 <xTraceInitialize+0x130>)
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8003efc:	f04f 33f1 	mov.w	r3, #4059165169	; 0xf1f1f1f1
 8003f00:	f8c0 3548 	str.w	r3, [r0, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8003f04:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003f08:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8003f0c:	2501      	movs	r5, #1
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8003f0e:	f04f 33f2 	mov.w	r3, #4076008178	; 0xf2f2f2f2
 8003f12:	f8c0 38fc 	str.w	r3, [r0, #2300]	; 0x8fc
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8003f16:	f8c0 5550 	str.w	r5, [r0, #1360]	; 0x550
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8003f1a:	2250      	movs	r2, #80	; 0x50
 8003f1c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003f20:	f7ff fdda 	bl	8003ad8 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8003f2a:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 8003f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <xTraceInitialize+0x134>)
 8003f34:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
	RecorderDataPtr->endmarker4 = 0x71;
 8003f38:	f102 3267 	add.w	r2, r2, #1734829927	; 0x67676767
 8003f3c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	RecorderDataPtr->endmarker8 = 0xF1;
 8003f40:	f102 3280 	add.w	r2, r2, #2155905152	; 0x80808080
 8003f44:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
	xTraceKernelPortInitObjectHandleStack();
 8003f48:	f7ff fd6e 	bl	8003a28 <xTraceKernelPortInitObjectHandleStack>
	RecorderDataPtr->startmarker11 = 0xF4;
 8003f4c:	6820      	ldr	r0, [r4, #0]
 8003f4e:	23f4      	movs	r3, #244	; 0xf4
 8003f50:	72c3      	strb	r3, [r0, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8003f52:	23f3      	movs	r3, #243	; 0xf3
 8003f54:	7283      	strb	r3, [r0, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8003f56:	23f2      	movs	r3, #242	; 0xf2
 8003f58:	7243      	strb	r3, [r0, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8003f5a:	23f1      	movs	r3, #241	; 0xf1
 8003f5c:	7203      	strb	r3, [r0, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8003f5e:	2374      	movs	r3, #116	; 0x74
 8003f60:	71c3      	strb	r3, [r0, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8003f62:	2373      	movs	r3, #115	; 0x73
 8003f64:	7183      	strb	r3, [r0, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8003f66:	2372      	movs	r3, #114	; 0x72
 8003f68:	7143      	strb	r3, [r0, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8003f6a:	2371      	movs	r3, #113	; 0x71
 8003f6c:	7103      	strb	r3, [r0, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	70c3      	strb	r3, [r0, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8003f72:	2303      	movs	r3, #3
 8003f74:	7083      	strb	r3, [r0, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8003f76:	2302      	movs	r3, #2
 8003f78:	7043      	strb	r3, [r0, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8003f7a:	7005      	strb	r5, [r0, #0]
	if (traceErrorMessage != 0)
 8003f7c:	68e1      	ldr	r1, [r4, #12]
 8003f7e:	b149      	cbz	r1, 8003f94 <xTraceInitialize+0x110>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003f80:	2250      	movs	r2, #80	; 0x50
 8003f82:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003f86:	f7ff fda7 	bl	8003ad8 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	f8c3 58f8 	str.w	r5, [r3, #2296]	; 0x8f8
		prvTraceStop();
 8003f90:	f7ff fd96 	bl	8003ac0 <prvTraceStop>
	TRC_PORT_SPECIFIC_INIT();
 8003f94:	f7ff ff50 	bl	8003e38 <xTraceHardwarePortInitCortexM>
	RecorderInitialized = 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	6163      	str	r3, [r4, #20]
		return TRC_SUCCESS;
 8003f9c:	2000      	movs	r0, #0
}
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	20003e54 	.word	0x20003e54
 8003fa4:	20003f88 	.word	0x20003f88
 8003fa8:	e0001000 	.word	0xe0001000
 8003fac:	20003f5c 	.word	0x20003f5c
 8003fb0:	00071aa1 	.word	0x00071aa1
 8003fb4:	08004aeb 	.word	0x08004aeb
 8003fb8:	0d0c0b0a 	.word	0x0d0c0b0a

08003fbc <prvTracePortGetTimeStamp>:
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8003fbc:	4b10      	ldr	r3, [pc, #64]	; (8004000 <prvTracePortGetTimeStamp+0x44>)
 8003fbe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003fc2:	2a01      	cmp	r2, #1
{
 8003fc4:	b510      	push	{r4, lr}
	if (trace_disable_timestamp == 1)
 8003fc6:	d104      	bne.n	8003fd2 <prvTracePortGetTimeStamp+0x16>
	{
		if (pTimestamp)
 8003fc8:	b110      	cbz	r0, 8003fd0 <prvTracePortGetTimeStamp+0x14>
			*pTimestamp = last_timestamp;
 8003fca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003fce:	6003      	str	r3, [r0, #0]
	if (pTimestamp)
		*pTimestamp = last_timestamp;

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
}
 8003fd0:	bd10      	pop	{r4, pc}
	hwtc_count = (TRC_HWTC_COUNT);
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <prvTracePortGetTimeStamp+0x48>)
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8003fd4:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
	hwtc_count = (TRC_HWTC_COUNT);
 8003fd8:	6854      	ldr	r4, [r2, #4]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8003fda:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003fde:	4422      	add	r2, r4
 8003fe0:	1a52      	subs	r2, r2, r1
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8003fe2:	f002 0103 	and.w	r1, r2, #3
 8003fe6:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	last_timestamp += diff_scaled;
 8003fea:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8003fee:	eb01 0292 	add.w	r2, r1, r2, lsr #2
 8003ff2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if (pTimestamp)
 8003ff6:	b100      	cbz	r0, 8003ffa <prvTracePortGetTimeStamp+0x3e>
		*pTimestamp = last_timestamp;
 8003ff8:	6002      	str	r2, [r0, #0]
	last_hwtc_count = hwtc_count;
 8003ffa:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8003ffe:	e7e7      	b.n	8003fd0 <prvTracePortGetTimeStamp+0x14>
 8004000:	20003e54 	.word	0x20003e54
 8004004:	e0001000 	.word	0xe0001000

08004008 <prvTraceGetDTS>:
{
 8004008:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (RecorderDataPtr->frequency == 0)
 800400a:	4e2c      	ldr	r6, [pc, #176]	; (80040bc <prvTraceGetDTS+0xb4>)
 800400c:	6832      	ldr	r2, [r6, #0]
	uint32_t timestamp = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	9301      	str	r3, [sp, #4]
	if (RecorderDataPtr->frequency == 0)
 8004012:	6a53      	ldr	r3, [r2, #36]	; 0x24
{
 8004014:	4605      	mov	r5, r0
	if (RecorderDataPtr->frequency == 0)
 8004016:	b923      	cbnz	r3, 8004022 <prvTraceGetDTS+0x1a>
		if (timestampFrequency != 0)
 8004018:	69b3      	ldr	r3, [r6, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d034      	beq.n	8004088 <prvTraceGetDTS+0x80>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	6253      	str	r3, [r2, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
 8004022:	a801      	add	r0, sp, #4
 8004024:	f7ff ffca 	bl	8003fbc <prvTracePortGetTimeStamp>
	if (RecorderDataPtr->frequency > 0)
 8004028:	6833      	ldr	r3, [r6, #0]
	dts = timestamp - old_timestamp;
 800402a:	9a01      	ldr	r2, [sp, #4]
 800402c:	f8d6 411c 	ldr.w	r4, [r6, #284]	; 0x11c
	if (RecorderDataPtr->frequency > 0)
 8004030:	6a59      	ldr	r1, [r3, #36]	; 0x24
	old_timestamp = timestamp;
 8004032:	f8c6 211c 	str.w	r2, [r6, #284]	; 0x11c
	dts = timestamp - old_timestamp;
 8004036:	1b14      	subs	r4, r2, r4
	if (RecorderDataPtr->frequency > 0)
 8004038:	b191      	cbz	r1, 8004060 <prvTraceGetDTS+0x58>
		if (dts > RecorderDataPtr->frequency)
 800403a:	42a1      	cmp	r1, r4
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 800403c:	6a98      	ldr	r0, [r3, #40]	; 0x28
		if (dts > RecorderDataPtr->frequency)
 800403e:	d22c      	bcs.n	800409a <prvTraceGetDTS+0x92>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8004040:	fbb4 f2f1 	udiv	r2, r4, r1
 8004044:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004046:	4416      	add	r6, r2
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8004048:	fb01 4212 	mls	r2, r1, r2, r4
 800404c:	4402      	add	r2, r0
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800404e:	62de      	str	r6, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8004052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004054:	4291      	cmp	r1, r2
 8004056:	d804      	bhi.n	8004062 <prvTraceGetDTS+0x5a>
			RecorderDataPtr->absTimeLastEventSecond++;
 8004058:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800405a:	3001      	adds	r0, #1
 800405c:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800405e:	1a52      	subs	r2, r2, r1
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
	if (dts > param_maxDTS)
 8004062:	42a5      	cmp	r5, r4
 8004064:	d20c      	bcs.n	8004080 <prvTraceGetDTS+0x78>
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8004066:	f7ff fdc3 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (xts != 0)
 800406a:	b148      	cbz	r0, 8004080 <prvTraceGetDTS+0x78>
			if (param_maxDTS == 0xFFFF)
 800406c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004070:	429d      	cmp	r5, r3
 8004072:	d115      	bne.n	80040a0 <prvTraceGetDTS+0x98>
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8004074:	0c23      	lsrs	r3, r4, #16
 8004076:	8043      	strh	r3, [r0, #2]
				xts->type = XTS16;
 8004078:	23a9      	movs	r3, #169	; 0xa9
 800407a:	8003      	strh	r3, [r0, #0]
			prvTraceUpdateCounters();
 800407c:	f7ff fd7a 	bl	8003b74 <prvTraceUpdateCounters>
}
 8004080:	ea05 0004 	and.w	r0, r5, r4
 8004084:	b002      	add	sp, #8
 8004086:	bd70      	pop	{r4, r5, r6, pc}
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <prvTraceGetDTS+0xb8>)
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 8004090:	4299      	cmp	r1, r3
 8004092:	d0c6      	beq.n	8004022 <prvTraceGetDTS+0x1a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <prvTraceGetDTS+0xbc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	e7c1      	b.n	800401e <prvTraceGetDTS+0x16>
			RecorderDataPtr->absTimeLastEvent += dts;
 800409a:	4420      	add	r0, r4
 800409c:	6298      	str	r0, [r3, #40]	; 0x28
 800409e:	e7d8      	b.n	8004052 <prvTraceGetDTS+0x4a>
			else if (param_maxDTS == 0xFF)
 80040a0:	2dff      	cmp	r5, #255	; 0xff
 80040a2:	d106      	bne.n	80040b2 <prvTraceGetDTS+0xaa>
				xts->type = XTS8;
 80040a4:	23a8      	movs	r3, #168	; 0xa8
 80040a6:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80040a8:	0a23      	lsrs	r3, r4, #8
 80040aa:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80040ac:	0e23      	lsrs	r3, r4, #24
 80040ae:	7043      	strb	r3, [r0, #1]
 80040b0:	e7e4      	b.n	800407c <prvTraceGetDTS+0x74>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80040b2:	4805      	ldr	r0, [pc, #20]	; (80040c8 <prvTraceGetDTS+0xc0>)
 80040b4:	f7ff fd82 	bl	8003bbc <prvTraceError>
 80040b8:	e7e0      	b.n	800407c <prvTraceGetDTS+0x74>
 80040ba:	bf00      	nop
 80040bc:	20003e54 	.word	0x20003e54
 80040c0:	e0001000 	.word	0xe0001000
 80040c4:	20000000 	.word	0x20000000
 80040c8:	08004aff 	.word	0x08004aff

080040cc <prvTraceStoreTaskReady>:
{
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle == 0)
 80040ce:	4605      	mov	r5, r0
 80040d0:	b340      	cbz	r0, 8004124 <prvTraceStoreTaskReady+0x58>
	if (! readyEventsEnabled)
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <prvTraceStoreTaskReady+0x5c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b32b      	cbz	r3, 8004124 <prvTraceStoreTaskReady+0x58>
	if (recorder_busy)
 80040d8:	4c14      	ldr	r4, [pc, #80]	; (800412c <prvTraceStoreTaskReady+0x60>)
 80040da:	68a3      	ldr	r3, [r4, #8]
 80040dc:	b123      	cbz	r3, 80040e8 <prvTraceStoreTaskReady+0x1c>
}
 80040de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80040e2:	4813      	ldr	r0, [pc, #76]	; (8004130 <prvTraceStoreTaskReady+0x64>)
 80040e4:	f7ff bd6a 	b.w	8003bbc <prvTraceError>
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040e8:	f3ef 8710 	mrs	r7, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ec:	2301      	movs	r3, #1
 80040ee:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 80040f2:	68a3      	ldr	r3, [r4, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60a3      	str	r3, [r4, #8]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	b16b      	cbz	r3, 800411a <prvTraceStoreTaskReady+0x4e>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80040fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004102:	f7ff ff81 	bl	8004008 <prvTraceGetDTS>
 8004106:	4606      	mov	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8004108:	f7ff fd72 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (tr != 0)
 800410c:	b128      	cbz	r0, 800411a <prvTraceStoreTaskReady+0x4e>
			tr->type = DIV_TASK_READY;
 800410e:	2202      	movs	r2, #2
 8004110:	7002      	strb	r2, [r0, #0]
			tr->dts = dts3;
 8004112:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
 8004114:	7045      	strb	r5, [r0, #1]
			prvTraceUpdateCounters();
 8004116:	f7ff fd2d 	bl	8003b74 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 800411a:	68a3      	ldr	r3, [r4, #8]
 800411c:	3b01      	subs	r3, #1
 800411e:	60a3      	str	r3, [r4, #8]
 8004120:	f387 8810 	msr	PRIMASK, r7
}
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004126:	bf00      	nop
 8004128:	20000010 	.word	0x20000010
 800412c:	20003e54 	.word	0x20003e54
 8004130:	08004c5a 	.word	0x08004c5a

08004134 <vTraceStoreMemMangEvent>:
{
 8004134:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (RecorderDataPtr == 0)
 8004138:	4c29      	ldr	r4, [pc, #164]	; (80041e0 <vTraceStoreMemMangEvent+0xac>)
 800413a:	6823      	ldr	r3, [r4, #0]
{
 800413c:	4606      	mov	r6, r0
 800413e:	4688      	mov	r8, r1
	if (RecorderDataPtr == 0)
 8004140:	2b00      	cmp	r3, #0
 8004142:	d04a      	beq.n	80041da <vTraceStoreMemMangEvent+0xa6>
		size = (uint32_t)(- signed_size);
 8004144:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8004148:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800414c:	f3ef 8710 	mrs	r7, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	2301      	movs	r3, #1
 8004152:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	3301      	adds	r3, #1
 800415a:	60a3      	str	r3, [r4, #8]
	if (address != 0)
 800415c:	f1b8 0f00 	cmp.w	r8, #0
 8004160:	d007      	beq.n	8004172 <vTraceStoreMemMangEvent+0x3e>
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004166:	4402      	add	r2, r0
		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8004168:	6b98      	ldr	r0, [r3, #56]	; 0x38
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 800416a:	63da      	str	r2, [r3, #60]	; 0x3c
		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800416c:	4282      	cmp	r2, r0
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800416e:	bf88      	it	hi
 8004170:	639a      	strhi	r2, [r3, #56]	; 0x38
	if (RecorderDataPtr->recorderActive)
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	b35b      	cbz	r3, 80041d0 <vTraceStoreMemMangEvent+0x9c>
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8004178:	20ff      	movs	r0, #255	; 0xff
 800417a:	9101      	str	r1, [sp, #4]
 800417c:	f7ff ff44 	bl	8004008 <prvTraceGetDTS>
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8004180:	9901      	ldr	r1, [sp, #4]
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8004182:	4681      	mov	r9, r0
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8004184:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004188:	f7ff fd4a 	bl	8003c20 <prvTraceGetParam>
 800418c:	4682      	mov	sl, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 800418e:	f7ff fd2f 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (ms != 0)
 8004192:	4605      	mov	r5, r0
 8004194:	b1e0      	cbz	r0, 80041d0 <vTraceStoreMemMangEvent+0x9c>
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8004196:	f880 9001 	strb.w	r9, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800419a:	f04f 0900 	mov.w	r9, #0
 800419e:	f880 9000 	strb.w	r9, [r0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80041a2:	f8a0 a002 	strh.w	sl, [r0, #2]
			prvTraceUpdateCounters();
 80041a6:	f7ff fce5 	bl	8003b74 <prvTraceUpdateCounters>
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80041aa:	4641      	mov	r1, r8
 80041ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80041b0:	f7ff fd36 	bl	8003c20 <prvTraceGetParam>
 80041b4:	4680      	mov	r8, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80041b6:	f7ff fd1b 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
			if (ma != 0)
 80041ba:	b148      	cbz	r0, 80041d0 <vTraceStoreMemMangEvent+0x9c>
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80041bc:	b2f6      	uxtb	r6, r6
 80041be:	1c73      	adds	r3, r6, #1
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80041c0:	f8a0 8002 	strh.w	r8, [r0, #2]
				ma->addr_high = addr_high;
 80041c4:	f880 9001 	strb.w	r9, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80041c8:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80041ca:	702e      	strb	r6, [r5, #0]
				prvTraceUpdateCounters();
 80041cc:	f7ff fcd2 	bl	8003b74 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 80041d0:	68a3      	ldr	r3, [r4, #8]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	60a3      	str	r3, [r4, #8]
 80041d6:	f387 8810 	msr	PRIMASK, r7
}
 80041da:	b002      	add	sp, #8
 80041dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e0:	20003e54 	.word	0x20003e54

080041e4 <prvTraceStoreKernelCall>:
{
 80041e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (recorder_busy)
 80041e8:	4c15      	ldr	r4, [pc, #84]	; (8004240 <prvTraceStoreKernelCall+0x5c>)
 80041ea:	68a3      	ldr	r3, [r4, #8]
{
 80041ec:	4606      	mov	r6, r0
 80041ee:	4615      	mov	r5, r2
	if (recorder_busy)
 80041f0:	b123      	cbz	r3, 80041fc <prvTraceStoreKernelCall+0x18>
}
 80041f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 80041f6:	4813      	ldr	r0, [pc, #76]	; (8004244 <prvTraceStoreKernelCall+0x60>)
 80041f8:	f7ff bce0 	b.w	8003bbc <prvTraceError>
	if (handle_of_last_logged_task == 0)
 80041fc:	7c23      	ldrb	r3, [r4, #16]
 80041fe:	b1eb      	cbz	r3, 800423c <prvTraceStoreKernelCall+0x58>
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004200:	f3ef 8710 	mrs	r7, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	2301      	movs	r3, #1
 8004206:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 800420a:	68a3      	ldr	r3, [r4, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	60a3      	str	r3, [r4, #8]
	if (RecorderDataPtr->recorderActive)
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	b16b      	cbz	r3, 8004232 <prvTraceStoreKernelCall+0x4e>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004216:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800421a:	f7ff fef5 	bl	8004008 <prvTraceGetDTS>
 800421e:	4680      	mov	r8, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8004220:	f7ff fce6 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (kse != 0)
 8004224:	b128      	cbz	r0, 8004232 <prvTraceStoreKernelCall+0x4e>
			kse->dts = dts1;
 8004226:	f8a0 8002 	strh.w	r8, [r0, #2]
			kse->type = (uint8_t)ecode;
 800422a:	7006      	strb	r6, [r0, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800422c:	7045      	strb	r5, [r0, #1]
			prvTraceUpdateCounters();
 800422e:	f7ff fca1 	bl	8003b74 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8004232:	68a3      	ldr	r3, [r4, #8]
 8004234:	3b01      	subs	r3, #1
 8004236:	60a3      	str	r3, [r4, #8]
 8004238:	f387 8810 	msr	PRIMASK, r7
}
 800423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004240:	20003e54 	.word	0x20003e54
 8004244:	08004c8f 	.word	0x08004c8f

08004248 <prvTraceStoreKernelCallWithParam>:
{
 8004248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (recorder_busy)
 800424c:	4c1a      	ldr	r4, [pc, #104]	; (80042b8 <prvTraceStoreKernelCallWithParam+0x70>)
{
 800424e:	4619      	mov	r1, r3
	if (recorder_busy)
 8004250:	68a3      	ldr	r3, [r4, #8]
{
 8004252:	4680      	mov	r8, r0
 8004254:	4617      	mov	r7, r2
	if (recorder_busy)
 8004256:	b12b      	cbz	r3, 8004264 <prvTraceStoreKernelCallWithParam+0x1c>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8004258:	4818      	ldr	r0, [pc, #96]	; (80042bc <prvTraceStoreKernelCallWithParam+0x74>)
}
 800425a:	b003      	add	sp, #12
 800425c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8004260:	f7ff bcac 	b.w	8003bbc <prvTraceError>
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004264:	f3ef 8610 	mrs	r6, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004268:	2301      	movs	r3, #1
 800426a:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 800426e:	68a3      	ldr	r3, [r4, #8]
 8004270:	3301      	adds	r3, #1
 8004272:	60a3      	str	r3, [r4, #8]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	b1b3      	cbz	r3, 80042a8 <prvTraceStoreKernelCallWithParam+0x60>
 800427a:	7c23      	ldrb	r3, [r4, #16]
 800427c:	b1a3      	cbz	r3, 80042a8 <prvTraceStoreKernelCallWithParam+0x60>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 800427e:	20ff      	movs	r0, #255	; 0xff
 8004280:	9101      	str	r1, [sp, #4]
 8004282:	f7ff fec1 	bl	8004008 <prvTraceGetDTS>
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8004286:	9901      	ldr	r1, [sp, #4]
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8004288:	4681      	mov	r9, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 800428a:	20ff      	movs	r0, #255	; 0xff
 800428c:	f7ff fcc8 	bl	8003c20 <prvTraceGetParam>
 8004290:	4605      	mov	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8004292:	f7ff fcad 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (kse != 0)
 8004296:	b138      	cbz	r0, 80042a8 <prvTraceStoreKernelCallWithParam+0x60>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8004298:	f880 9003 	strb.w	r9, [r0, #3]
			kse->type = (uint8_t)evtcode;
 800429c:	f880 8000 	strb.w	r8, [r0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80042a0:	7047      	strb	r7, [r0, #1]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 80042a2:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
 80042a4:	f7ff fc66 	bl	8003b74 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 80042a8:	68a3      	ldr	r3, [r4, #8]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	60a3      	str	r3, [r4, #8]
 80042ae:	f386 8810 	msr	PRIMASK, r6
}
 80042b2:	b003      	add	sp, #12
 80042b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042b8:	20003e54 	.word	0x20003e54
 80042bc:	08004cc4 	.word	0x08004cc4

080042c0 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
 80042c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (recorder_busy)
 80042c4:	4c19      	ldr	r4, [pc, #100]	; (800432c <prvTraceStoreKernelCallWithNumericParamOnly+0x6c>)
 80042c6:	68a3      	ldr	r3, [r4, #8]
{
 80042c8:	4607      	mov	r7, r0
	if (recorder_busy)
 80042ca:	b12b      	cbz	r3, 80042d8 <prvTraceStoreKernelCallWithNumericParamOnly+0x18>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 80042cc:	4818      	ldr	r0, [pc, #96]	; (8004330 <prvTraceStoreKernelCallWithNumericParamOnly+0x70>)
}
 80042ce:	b002      	add	sp, #8
 80042d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 80042d4:	f7ff bc72 	b.w	8003bbc <prvTraceError>
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042d8:	f3ef 8610 	mrs	r6, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042dc:	2301      	movs	r3, #1
 80042de:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 80042e2:	68a3      	ldr	r3, [r4, #8]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60a3      	str	r3, [r4, #8]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	b1ab      	cbz	r3, 800431a <prvTraceStoreKernelCallWithNumericParamOnly+0x5a>
 80042ee:	7c23      	ldrb	r3, [r4, #16]
 80042f0:	b19b      	cbz	r3, 800431a <prvTraceStoreKernelCallWithNumericParamOnly+0x5a>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 80042f2:	20ff      	movs	r0, #255	; 0xff
 80042f4:	9101      	str	r1, [sp, #4]
 80042f6:	f7ff fe87 	bl	8004008 <prvTraceGetDTS>
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80042fa:	9901      	ldr	r1, [sp, #4]
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 80042fc:	4680      	mov	r8, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80042fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004302:	f7ff fc8d 	bl	8003c20 <prvTraceGetParam>
 8004306:	4605      	mov	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8004308:	f7ff fc72 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (kse != 0)
 800430c:	b128      	cbz	r0, 800431a <prvTraceStoreKernelCallWithNumericParamOnly+0x5a>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800430e:	f880 8001 	strb.w	r8, [r0, #1]
			kse->type = (uint8_t)evtcode;
 8004312:	7007      	strb	r7, [r0, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8004314:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
 8004316:	f7ff fc2d 	bl	8003b74 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 800431a:	68a3      	ldr	r3, [r4, #8]
 800431c:	3b01      	subs	r3, #1
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	f386 8810 	msr	PRIMASK, r6
}
 8004324:	b002      	add	sp, #8
 8004326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800432a:	bf00      	nop
 800432c:	20003e54 	.word	0x20003e54
 8004330:	08004cf9 	.word	0x08004cf9

08004334 <prvTraceStoreTaskswitch>:
{
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	4606      	mov	r6, r0
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800433a:	f3ef 8810 	mrs	r8, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433e:	f04f 0a01 	mov.w	sl, #1
 8004342:	f38a 8810 	msr	PRIMASK, sl
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8004346:	4c1c      	ldr	r4, [pc, #112]	; (80043b8 <prvTraceStoreTaskswitch+0x84>)
 8004348:	68a3      	ldr	r3, [r4, #8]
 800434a:	4453      	add	r3, sl
 800434c:	60a3      	str	r3, [r4, #8]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800434e:	7c23      	ldrb	r3, [r4, #16]
 8004350:	4283      	cmp	r3, r0
 8004352:	d02a      	beq.n	80043aa <prvTraceStoreTaskswitch+0x76>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	b33b      	cbz	r3, 80043aa <prvTraceStoreTaskswitch+0x76>
		isPendingContextSwitch = 0;
 800435a:	2300      	movs	r3, #0
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800435c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		isPendingContextSwitch = 0;
 8004360:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004364:	f7ff fe50 	bl	8004008 <prvTraceGetDTS>
		handle_of_last_logged_task = task_handle;
 8004368:	7426      	strb	r6, [r4, #16]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800436a:	4681      	mov	r9, r0
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 800436c:	f7ff fc40 	bl	8003bf0 <prvTraceNextFreeEventBufferSlot>
		if (ts != 0)
 8004370:	4605      	mov	r5, r0
 8004372:	b1d0      	cbz	r0, 80043aa <prvTraceStoreTaskswitch+0x76>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8004374:	2103      	movs	r1, #3
 8004376:	7c20      	ldrb	r0, [r4, #16]
 8004378:	6827      	ldr	r7, [r4, #0]
 800437a:	f7ff fc67 	bl	8003c4c <uiIndexOfObject>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8004384:	4407      	add	r7, r0
 8004386:	441f      	add	r7, r3
			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8004388:	4652      	mov	r2, sl
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 800438a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
			ts->dts = dts3;
 800438e:	f8a5 9002 	strh.w	r9, [r5, #2]
				ts->type = TS_TASK_BEGIN;
 8004392:	4553      	cmp	r3, sl
 8004394:	bf0c      	ite	eq
 8004396:	2307      	moveq	r3, #7
 8004398:	2306      	movne	r3, #6
 800439a:	702b      	strb	r3, [r5, #0]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
 800439c:	7c21      	ldrb	r1, [r4, #16]
			ts->objHandle = hnd8;
 800439e:	706e      	strb	r6, [r5, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80043a0:	2003      	movs	r0, #3
 80043a2:	f7ff fc9b 	bl	8003cdc <prvTraceSetObjectState>
			prvTraceUpdateCounters();
 80043a6:	f7ff fbe5 	bl	8003b74 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80043aa:	68a3      	ldr	r3, [r4, #8]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	60a3      	str	r3, [r4, #8]
 80043b0:	f388 8810 	msr	PRIMASK, r8
}
 80043b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b8:	20003e54 	.word	0x20003e54

080043bc <xTraceEnable>:
{
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	4604      	mov	r4, r0
	if (xTraceInitialize() == TRC_FAIL)
 80043c0:	f7ff fd60 	bl	8003e84 <xTraceInitialize>
 80043c4:	2801      	cmp	r0, #1
 80043c6:	d101      	bne.n	80043cc <xTraceEnable+0x10>
		return TRC_FAIL;
 80043c8:	2001      	movs	r0, #1
 80043ca:	e00d      	b.n	80043e8 <xTraceEnable+0x2c>
	if (uiStartOption == TRC_START)
 80043cc:	2c01      	cmp	r4, #1
 80043ce:	d139      	bne.n	8004444 <xTraceEnable+0x88>
		if (xTraceKernelPortEnable() == TRC_FAIL)
 80043d0:	f7ff fad2 	bl	8003978 <xTraceKernelPortEnable>
 80043d4:	2801      	cmp	r0, #1
 80043d6:	d0f7      	beq.n	80043c8 <xTraceEnable+0xc>
	init_hwtc_count = TRC_HWTC_COUNT;
 80043d8:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <xTraceEnable+0x9c>)
 80043da:	4d20      	ldr	r5, [pc, #128]	; (800445c <xTraceEnable+0xa0>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	if (RecorderDataPtr == 0)
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	b90b      	cbnz	r3, 80043ea <xTraceEnable+0x2e>
	return TRC_SUCCESS;
 80043e6:	2000      	movs	r0, #0
}
 80043e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (RecorderDataPtr->recorderActive == 1)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d0fa      	beq.n	80043e6 <xTraceEnable+0x2a>
	if (traceErrorMessage == 0)
 80043f0:	68ef      	ldr	r7, [r5, #12]
 80043f2:	2f00      	cmp	r7, #0
 80043f4:	d1f7      	bne.n	80043e6 <xTraceEnable+0x2a>
    __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043f6:	f3ef 8610 	mrs	r6, PRIMASK
    __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fa:	f384 8810 	msr	PRIMASK, r4
		trcCRITICAL_SECTION_BEGIN();
 80043fe:	68ab      	ldr	r3, [r5, #8]
 8004400:	3301      	adds	r3, #1
 8004402:	60ab      	str	r3, [r5, #8]
		RecorderDataPtr->recorderActive = 1;
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	631c      	str	r4, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8004408:	f7ff fab1 	bl	800396e <prvTraceGetCurrentTaskHandle>
 800440c:	f7ff fa67 	bl	80038de <prvTraceGetTaskNumberLow16>
		if (handle == 0)
 8004410:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8004414:	d10d      	bne.n	8004432 <xTraceEnable+0x76>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8004416:	2003      	movs	r0, #3
 8004418:	f7ff fc96 	bl	8003d48 <prvTraceGetObjectHandle>
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800441c:	4a10      	ldr	r2, [pc, #64]	; (8004460 <xTraceEnable+0xa4>)
 800441e:	4601      	mov	r1, r0
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8004420:	4604      	mov	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8004422:	2003      	movs	r0, #3
 8004424:	f7ff fcd2 	bl	8003dcc <prvTraceSetObjectName>
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8004428:	463a      	mov	r2, r7
 800442a:	4621      	mov	r1, r4
 800442c:	2003      	movs	r0, #3
 800442e:	f7ff fc2d 	bl	8003c8c <prvTraceSetPriorityProperty>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff ff7e 	bl	8004334 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8004438:	68ab      	ldr	r3, [r5, #8]
 800443a:	3b01      	subs	r3, #1
 800443c:	60ab      	str	r3, [r5, #8]
 800443e:	f386 8810 	msr	PRIMASK, r6
 8004442:	e7d0      	b.n	80043e6 <xTraceEnable+0x2a>
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 8004444:	2c02      	cmp	r4, #2
 8004446:	d103      	bne.n	8004450 <xTraceEnable+0x94>
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8004448:	4806      	ldr	r0, [pc, #24]	; (8004464 <xTraceEnable+0xa8>)
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 800444a:	f7ff fbb7 	bl	8003bbc <prvTraceError>
 800444e:	e7bb      	b.n	80043c8 <xTraceEnable+0xc>
	else if (uiStartOption != TRC_START_FROM_HOST)
 8004450:	2c00      	cmp	r4, #0
 8004452:	d0c8      	beq.n	80043e6 <xTraceEnable+0x2a>
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8004454:	4804      	ldr	r0, [pc, #16]	; (8004468 <xTraceEnable+0xac>)
 8004456:	e7f8      	b.n	800444a <xTraceEnable+0x8e>
 8004458:	e0001000 	.word	0xe0001000
 800445c:	20003e54 	.word	0x20003e54
 8004460:	08004d2e 	.word	0x08004d2e
 8004464:	08004d38 	.word	0x08004d38
 8004468:	08004d78 	.word	0x08004d78

0800446c <prvAddTaskToStackMonitor>:

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)

void prvAddTaskToStackMonitor(void* task)
{
 800446c:	b510      	push	{r4, lr}
	int foundEmptySlot = 0;

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
	{
		if (tasksInStackMonitor[i].tcb == 0)
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <prvAddTaskToStackMonitor+0x34>)
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8004470:	2200      	movs	r2, #0
		if (tasksInStackMonitor[i].tcb == 0)
 8004472:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8004476:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
 800447a:	b944      	cbnz	r4, 800448e <prvAddTaskToStackMonitor+0x22>
		{
			tasksInStackMonitor[i].tcb = task;
 800447c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
			tasksInStackMonitor[i].tcb = task;
 8004484:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 8004488:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
	}
}
 800448c:	bd10      	pop	{r4, pc}
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 800448e:	3201      	adds	r2, #1
 8004490:	2a0a      	cmp	r2, #10
 8004492:	d1f0      	bne.n	8004476 <prvAddTaskToStackMonitor+0xa>
		tasksNotIncluded++;
 8004494:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004498:	3201      	adds	r2, #1
 800449a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800449e:	e7f5      	b.n	800448c <prvAddTaskToStackMonitor+0x20>
 80044a0:	20003e54 	.word	0x20003e54

080044a4 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 80044a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 80044a6:	4c1c      	ldr	r4, [pc, #112]	; (8004518 <prvReportStackUsage+0x74>)
 80044a8:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130

	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != 0)
 80044ac:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80044b0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80044b4:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80044b8:	b1f8      	cbz	r0, 80044fa <prvReportStackUsage+0x56>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace;
			xTraceKernelPortGetUnusedStack(tasksInStackMonitor[i].tcb, &unusedStackSpace);
 80044ba:	a901      	add	r1, sp, #4
 80044bc:	f7ff fa06 	bl	80038cc <xTraceKernelPortGetUnusedStack>

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 80044c0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80044c4:	9901      	ldr	r1, [sp, #4]
 80044c6:	00da      	lsls	r2, r3, #3
 80044c8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80044cc:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80044d0:	4288      	cmp	r0, r1
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 80044d2:	bf88      	it	hi
 80044d4:	f8c3 10b8 	strhi.w	r1, [r3, #184]	; 0xb8

			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
 80044d8:	18a3      	adds	r3, r4, r2
 80044da:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80044de:	f7ff f9fe 	bl	80038de <prvTraceGetTaskNumberLow16>
 80044e2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80044e6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80044ea:	b2c2      	uxtb	r2, r0
 80044ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044f0:	20ea      	movs	r0, #234	; 0xea
 80044f2:	2103      	movs	r1, #3
 80044f4:	f7ff fea8 	bl	8004248 <prvTraceStoreKernelCallWithParam>

			count++;
 80044f8:	2001      	movs	r0, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 80044fa:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80044fe:	220a      	movs	r2, #10
 8004500:	3301      	adds	r3, #1
 8004502:	fb93 f1f2 	sdiv	r1, r3, r2
 8004506:	fb02 3311 	mls	r3, r2, r1, r3
 800450a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 800450e:	b908      	cbnz	r0, 8004514 <prvReportStackUsage+0x70>
 8004510:	42ab      	cmp	r3, r5
 8004512:	d1cb      	bne.n	80044ac <prvReportStackUsage+0x8>
}
 8004514:	b003      	add	sp, #12
 8004516:	bd30      	pop	{r4, r5, pc}
 8004518:	20003e54 	.word	0x20003e54

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	4d0d      	ldr	r5, [pc, #52]	; (8004554 <__libc_init_array+0x38>)
 8004520:	4c0d      	ldr	r4, [pc, #52]	; (8004558 <__libc_init_array+0x3c>)
 8004522:	1b64      	subs	r4, r4, r5
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	2600      	movs	r6, #0
 8004528:	42a6      	cmp	r6, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	4d0b      	ldr	r5, [pc, #44]	; (800455c <__libc_init_array+0x40>)
 800452e:	4c0c      	ldr	r4, [pc, #48]	; (8004560 <__libc_init_array+0x44>)
 8004530:	f000 f82e 	bl	8004590 <_init>
 8004534:	1b64      	subs	r4, r4, r5
 8004536:	10a4      	asrs	r4, r4, #2
 8004538:	2600      	movs	r6, #0
 800453a:	42a6      	cmp	r6, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	f855 3b04 	ldr.w	r3, [r5], #4
 8004544:	4798      	blx	r3
 8004546:	3601      	adds	r6, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	f855 3b04 	ldr.w	r3, [r5], #4
 800454e:	4798      	blx	r3
 8004550:	3601      	adds	r6, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	08004db8 	.word	0x08004db8
 8004558:	08004db8 	.word	0x08004db8
 800455c:	08004db8 	.word	0x08004db8
 8004560:	08004dbc 	.word	0x08004dbc

08004564 <memcpy>:
 8004564:	440a      	add	r2, r1
 8004566:	4291      	cmp	r1, r2
 8004568:	f100 33ff 	add.w	r3, r0, #4294967295
 800456c:	d100      	bne.n	8004570 <memcpy+0xc>
 800456e:	4770      	bx	lr
 8004570:	b510      	push	{r4, lr}
 8004572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457a:	4291      	cmp	r1, r2
 800457c:	d1f9      	bne.n	8004572 <memcpy+0xe>
 800457e:	bd10      	pop	{r4, pc}

08004580 <memset>:
 8004580:	4402      	add	r2, r0
 8004582:	4603      	mov	r3, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <_init>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr

0800459c <_fini>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr
